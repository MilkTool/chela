using Chela.Lang;
using Chela.Graphics;
using Chela.Graphics.GL2;
using Chela.Gui;
using Chela.IO;
using Chela.Reflection;

namespace NeHeDemo
{
    public sealed class Lesson5: Lesson
    {
        int textureName;
        vec3 rotation;
        
        protected override void Initialize()
        {
            // Perform standard initialization.
            base.Initialize();
            
            // Load the texture image.
            Assembly assembly = typeof(Lesson5).Assembly;
            Stream imageStream = assembly.GetManifestResourceStream("NeHe.bmp");
            Image image = ImageFormatProvider.LoadByExt(imageStream, ".bmp");
            
            // Enable textures.
            GL.Enable(EnableCap.Texture2D);
            
            // Create the texture.
            GL.GenTextures(1, out textureName);
            GL.BindTexture(TextureTarget.Texture2D, textureName);
            
            // Upload the texture data.
            GL.TexImage2D<byte>(TextureTarget.Texture2D, 0, PixelInternalFormat.Three,
                image.Width, image.Height, 0, GL2.PixelFormat.Rgb, PixelType.UnsignedByte, image.Pixels);
            GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMinFilter,
                        (int)TextureMinFilter.Linear);
            GL.TexParameter(TextureTarget.Texture2D, TextureParameterName.TextureMagFilter,
                        (int)TextureMagFilter.Linear);

            GL.Color3(1.0f, 1.0f, 1.0f);
        }
        
        protected override void Render()
        {
            // Clear the screen and the depth buffer.
            GL.Clear(ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit);

            // Reset the screen.            
            GL.MatrixMode(MatrixMode.Modelview);
            GL.LoadIdentity();
            
            // Move into The Screen 5.0
            GL.Translate(0.0f, 0.0f, -5.0f); 
            
            // Perform rotations
            GL.Rotate(rotation.x, 1.0f, 0.0f, 0.0f);
            GL.Rotate(rotation.y, 0.0f, 1.0f, 0.0f);
            GL.Rotate(rotation.z, 0.0f, 0.0f, 1.0f);
            
            GL.BindTexture(TextureTarget.Texture2D, textureName);
            GL.Begin(BeginMode.Quads);
                // Front Face
                GL.TexCoord2(0.0f, 0.0f); GL.Vertex3(-1.0f, -1.0f,  1.0f);  // Bottom Left Of The Texture and Quad
                GL.TexCoord2(1.0f, 0.0f); GL.Vertex3( 1.0f, -1.0f,  1.0f);  // Bottom Right Of The Texture and Quad
                GL.TexCoord2(1.0f, 1.0f); GL.Vertex3( 1.0f,  1.0f,  1.0f);  // Top Right Of The Texture and Quad
                GL.TexCoord2(0.0f, 1.0f); GL.Vertex3(-1.0f,  1.0f,  1.0f);  // Top Left Of The Texture and Quad
                // Back Face
                GL.TexCoord2(1.0f, 0.0f); GL.Vertex3(-1.0f, -1.0f, -1.0f);  // Bottom Right Of The Texture and Quad
                GL.TexCoord2(1.0f, 1.0f); GL.Vertex3(-1.0f,  1.0f, -1.0f);  // Top Right Of The Texture and Quad
                GL.TexCoord2(0.0f, 1.0f); GL.Vertex3( 1.0f,  1.0f, -1.0f);  // Top Left Of The Texture and Quad
                GL.TexCoord2(0.0f, 0.0f); GL.Vertex3( 1.0f, -1.0f, -1.0f);  // Bottom Left Of The Texture and Quad
                // Top Face
                GL.TexCoord2(0.0f, 1.0f); GL.Vertex3(-1.0f,  1.0f, -1.0f);  // Top Left Of The Texture and Quad
                GL.TexCoord2(0.0f, 0.0f); GL.Vertex3(-1.0f,  1.0f,  1.0f);  // Bottom Left Of The Texture and Quad
                GL.TexCoord2(1.0f, 0.0f); GL.Vertex3( 1.0f,  1.0f,  1.0f);  // Bottom Right Of The Texture and Quad
                GL.TexCoord2(1.0f, 1.0f); GL.Vertex3( 1.0f,  1.0f, -1.0f);  // Top Right Of The Texture and Quad
                // Bottom Face
                GL.TexCoord2(1.0f, 1.0f); GL.Vertex3(-1.0f, -1.0f, -1.0f);  // Top Right Of The Texture and Quad
                GL.TexCoord2(0.0f, 1.0f); GL.Vertex3( 1.0f, -1.0f, -1.0f);  // Top Left Of The Texture and Quad
                GL.TexCoord2(0.0f, 0.0f); GL.Vertex3( 1.0f, -1.0f,  1.0f);  // Bottom Left Of The Texture and Quad
                GL.TexCoord2(1.0f, 0.0f); GL.Vertex3(-1.0f, -1.0f,  1.0f);  // Bottom Right Of The Texture and Quad
                // Right face
                GL.TexCoord2(1.0f, 0.0f); GL.Vertex3( 1.0f, -1.0f, -1.0f);  // Bottom Right Of The Texture and Quad
                GL.TexCoord2(1.0f, 1.0f); GL.Vertex3( 1.0f,  1.0f, -1.0f);  // Top Right Of The Texture and Quad
                GL.TexCoord2(0.0f, 1.0f); GL.Vertex3( 1.0f,  1.0f,  1.0f);  // Top Left Of The Texture and Quad
                GL.TexCoord2(0.0f, 0.0f); GL.Vertex3( 1.0f, -1.0f,  1.0f);  // Bottom Left Of The Texture and Quad
                // Left Face
                GL.TexCoord2(0.0f, 0.0f); GL.Vertex3(-1.0f, -1.0f, -1.0f);  // Bottom Left Of The Texture and Quad
                GL.TexCoord2(1.0f, 0.0f); GL.Vertex3(-1.0f, -1.0f,  1.0f);  // Bottom Right Of The Texture and Quad
                GL.TexCoord2(1.0f, 1.0f); GL.Vertex3(-1.0f,  1.0f,  1.0f);  // Top Right Of The Texture and Quad
                GL.TexCoord2(0.0f, 1.0f); GL.Vertex3(-1.0f,  1.0f, -1.0f);  // Top Left Of The Texture and Quad
            GL.End();

            // Swap the buffers.
            SwapBuffers();
        }
        
        protected override void Frame(float delta)
        {
            rotation += vec3(30,20,40)*2*delta;
        }
    }
}


using Chela.Lang;

namespace Chela.Gui
{
    /// <summary>
    /// Button widget.
    /// </summary>
    public class Button: Widget
    {
        /// <summary>
        /// Button activation event.
        /// </summary>
        public event ActivateEventHandler Activated;
        
        // Button drawing colors.    
        private static Color NormalColor1 = Color(148,200,237);
        private static Color NormalColor2 = Color(223,238,249);
        private static Color DownColor1 = Color(183,195,204);
        private static Color DownColor2 = Color(127,180,204);        
        private static Color MouseOverColor1 = Color(148,210,237);
        private static Color MouseOverColor2 = Color(223,245,249);
       
        public Button(Window parent, ivec2 position, ivec2 size)
            : base(parent, position, size)
        {
        }

        public Button(Window parent)
            : base(parent)
        {
        }
        
        /// <summary>
        /// Button activation event.
        /// </summary>
        protected virtual void OnActivate(ActivateEvent ev)
        {
            if(Activated != null)
                Activated(this, ev);
        }

        protected override void OnExposeContent(ExposeEvent ev, GraphicContext gc)
        {
            // Get the current theme.
            Theme theme = Theme.Current;
            
            // Draw a gradient.
            if(IsLeftButtonDown)
                gc.DrawVertGradient(0, 0, Width, Height, theme.ButtonDownColor1,
                                    theme.ButtonDownColor2);
            else if(IsMouseOver)
                gc.DrawVertGradient(0, 0, Width, Height, theme.ButtonOverColor1,
                                    theme.ButtonOverColor2);
            else
                gc.DrawVertGradient(0, 0, Width, Height, theme.ButtonColor1,
                                    theme.ButtonColor2);
            
            // Draw a rectangle.
            gc.DrawRectangle(0, 0, Width-1, Height-1);

            // TODO: Draw the text.
        }
        
        protected override void OnMouseEnter(GuiEvent ev)
        {
            // Propagate.
            base.OnMouseEnter(ev);
            
            // Redraw.
            Refresh();
        }

        protected override void OnMouseLeave(GuiEvent ev)
        {
            // Propagate.
            base.OnMouseLeave(ev);
            
            // Redraw.
            Refresh();
        }
        
        protected override void OnButtonPressed(ButtonEvent ev)
        {
            // Propagate.
            base.OnButtonPressed(ev);
            
            // Capture and redraw when the left button is pressed.
            if(ev.Button == MouseButton.Left)
            {
                CaptureMouse();
                Refresh();
            }
        }

        protected override void OnButtonReleased(ButtonEvent ev)
        {
            // Propagate.
            base.OnButtonReleased(ev);

            // Release the capture and redraw.
            if(ev.Button == MouseButton.Left)
            {
                ReleaseMouse();
                Refresh();
                
                // If the mouse is still inside of me, raise ActivateEvent.
                if(IsMouseOver)
                {
                    ActivateEvent ev = new ActivateEvent(this);
                    OnActivate(ev);
                }
            }
        }
    }
}


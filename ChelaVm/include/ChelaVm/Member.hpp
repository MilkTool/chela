#ifndef CHELAVM_MEMBER_HPP
#define CHELAVM_MEMBER_HPP

#include <string>
#include <vector>
#include <memory>
#include "llvm/Constants.h"
#include "llvm/GlobalValue.h"
#include "llvm/Analysis/DebugInfo.h"
#include "ChelaVm/VirtualMachine.hpp"

namespace ChelaVm
{
    // Make sure to keep this synchronized with MemberFlags.cs
    enum MemberFlags
    {
        // Visibility.
        MFL_Internal = 0,
        MFL_Public = 1,
        MFL_Protected = 2,
        MFL_ProtectedInternal = 3,
        MFL_Private = 4,
        MFL_VisibilityMask = 0x000F,

        // Instance.
        MFL_Instanced = 0<<4,
        MFL_Static = 1<<4,
        MFL_Virtual = 2<<4,
        MFL_Override = 3<<4,
        MFL_Constructor = 4<<4,
        MFL_Abstract = 5<<4,
        MFL_Contract = 6<<4,
        MFL_StaticConstructor = 7<<4,
        MFL_InstanceMask = 0x00F0,

        // Language.
        MFL_Native  = 0<<8,
        MFL_Kernel  = 1<<8, // GPGPU capable.
        MFL_Runtime = 2<<8, // Implementation generated by the VM.
        MFL_Cdecl   = 3<<8, // C functions/globals.
        MFL_StdCall = 4<<8, // Pascal style calling convention
        MFL_ApiCall = 5<<8, // Stdcall under win32, cdecl under unixes.
        MFL_LanguageMask = 0x0F00,

        // Linkage
        MFL_Module = 0<<12,
        MFL_External = 1<<12,
        MFL_LinkageMask = 0xF000,

        // Inheritance
        MFL_NormalInheritance = 0<<16,
        MFL_Sealed = 1<<16,
        MFL_InheritanceMask = 0x000F0000,

        // Access
        MFL_DefaultAccess = 0<<20,
        MFL_ReadOnly= 1<<20,
        MFL_AccessMask = 0x00F00000,

        // Security.
        MFL_DefaultSecurity = 0<<24,
        MFL_Unsafe = 1<<24,
        MFL_SecurityMask = 0x0F000000,

        MFL_Default = 0,
    };

    class AttributeConstant;
    class GenericPrototype;
    class GenericInstance;
    class ModuleReader;
    class Module;
    struct MemberHeader;
    class DebugInformation;
    class ChelaType;
    class Structure;
    class ConstantStructure;
    typedef std::auto_ptr<ConstantStructure> ConstantStructurePtr;
    class Member
    {
    public:
        Member(Module *module);
        Member(VirtualMachine *vm);
        virtual ~Member();

        // Virtual machine and context.
        VirtualMachine *GetVM() const
        {
            return virtualMachine;
        }

        llvm::LLVMContext &GetLlvmContext() const
        {
            return virtualMachine->getContext();
        }

        // Module.
        Module *GetModule() const;
        virtual Module *GetDeclaringModule() const;

        // Member scoping.
        virtual void UpdateParent(Member *parent);
        Member *GetParent();
        const Member *GetParent() const;

        // Naming.
        virtual std::string GetName() const;
        virtual std::string GetFullName() const;
        virtual std::string GetMangledName() const;

        // The member flags.
        virtual MemberFlags GetFlags() const;

        // Member identification.
        void SetMemberId(uint32_t id);
        uint32_t GetMemberId() const;

        // Member kind detection.
        virtual bool IsAnonymous() const;
        virtual bool IsType() const;
        virtual bool IsTypeGroup() const;
        virtual bool IsNamespace() const;
        virtual bool IsStructure() const;
        virtual bool IsClass() const;
        virtual bool IsClosure() const;
        virtual bool IsInterface() const;
        virtual bool IsFunction() const;
        virtual bool IsFunctionInstance() const;
        virtual bool IsFunctionGroup() const;
        virtual bool IsField() const;
        virtual bool IsMemberInstance() const;
        virtual bool IsProperty() const;
        virtual bool IsTypeInstance() const;

        // Visibility.
        virtual bool IsPublic() const;
        virtual bool IsInternal() const;
        virtual bool IsProtected() const;
        virtual bool IsProtectedInternal() const;
        virtual bool IsPrivate() const;

        // Linkage.
        virtual bool IsExtern() const;

        // Language.
        virtual bool IsCdecl() const;
        virtual bool IsRuntime() const;
        virtual bool IsKernel() const;

        // Instance semantics.
        virtual bool IsStatic() const;
        virtual bool IsAbstract() const;
        virtual bool IsContract() const;
        virtual bool IsVirtual() const;
        virtual bool IsOverride() const;
        virtual bool IsConstructor() const;
        virtual bool IsStaticConstructor() const;

        // Inheritance restriction
        virtual bool IsSealed() const;

        // Security.
        virtual bool IsUnsafe() const;

        // Access restrictions.
        virtual bool IsReadOnly() const;

        // Genericity.
        virtual bool IsGeneric() const;
        virtual bool IsGenericBased() const;
        bool IsParentGeneric() const;

        // Member deserialization, loading and compilation.
        virtual void ReadStructure(ModuleReader &reader, const MemberHeader &header);
        virtual void Read(ModuleReader &reader, const MemberHeader &header);
        virtual void DeclarePass();
        virtual void DefinitionPass();

        // Generic data.
        virtual const GenericPrototype *GetGenericPrototype() const;
        virtual const GenericInstance *GetGenericInstanceData() const;

        // Scoped generic data,
        const GenericPrototype *GetCompleteGenericPrototype() const;
        const GenericInstance *GetCompleteGenericInstance() const;

        // Generic instancing.
        virtual Member *InstanceMember(Member *factory, Module *implementingModule, const GenericInstance *instance);
        Member *InstanceMember(Module *implementingModule, const GenericInstance *instance);
        virtual Member *GetTemplateMember() const;

        // Custom attributes access.
        AttributeConstant *GetCustomAttribute(Structure *attribute) const;

        // Debug information generation.
        virtual llvm::DIDescriptor GetDebugNode(DebugInformation *context) const;

        // Reflected member information.
        virtual llvm::GlobalVariable *GetMemberInfo();
        llvm::Constant *GetMemberInfo(Module *import);

        // Error generation.
        void Error(const std::string &message) const;
        void Warning(const std::string &message) const;

    private:
        VirtualMachine *virtualMachine;
        Module *module;
        Member *parent;
        uint32_t memberId;

        mutable GenericPrototype *completeGenericPrototype;
        mutable GenericInstance *completeGenericInstance;

    protected:
        llvm::Constant *DeclareAttributes();
        void DeclareAttributes(std::vector<llvm::Constant*> &dest);
        void DefineAttributes();

        void ReadAttributes(ModuleReader &reader, size_t numattributes);
        void SkipAttributes(ModuleReader &reader, size_t numattributes);
        void SetMemberInfoData(ConstantStructurePtr &info, Module *implModule=NULL);
        llvm::Constant *GetReflectedType(const ChelaType *type) const;

        bool CheckExternalVisibility() const;
        llvm::GlobalValue::LinkageTypes ComputeLinkage(bool needsPointer = false) const;
        llvm::GlobalValue::LinkageTypes ComputeMetadataLinkage() const;

        std::vector<AttributeConstant*> attributes;
        llvm::GlobalVariable *attributeList;
    };

};

#endif //CHELAVM_MEMBER_HPP

using Chela.Lang;
using Chela.Reflection;

namespace Chela.Compute
{
    ///<summary>
    ///This represents a local cpu driver.
    ///Those kernel are generated by the compiler.
    ///</summary>
    public sealed class LocalCpuDriver: ComputeDriver
    {
        ///<summary>
        ///The driver name.
        ///</summary>
        public override string Name {
            get {
                return "LocalCPU";
            }
        }

        ///<summary>
        ///Is this a CPU driver.
        ///</summary>
        public override bool IsCPU {
            get {
                return true;
            }
        }
        
        ///<summary>
        ///Is this a local CPU driver.
        ///</summary>
        public override bool IsLocalCPU {
            get {
                return true;
            }
        }
        
        ///<summary>
        ///Is this a GPU driver.
        ///</summary>
        public override bool IsGPU {
            get {
                return false;
            }
        }
        
        ///<summary>
        ///Prepares a kernel.
        ///</summary>
        public override ComputeBinding PrepareKernel(MethodInfo kernelMain, params object[] parameters)
        {
            throw new NotSupportedException("Local CPU driver only can be used by the compiler.");
        }
        
        ///<summary>
        ///Binds a cpu kernel context.
        ///</summary>
        public unsafe ComputeBinding BindKernel(Closure closure, void *method, IStreamHolder[] streams)
        {
            // Create the local cpu thread.
            LocalCpuThread thread = new LocalCpuThread(closure, method, streams);
            return thread.Run;
        }
    };
}

using Chela.Compute;

public __cdecl unsafe ComputeBinding __chela_compute_cpu_bind__(void* context, void *method,
                                                         void **streams, int numstreams)
{
    // Take ownership of the closure.
    Closure closure = reinterpret_cast<Closure> (context);
    __chela_rel_ref__(context);
    
    // Wrap the stream holders in an array.
    IStreamHolder[] holders = new IStreamHolder[numstreams];
    for(int i = 0; i < numstreams; ++i)
        holders[i] = (IStreamHolder)reinterpret_cast<object> (streams[i]);
        
    // Bind the kernel.
    return ComputeDriver.LocalCpuDriver.BindKernel(closure, method, holders);
}


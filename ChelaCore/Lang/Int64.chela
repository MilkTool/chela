using Chela.Globalization;

namespace Chela.Lang
{
    public struct Int64: IFormattable, IntegerConstraint
    {
        internal long __value;

        ///<summary>
        ///The minimal value that an long can have.
        ///</summary>
        public const long MaxValue = 0x7FFFFFFFFFFFFFFFl;

        ///<summary>
        ///The minimal value that an long can have.
        ///</summary>
        public const long MinValue = -0x7FFFFFFFFFFFFFFFl;

        ///<summary>
        ///Gets a string representation of the integer.
        ///</summary>
        public override string ToString()
        {
            return FormatUtil.IntToString_General<long> (__value, null);
        }
        
        ///<summary>
        ///Gets a string representation of the integer.
        ///</summary>
        public string ToString(IFormatProvider provider)
        {
            return FormatUtil.IntToString_General<long> (__value, provider);
        }
        
        ///<summary>
        ///Gets a string representation of the integer.
        ///</summary>
        public string ToString(string format)
        {
            return FormatUtil.IntToString<long> (__value, format, null);
        }

        ///<summary>
        ///Gets a string representation of the integer.
        ///</summary>
        public string ToString(string format, IFormatProvider provider)
        {
            return FormatUtil.IntToString<long> (__value, format, provider);
        }

        ///<summary>
        ///Computes the hash code for this integer.
        ///</summary>
        public override int GetHashCode()
        {
            return (int)( (( ((ulong)__value) & 0xFFFFFFFF00000000UL ) >> 32) ^
                   (((ulong)__value) & 0x00000000FFFFFFFFUL ) );
        }
        
        ///<summary>
        ///Compares this integer with another.
        ///</summary>
        public override bool Equals(object o)
        {
            if(o == null || !(o is Int64))
                return false;
                
            Int64 cmp = (Int64)o;
            return __value == cmp.__value;
        }
        
        ///<summary>
        ///Parses a string representation of an integer.
        ///</summary>
        public static long Parse(string s)
        {
            return Parse(s, NumberStyles.Integer, null);
        }
        
        ///<summary>
        ///Parses a string representation of an integer.
        ///</summary>
        public static long Parse(string s, IFormatProvider provider)
        {
            return Parse(s, NumberStyles.Integer, provider);
        }
        
        ///<summary>
        ///Parses a string representation of an integer.
        ///</summary>
        public static long Parse(string s, NumberStyles styles)
        {
            return Parse(s, styles, null);
        }
                
        ///<summary>
        ///Parses a string representation of an integer.
        ///</summary>
        public static long Parse(string s, NumberStyles styles, IFormatProvider provider)
        {
            long res;
            if(!TryParse(s, styles, provider, out res))
                throw new FormatException();
            return res;
        }
        
        ///<summary>
        ///Tries to parse a string representation of an integer.
        ///</summary>
        public static long TryParse(string s, out long value)
        {
            return TryParse(s, NumberStyles.Integer, null, out value);
        }
        
        ///<summary>
        ///Tries to parse a string representation of an integer.
        ///</summary>
        public static bool TryParse(string s, NumberStyles styles, IFormatProvider provider, out long value)
        {
            return FormatUtil.TryParse_Integer<long> (s, NumberStyles.Integer, provider, out value);
        }
    }
}


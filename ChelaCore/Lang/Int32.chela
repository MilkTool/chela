using Chela.Globalization;

namespace Chela.Lang
{
    public struct Int32: IFormattable, IntegerConstraint
    {
        internal int __value;
        
        public const int MaxValue = 0X7FFFFFFF;
        public const int MinValue = -MaxValue;

        ///<summary>
        ///Gets a string representation of the integer.
        ///</summary>
        public override string ToString()
        {
            return FormatUtil.IntToString_General<int> (__value, null);
        }
        
        ///<summary>
        ///Gets a string representation of the integer.
        ///</summary>
        public string ToString(IFormatProvider provider)
        {
            return FormatUtil.IntToString_General<int> (__value, provider);
        }
        
        ///<summary>
        ///Gets a string representation of the integer.
        ///</summary>
        public string ToString(string format)
        {
            return FormatUtil.IntToString<int> (__value, format, null);
        }

        ///<summary>
        ///Gets a string representation of the integer.
        ///</summary>
        public string ToString(string format, IFormatProvider provider)
        {
            return FormatUtil.IntToString<int> (__value, format, provider);
        }
        
        ///<summary>
        ///Retrieves a hash code associated with the integer.
        ///</summary>
        public override int GetHashCode()
        {
            return (int)__value;
        }
        
        ///<summary>
        ///Compares this integer with another.
        ///</summary>
        public override bool Equals(object o)
        {
            if(o == null || !(o is Int32))
                return false;
            Int32 cmp = (Int32)o;
            return __value == cmp.__value;
        }

        ///<summary>
        ///Parses a string representation of an integer.
        ///</summary>
        public static int Parse(string s)
        {
            return Parse(s, NumberStyles.Integer, null);
        }
        
        ///<summary>
        ///Parses a string representation of an integer.
        ///</summary>
        public static int Parse(string s, IFormatProvider provider)
        {
            return Parse(s, NumberStyles.Integer, provider);
        }
        
        ///<summary>
        ///Parses a string representation of an integer.
        ///</summary>
        public static int Parse(string s, NumberStyles styles)
        {
            return Parse(s, styles, null);
        }
                
        ///<summary>
        ///Parses a string representation of an integer.
        ///</summary>
        public static int Parse(string s, NumberStyles styles, IFormatProvider provider)
        {
            int res;
            if(!TryParse(s, styles, provider, out res))
                throw new FormatException();
            return res;
        }
        
        ///<summary>
        ///Tries to parse a string representation of an integer.
        ///</summary>
        public static bool TryParse(string s, out int value)
        {
            return TryParse(s, NumberStyles.Integer, null, out value);
        }
        
        ///<summary>
        ///Tries to parse a string representation of an integer.
        ///</summary>
        public static bool TryParse(string s, NumberStyles styles, IFormatProvider provider, out int value)
        {
            return FormatUtil.TryParse_Integer<int> (s, NumberStyles.Integer, provider, out value);
        }
    }
}


using Chela.Globalization;

namespace Chela.Lang
{
    ///<summary>
    ///Number formatting utilities.
    ///</summary>
    internal static class FormatUtil
    {
        ///<summary>
        ///Integer general formatting.
        ///</summary>
        public string IntToString_General<T> (T value, IFormatProvider provider)
            where T: IntegerConstraint                                    
        {
            // Get the number format info.
            NumberFormatInfo nfi = null;
            if(provider != null)
                nfi = provider.GetFormat(typeof(NumberFormatInfo)) as NumberFormatInfo;
            if(nfi == null)
                nfi = NumberFormatInfo.CurrentInfo;

            // Allocate a buffer for the digits.
            ReverseStringBuilder builder =
                new ReverseStringBuilder(sizeof(T)*8/3 +
                    Math.Max(nfi.NegativeSign.Length, nfi.PositiveSign.Length));

            // Work only with positive integers.
            ulong rem = 0;
            bool isNegative = value < default(T);
            if(isNegative)
                rem = (ulong)(-value);
            else
                rem = (ulong)value;

            // Prepend digit by digit.
            do
            {
                // Extract the digit.
                int digit = (int) (rem % 10);
                builder.Prepend((char)('0' + digit));

                // Process the next digit.
                rem /= 10u;
            } while(rem != 0);

            // Add the sign.
            if(isNegative)
                builder.Prepend(nfi.NegativeSign);
            else
                builder.Prepend(nfi.PositiveSign);

            // Return the string.
            return builder.ToString();
        }
        
        ///<summary>
        ///Integer currency formatting.
        ///</summary>
        public string IntToString_Currency<T> (T value, IFormatProvider provider)
            where T: IntegerConstraint                                    
        {
            throw new NotImplementedException();
        }

        ///<summary>
        ///Integer decimal formatting.
        ///</summary>
        public string IntToString_Decimal<T> (T value, IFormatProvider provider)
            where T: IntegerConstraint                                    
        {
            throw new NotImplementedException();
        }

        ///<summary>
        ///Integer exponential formatting.
        ///</summary>
        public string IntToString_Exponential<T> (T value, IFormatProvider provider)
            where T: IntegerConstraint                                    
        {
            throw new NotImplementedException();
        }
        
        ///<summary>
        ///Integer fixed point formatting.
        ///</summary>
        public string IntToString_FixedPoint<T> (T value, IFormatProvider provider)
            where T: IntegerConstraint                                    
        {
            throw new NotImplementedException();
        }
        
        ///<summary>
        ///Integer number formatting.
        ///</summary>
        public string IntToString_Number<T> (T value, IFormatProvider provider)
            where T: IntegerConstraint                                    
        {
            throw new NotImplementedException();
        }

        ///<summary>
        ///Integer percent formatting.
        ///</summary>
        public string IntToString_Percent<T> (T value, IFormatProvider provider)
            where T: IntegerConstraint                                    
        {
            throw new NotImplementedException();
        }

        ///<summary>
        ///Integer hexadecimal formatting.
        ///</summary>
        public string IntToString_Hexadecimal<T> (T value, IFormatProvider provider, bool upper)
            where T: IntegerConstraint                                    
        {
            // Allocate a buffer for the digits.
            ReverseStringBuilder builder = new ReverseStringBuilder(16);

            // ulong is the biggest integer.
            ulong rem = (ulong)value;

            // Prepend digit by digit.
            do
            {
                // Extract the digit.
                int digit = (int) (rem & 0xF);
                if(digit < 10)
                    builder.Prepend((char)('0' + digit));
                else if(upper)
                    builder.Prepend((char)('A' + digit - 10));
                else //if(!upper)
                    builder.Prepend((char)('a' + digit - 10));

                // Process the next digit.
                rem >>= 4;
            } while(rem != 0);

            // Return the string.
            return builder.ToString();
        }
        
        ///<summary>
        ///Integer formatting
        ///</summary>
        public string IntToString<T> (T value, string format,
                                    IFormatProvider provider)
            where T: IntegerConstraint                                    
        {
            // The general format can get the format provider by itself..
            if(format == null || format == "G" || format == "g")
                return IntToString_General<T> (value, provider);

            // Get the number format info.
            NumberFormatInfo nfi = null;
            if(provider != null)
                nfi = provider.GetFormat(typeof(NumberFormatInfo)) as NumberFormatInfo;
            if(nfi == null)
                nfi = NumberFormatInfo.CurrentInfo;

            // Format strings only contains one character.
            if(format.Length != 1)
                throw new FormatException();
                
            // Select the correct format.
            char formatId = format[0];
            switch(format[0])
            {
            case 'C':
            case 'c':
                // Currency.
                return IntToString_Currency<T> (value, nfi);
            case 'D':
            case 'd':
                // Decimal.
                return IntToString_Decimal<T> (value, nfi);
            case 'E':
            case 'e':
                // Exponential notation.
                return IntToString_Exponential<T> (value, nfi);
            case 'F':
            case 'f':
                // Fixed point.
                return IntToString_FixedPoint<T> (value, nfi);
            case 'N':
            case 'n':
                // Number format.
                return IntToString_Number<T> (value, nfi);
            case 'P':
            case 'p':
                // Percent format.
                return IntToString_Percent<T> (value, nfi);
            case 'X':
            case 'x':
                // Hexadecimal format.
                return IntToString_Hexadecimal<T> (value, nfi, formatId == 'X');
            default:
                throw new FormatException();
            }            
        }
        
        private bool StringContains(string s, int index, string sub)
        {
            // Return false if the substring is null.
            if(sub == null || sub.Length == 0)
                return false;
                
            // Make sure the lengths allow finding a substring.
            if(s.Length - index < sub.Length)
                return false;
                
            // Check each character of the sub string.
            for(int i = 0; i < sub.Length; ++i)
            {
                if(s[i+index] != sub[i])
                    return false;
            }
            
            // Nothing is different.
            return true;
        }
        
        ///<summary>
        ///Exponential base-10
        ///</summary>
        private T Exp10<T> (int exp)
            where T: IntegerConstraint
        {
            T result = (T)1;
            while(exp > 0)
            {
                result *= (T)10;
                --exp;
            }
            return result;            
        }

        ///<summary>
        ///Multiply a value by a power of 10 
        ///</summary>
        private T MulP10<T> (T value, int exp)
            where T: IntegerConstraint
        {
            T power = Exp10<T> (exp);
            if(exp >= 0)
                return value * power;
            else
                return value / power;
        }
        
        enum NumberPartState
        {
            Whole = 0,
            Fractional,
            ExponentStart,
            Exponent,
        };
        
        ///<summary>
        ///Integer parsing
        ///</summary>
        public bool TryParse_Integer<T> (string s, NumberStyles styles, IFormatProvider provider, out T result)
            where T: IntegerConstraint
        {
            // Get the number format info.
            NumberFormatInfo nfi = null;
            if(provider != null)
                nfi = provider.GetFormat(typeof(NumberFormatInfo)) as NumberFormatInfo;
            if(nfi == null)
                nfi = NumberFormatInfo.CurrentInfo;
                
            // Initialize the result.
            result = default(T);
            
            // Parsing state.
            bool negative = false;
            bool blank = true;
            
            // Ignore leading white.
            int length = s.Length;
            int pos = 0;
            if((styles & NumberStyles.AllowLeadingWhite) != NumberStyles.None)
            {
                while(pos < length && Char.IsWhiteSpace(s[pos]))
                    ++pos;
            }
            
            // Match a parentheses.
            bool startParent = false;
            bool allowParent = (styles & NumberStyles.AllowParentheses) != NumberStyles.None;
            if(pos < length && allowParent && s[pos] == '(')
            {
                startParent = true;
                ++pos;
            }
            
            // Match a sign.
            if((styles & NumberStyles.AllowLeadingSign) != NumberStyles.None)
            {
                // Check positive and negative sign.
                if(StringContains(s, pos, nfi.PositiveSign))
                {
                    // Just increase the position.
                    pos += nfi.PositiveSign.Length;
                }
                else if(StringContains(s, pos, nfi.NegativeSign))
                {
                    negative = true;
                    pos += nfi.NegativeSign.Length;
                }
            }
            
            // Match other parentheses.
            if(pos < length && allowParent && s[pos] == '(' && !startParent)
            {
                startParent = true;
                ++pos;
            }
            
            // Parse the currency symbol.
            bool isCurrency = (styles & NumberStyles.AllowCurrencySymbol) != NumberStyles.None;
            if(isCurrency)
            {
                if(StringContains(s, pos, nfi.CurrencySymbol))
                    pos += nfi.CurrencySymbol.Length;
            }
            
            // Parse hexadecimal numbers
            if((styles & NumberStyles.AllowHexSpecifier) != NumberStyles.None)
            {
                for(; pos < length; ++pos)
                {
                    char c = s[pos];
                    int digit;
                    if(Char.IsDigit(c))
                    {
                        digit = c - '0';
                    }
                    else if(c >= 'a' && c <= 'f')
                    {
                        digit = c - 'a' + 10;
                    }
                    else if(c >= 'A' && c <= 'F')
                    {
                        digit = c - 'A' + 10;
                    }
                    else
                    {
                        // Finish number parsing.
                        break;
                    }
                    
                    // Append the digit.
                    result = result*(T)16 + (T)digit;
                    blank = false;
                }
            }
            else // Parse decimal numbers.
            {
                // Read the group.
                string groupSep = null;
                if((styles & NumberStyles.AllowThousands) != NumberStyles.None)
                {
                    if(isCurrency)
                        groupSep = nfi.CurrencyGroupSeparator;
                    else
                        groupSep = nfi.NumberGroupSeparator;
                }
                
                // Read the decimal separator.
                string decimalSep = null;
                int usedDecimals = 0;
                if((styles & NumberStyles.AllowDecimalPoint) != NumberStyles.None)
                {
                    if(isCurrency)
                    {
                        decimalSep = nfi.CurrencyDecimalSeparator;
                        usedDecimals = nfi.CurrencyDecimalDigits;
                    }
                    else
                    {
                        decimalSep = nfi.NumberDecimalSeparator;
                        usedDecimals = nfi.NumberDecimalDigits;
                    }
                }

                // Initialize the number reader
                T wholePart = default(T);
                T fractionalPart = default(T);
                int wholePartSize = 0;
                int fractionalPartSize = 0;
                int exponent = 0;
                bool negativeExponent = false;
                NumberPartState currentPart = NumberPartState.Whole;
                                
                // Parse a plain old integer.
                for(; pos < length; ++pos)
                {
                    char c = s[pos];
                    int digit;
                    if(Char.IsDigit(c))
                    {
                        blank = false;
                        digit = c - '0';
                    }
                    else if((currentPart == NumberPartState.Whole ||
                            currentPart == NumberPartState.Fractional) &&
                            (c == 'e' || c == 'E'))
                    {
                        // Begin the exponential part.
                        currentPart = NumberPartState.ExponentStart;
                    }
                    else if(currentPart == NumberPartState.ExponentStart &&
                            StringContains(s, pos, nfi.PositiveSign))
                    {
                        // Positive exponent.
                        currentPart = NumberPartState.Exponent;
                        pos += nfi.PositiveSign.Length - 1;
                    }
                    else if(currentPart == NumberPartState.ExponentStart &&
                            StringContains(s, pos, nfi.NegativeSign))
                    {
                        // Negative exponent.
                        negativeExponent = true;
                        currentPart = NumberPartState.Exponent;
                        pos += nfi.NegativeSign.Length - 1;
                    }
                    else if(currentPart == NumberPartState.Whole &&
                            StringContains(s, pos, groupSep))
                    {
                        // Ignore the thousands sep.
                        // TODO: Enforce group sizes.
                        continue;
                    }
                    else if(currentPart == NumberPartState.Whole &&
                            StringContains(s, pos, decimalSep))
                    {
                        currentPart = NumberPartState.Fractional;
                        continue;
                    }
                    else
                    {
                        // Finish number parsing.
                        break;
                    }
                    
                    // Append the digit.
                    switch(currentPart)
                    {
                    case NumberPartState.Whole:
                        wholePart = wholePart*(T)10 + (T)digit;
                        ++wholePartSize;
                        break;
                    case NumberPartState.Fractional:
                        fractionalPart = fractionalPart*(T)10 + (T)digit;
                        ++fractionalPartSize;
                        break;
                    case NumberPartState.ExponentStart:
                    case NumberPartState.Exponent:
                        exponent = exponent*10 + digit;
                        break;
                    }
                }
                
                // Pull together the result
                result = MulP10<T> (wholePart, exponent + usedDecimals)
                        + MulP10<T> (fractionalPart, exponent - fractionalPartSize);
            }
            
            // Parse another currency symbol.
            if((styles & NumberStyles.AllowCurrencySymbol) != NumberStyles.None)
            {
                if(StringContains(s, pos, nfi.CurrencySymbol))
                    pos += nfi.CurrencySymbol.Length;
            }
            
            // Parse the end parent.
            if(pos < length && startParent && s[pos] == ')')
            {
                startParent = false;
                ++pos;
            }
            
            // Parse the trailing sign.
            if((styles & NumberStyles.AllowTrailingSign) != NumberStyles.None)
            {
                // Check positive and negative sign..
                if(StringContains(s, pos, nfi.PositiveSign))
                {
                    // Just increase the position.
                    pos += nfi.PositiveSign.Length;
                }
                else if(StringContains(s, pos, nfi.NegativeSign))
                {
                    negative = true;
                    pos += nfi.NegativeSign.Length;
                }
            }

            // Parse the end parent.
            if(pos < length && startParent && s[pos] == ')')
            {
                startParent = false;
                ++pos;
            }
            
            // Parse the trailing white.
            if((styles & NumberStyles.AllowTrailingWhite) != NumberStyles.None)
            {
                while(pos < length && Char.IsWhiteSpace(s[pos]))
                    ++pos;
            }
            
            // Apply the negative sign.
            if(negative)
                result = -result;
            
            // If the parsing was sucessful, the position must be in the end.
            return !blank && pos == s.Length;
        }
    }
}


#region License
//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2009 the Open Toolkit library.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to 
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//
#endregion

namespace Chela.Graphics.GL2
{
    using Chela.Lang;
    using Chela.Text;
    using Chela.Runtime.InteropServices;
    #pragma warning disable 3019
    #pragma warning disable 1591
    #pragma warning disable 1572
    #pragma warning disable 1573

    public partial class GL
    {

        public static partial class GL_3dfx
        {
            public static 
            void TbufferMask(Int32 mask)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTbufferMask3DFX((UInt32)mask);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TbufferMask(UInt32 mask)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTbufferMask3DFX((UInt32)mask);
                }
                #if DEBUG
                }
                #endif
            }

        }

        public static partial class Amd
        {
            public static 
            void BeginPerfMonitor(Int32 monitor)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBeginPerfMonitorAMD((UInt32)monitor);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BeginPerfMonitor(UInt32 monitor)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBeginPerfMonitorAMD((UInt32)monitor);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BlendEquationIndexed(Int32 buf, Chela.Graphics.GL2.AmdDrawBuffersBlend mode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBlendEquationIndexedAMD((UInt32)buf, (Chela.Graphics.GL2.AmdDrawBuffersBlend)mode);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BlendEquationIndexed(UInt32 buf, Chela.Graphics.GL2.AmdDrawBuffersBlend mode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBlendEquationIndexedAMD((UInt32)buf, (Chela.Graphics.GL2.AmdDrawBuffersBlend)mode);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BlendEquationSeparateIndexed(Int32 buf, Chela.Graphics.GL2.AmdDrawBuffersBlend modeRGB, Chela.Graphics.GL2.AmdDrawBuffersBlend modeAlpha)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBlendEquationSeparateIndexedAMD((UInt32)buf, (Chela.Graphics.GL2.AmdDrawBuffersBlend)modeRGB, (Chela.Graphics.GL2.AmdDrawBuffersBlend)modeAlpha);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BlendEquationSeparateIndexed(UInt32 buf, Chela.Graphics.GL2.AmdDrawBuffersBlend modeRGB, Chela.Graphics.GL2.AmdDrawBuffersBlend modeAlpha)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBlendEquationSeparateIndexedAMD((UInt32)buf, (Chela.Graphics.GL2.AmdDrawBuffersBlend)modeRGB, (Chela.Graphics.GL2.AmdDrawBuffersBlend)modeAlpha);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BlendFuncIndexed(Int32 buf, Chela.Graphics.GL2.AmdDrawBuffersBlend src, Chela.Graphics.GL2.AmdDrawBuffersBlend dst)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBlendFuncIndexedAMD((UInt32)buf, (Chela.Graphics.GL2.AmdDrawBuffersBlend)src, (Chela.Graphics.GL2.AmdDrawBuffersBlend)dst);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BlendFuncIndexed(UInt32 buf, Chela.Graphics.GL2.AmdDrawBuffersBlend src, Chela.Graphics.GL2.AmdDrawBuffersBlend dst)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBlendFuncIndexedAMD((UInt32)buf, (Chela.Graphics.GL2.AmdDrawBuffersBlend)src, (Chela.Graphics.GL2.AmdDrawBuffersBlend)dst);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BlendFuncSeparateIndexed(Int32 buf, Chela.Graphics.GL2.AmdDrawBuffersBlend srcRGB, Chela.Graphics.GL2.AmdDrawBuffersBlend dstRGB, Chela.Graphics.GL2.AmdDrawBuffersBlend srcAlpha, Chela.Graphics.GL2.AmdDrawBuffersBlend dstAlpha)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBlendFuncSeparateIndexedAMD((UInt32)buf, (Chela.Graphics.GL2.AmdDrawBuffersBlend)srcRGB, (Chela.Graphics.GL2.AmdDrawBuffersBlend)dstRGB, (Chela.Graphics.GL2.AmdDrawBuffersBlend)srcAlpha, (Chela.Graphics.GL2.AmdDrawBuffersBlend)dstAlpha);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BlendFuncSeparateIndexed(UInt32 buf, Chela.Graphics.GL2.AmdDrawBuffersBlend srcRGB, Chela.Graphics.GL2.AmdDrawBuffersBlend dstRGB, Chela.Graphics.GL2.AmdDrawBuffersBlend srcAlpha, Chela.Graphics.GL2.AmdDrawBuffersBlend dstAlpha)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBlendFuncSeparateIndexedAMD((UInt32)buf, (Chela.Graphics.GL2.AmdDrawBuffersBlend)srcRGB, (Chela.Graphics.GL2.AmdDrawBuffersBlend)dstRGB, (Chela.Graphics.GL2.AmdDrawBuffersBlend)srcAlpha, (Chela.Graphics.GL2.AmdDrawBuffersBlend)dstAlpha);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeletePerfMonitors(Int32 n, Int32[] monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* monitors_ptr = monitors)
                    {
                        Delegates.glDeletePerfMonitorsAMD((Int32)n, (UInt32*)monitors_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeletePerfMonitors(Int32 n, out Int32 monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* monitors_ptr = &monitors)
                    {
                        Delegates.glDeletePerfMonitorsAMD((Int32)n, (UInt32*)monitors_ptr);
                        monitors = *monitors_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeletePerfMonitors(Int32 n, Int32* monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeletePerfMonitorsAMD((Int32)n, (UInt32*)monitors);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeletePerfMonitors(Int32 n, UInt32[] monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* monitors_ptr = monitors)
                    {
                        Delegates.glDeletePerfMonitorsAMD((Int32)n, (UInt32*)monitors_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeletePerfMonitors(Int32 n, out UInt32 monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* monitors_ptr = &monitors)
                    {
                        Delegates.glDeletePerfMonitorsAMD((Int32)n, (UInt32*)monitors_ptr);
                        monitors = *monitors_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeletePerfMonitors(Int32 n, UInt32* monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeletePerfMonitorsAMD((Int32)n, (UInt32*)monitors);
                #if DEBUG
                }
                #endif
            }

            public static 
            void EndPerfMonitor(Int32 monitor)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEndPerfMonitorAMD((UInt32)monitor);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EndPerfMonitor(UInt32 monitor)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEndPerfMonitorAMD((UInt32)monitor);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenPerfMonitors(Int32 n, Int32[] monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* monitors_ptr = monitors)
                    {
                        Delegates.glGenPerfMonitorsAMD((Int32)n, (UInt32*)monitors_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenPerfMonitors(Int32 n, out Int32 monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* monitors_ptr = &monitors)
                    {
                        Delegates.glGenPerfMonitorsAMD((Int32)n, (UInt32*)monitors_ptr);
                        monitors = *monitors_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenPerfMonitors(Int32 n, Int32* monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenPerfMonitorsAMD((Int32)n, (UInt32*)monitors);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenPerfMonitors(Int32 n, UInt32[] monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* monitors_ptr = monitors)
                    {
                        Delegates.glGenPerfMonitorsAMD((Int32)n, (UInt32*)monitors_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenPerfMonitors(Int32 n, out UInt32 monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* monitors_ptr = &monitors)
                    {
                        Delegates.glGenPerfMonitorsAMD((Int32)n, (UInt32*)monitors_ptr);
                        monitors = *monitors_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenPerfMonitors(Int32 n, UInt32* monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenPerfMonitorsAMD((Int32)n, (UInt32*)monitors);
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorCounterData(Int32 monitor, Chela.Graphics.GL2.AmdPerformanceMonitor pname, Int32 dataSize, Int32[] data, Int32* bytesWritten)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Int32* data_ptr = data)
                {
                    Delegates.glGetPerfMonitorCounterDataAMD((UInt32)monitor, (Chela.Graphics.GL2.AmdPerformanceMonitor)pname, (Int32)dataSize, (UInt32*)data_ptr, (Int32*)bytesWritten);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterData(Int32 monitor, Chela.Graphics.GL2.AmdPerformanceMonitor pname, Int32 dataSize, out Int32 data, out Int32 bytesWritten)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    fixed (Int32* bytesWritten_ptr = &bytesWritten)
                    {
                        Delegates.glGetPerfMonitorCounterDataAMD((UInt32)monitor, (Chela.Graphics.GL2.AmdPerformanceMonitor)pname, (Int32)dataSize, (UInt32*)data_ptr, (Int32*)bytesWritten_ptr);
                        data = *data_ptr;
                        bytesWritten = *bytesWritten_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorCounterData(Int32 monitor, Chela.Graphics.GL2.AmdPerformanceMonitor pname, Int32 dataSize, Int32* data, Int32* bytesWritten)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetPerfMonitorCounterDataAMD((UInt32)monitor, (Chela.Graphics.GL2.AmdPerformanceMonitor)pname, (Int32)dataSize, (UInt32*)data, (Int32*)bytesWritten);
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorCounterData(UInt32 monitor, Chela.Graphics.GL2.AmdPerformanceMonitor pname, Int32 dataSize, UInt32[] data, Int32* bytesWritten)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (UInt32* data_ptr = data)
                {
                    Delegates.glGetPerfMonitorCounterDataAMD((UInt32)monitor, (Chela.Graphics.GL2.AmdPerformanceMonitor)pname, (Int32)dataSize, (UInt32*)data_ptr, (Int32*)bytesWritten);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterData(UInt32 monitor, Chela.Graphics.GL2.AmdPerformanceMonitor pname, Int32 dataSize, out UInt32 data, out Int32 bytesWritten)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* data_ptr = &data)
                    fixed (Int32* bytesWritten_ptr = &bytesWritten)
                    {
                        Delegates.glGetPerfMonitorCounterDataAMD((UInt32)monitor, (Chela.Graphics.GL2.AmdPerformanceMonitor)pname, (Int32)dataSize, (UInt32*)data_ptr, (Int32*)bytesWritten_ptr);
                        data = *data_ptr;
                        bytesWritten = *bytesWritten_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorCounterData(UInt32 monitor, Chela.Graphics.GL2.AmdPerformanceMonitor pname, Int32 dataSize, UInt32* data, Int32* bytesWritten)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetPerfMonitorCounterDataAMD((UInt32)monitor, (Chela.Graphics.GL2.AmdPerformanceMonitor)pname, (Int32)dataSize, (UInt32*)data, (Int32*)bytesWritten);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterInfo(Int32 group, Int32 counter, Chela.Graphics.GL2.AmdPerformanceMonitor pname, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetPerfMonitorCounterInfoAMD((UInt32)group, (UInt32)counter, (Chela.Graphics.GL2.AmdPerformanceMonitor)pname, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterInfo<T3>(Int32 group, Int32 counter, Chela.Graphics.GL2.AmdPerformanceMonitor pname, T3[] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPerfMonitorCounterInfoAMD((UInt32)group, (UInt32)counter, (Chela.Graphics.GL2.AmdPerformanceMonitor)pname, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterInfo<T3>(Int32 group, Int32 counter, Chela.Graphics.GL2.AmdPerformanceMonitor pname, T3[,] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPerfMonitorCounterInfoAMD((UInt32)group, (UInt32)counter, (Chela.Graphics.GL2.AmdPerformanceMonitor)pname, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterInfo<T3>(Int32 group, Int32 counter, Chela.Graphics.GL2.AmdPerformanceMonitor pname, T3[,,] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPerfMonitorCounterInfoAMD((UInt32)group, (UInt32)counter, (Chela.Graphics.GL2.AmdPerformanceMonitor)pname, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterInfo<T3>(Int32 group, Int32 counter, Chela.Graphics.GL2.AmdPerformanceMonitor pname, ref T3 data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPerfMonitorCounterInfoAMD((UInt32)group, (UInt32)counter, (Chela.Graphics.GL2.AmdPerformanceMonitor)pname, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T3)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterInfo(UInt32 group, UInt32 counter, Chela.Graphics.GL2.AmdPerformanceMonitor pname, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetPerfMonitorCounterInfoAMD((UInt32)group, (UInt32)counter, (Chela.Graphics.GL2.AmdPerformanceMonitor)pname, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterInfo<T3>(UInt32 group, UInt32 counter, Chela.Graphics.GL2.AmdPerformanceMonitor pname, T3[] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPerfMonitorCounterInfoAMD((UInt32)group, (UInt32)counter, (Chela.Graphics.GL2.AmdPerformanceMonitor)pname, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterInfo<T3>(UInt32 group, UInt32 counter, Chela.Graphics.GL2.AmdPerformanceMonitor pname, T3[,] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPerfMonitorCounterInfoAMD((UInt32)group, (UInt32)counter, (Chela.Graphics.GL2.AmdPerformanceMonitor)pname, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterInfo<T3>(UInt32 group, UInt32 counter, Chela.Graphics.GL2.AmdPerformanceMonitor pname, T3[,,] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPerfMonitorCounterInfoAMD((UInt32)group, (UInt32)counter, (Chela.Graphics.GL2.AmdPerformanceMonitor)pname, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterInfo<T3>(UInt32 group, UInt32 counter, Chela.Graphics.GL2.AmdPerformanceMonitor pname, ref T3 data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPerfMonitorCounterInfoAMD((UInt32)group, (UInt32)counter, (Chela.Graphics.GL2.AmdPerformanceMonitor)pname, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T3)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounters(Int32 group, out Int32 numCounters, out Int32 maxActiveCounters, Int32 counterSize, out Int32 counters)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* numCounters_ptr = &numCounters)
                    fixed (Int32* maxActiveCounters_ptr = &maxActiveCounters)
                    fixed (Int32* counters_ptr = &counters)
                    {
                        Delegates.glGetPerfMonitorCountersAMD((UInt32)group, (Int32*)numCounters_ptr, (Int32*)maxActiveCounters_ptr, (Int32)counterSize, (UInt32*)counters_ptr);
                        numCounters = *numCounters_ptr;
                        maxActiveCounters = *maxActiveCounters_ptr;
                        counters = *counters_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorCounters(Int32 group, Int32* numCounters, Int32* maxActiveCounters, Int32 counterSize, Int32[] counters)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Int32* counters_ptr = counters)
                {
                    Delegates.glGetPerfMonitorCountersAMD((UInt32)group, (Int32*)numCounters, (Int32*)maxActiveCounters, (Int32)counterSize, (UInt32*)counters_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorCounters(Int32 group, Int32* numCounters, Int32* maxActiveCounters, Int32 counterSize, Int32* counters)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetPerfMonitorCountersAMD((UInt32)group, (Int32*)numCounters, (Int32*)maxActiveCounters, (Int32)counterSize, (UInt32*)counters);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounters(UInt32 group, out Int32 numCounters, out Int32 maxActiveCounters, Int32 counterSize, out UInt32 counters)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* numCounters_ptr = &numCounters)
                    fixed (Int32* maxActiveCounters_ptr = &maxActiveCounters)
                    fixed (UInt32* counters_ptr = &counters)
                    {
                        Delegates.glGetPerfMonitorCountersAMD((UInt32)group, (Int32*)numCounters_ptr, (Int32*)maxActiveCounters_ptr, (Int32)counterSize, (UInt32*)counters_ptr);
                        numCounters = *numCounters_ptr;
                        maxActiveCounters = *maxActiveCounters_ptr;
                        counters = *counters_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorCounters(UInt32 group, Int32* numCounters, Int32* maxActiveCounters, Int32 counterSize, UInt32[] counters)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (UInt32* counters_ptr = counters)
                {
                    Delegates.glGetPerfMonitorCountersAMD((UInt32)group, (Int32*)numCounters, (Int32*)maxActiveCounters, (Int32)counterSize, (UInt32*)counters_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorCounters(UInt32 group, Int32* numCounters, Int32* maxActiveCounters, Int32 counterSize, UInt32* counters)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetPerfMonitorCountersAMD((UInt32)group, (Int32*)numCounters, (Int32*)maxActiveCounters, (Int32)counterSize, (UInt32*)counters);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterString(Int32 group, Int32 counter, Int32 bufSize, out Int32 length, StringBuilder counterString)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        StringHandle counterString_ptr = StringHandle.Alloc(counterString);
                        try
                        {
                            Delegates.glGetPerfMonitorCounterStringAMD((UInt32)group, (UInt32)counter, (Int32)bufSize, (Int32*)length_ptr, counterString_ptr.Address);
                            length = *length_ptr;
                        }
                        finally
                        {
                            counterString_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorCounterString(Int32 group, Int32 counter, Int32 bufSize, Int32* length, StringBuilder counterString)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                StringHandle counterString_ptr = StringHandle.Alloc(counterString);
                try
                {
                    Delegates.glGetPerfMonitorCounterStringAMD((UInt32)group, (UInt32)counter, (Int32)bufSize, (Int32*)length, counterString_ptr.Address);
                }
                finally
                {
                    counterString_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterString(UInt32 group, UInt32 counter, Int32 bufSize, out Int32 length, StringBuilder counterString)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        StringHandle counterString_ptr = StringHandle.Alloc(counterString);
                        try
                        {
                            Delegates.glGetPerfMonitorCounterStringAMD((UInt32)group, (UInt32)counter, (Int32)bufSize, (Int32*)length_ptr, counterString_ptr.Address);
                            length = *length_ptr;
                        }
                        finally
                        {
                            counterString_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorCounterString(UInt32 group, UInt32 counter, Int32 bufSize, Int32* length, StringBuilder counterString)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                StringHandle counterString_ptr = StringHandle.Alloc(counterString);
                try
                {
                    Delegates.glGetPerfMonitorCounterStringAMD((UInt32)group, (UInt32)counter, (Int32)bufSize, (Int32*)length, counterString_ptr.Address);
                }
                finally
                {
                    counterString_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorGroup(out Int32 numGroups, Int32 groupsSize, out Int32 groups)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* numGroups_ptr = &numGroups)
                    fixed (Int32* groups_ptr = &groups)
                    {
                        Delegates.glGetPerfMonitorGroupsAMD((Int32*)numGroups_ptr, (Int32)groupsSize, (UInt32*)groups_ptr);
                        numGroups = *numGroups_ptr;
                        groups = *groups_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorGroup(out Int32 numGroups, Int32 groupsSize, out UInt32 groups)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* numGroups_ptr = &numGroups)
                    fixed (UInt32* groups_ptr = &groups)
                    {
                        Delegates.glGetPerfMonitorGroupsAMD((Int32*)numGroups_ptr, (Int32)groupsSize, (UInt32*)groups_ptr);
                        numGroups = *numGroups_ptr;
                        groups = *groups_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorGroup(Int32* numGroups, Int32 groupsSize, Int32[] groups)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Int32* groups_ptr = groups)
                {
                    Delegates.glGetPerfMonitorGroupsAMD((Int32*)numGroups, (Int32)groupsSize, (UInt32*)groups_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorGroup(Int32* numGroups, Int32 groupsSize, Int32* groups)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetPerfMonitorGroupsAMD((Int32*)numGroups, (Int32)groupsSize, (UInt32*)groups);
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorGroup(Int32* numGroups, Int32 groupsSize, UInt32[] groups)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (UInt32* groups_ptr = groups)
                {
                    Delegates.glGetPerfMonitorGroupsAMD((Int32*)numGroups, (Int32)groupsSize, (UInt32*)groups_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorGroup(Int32* numGroups, Int32 groupsSize, UInt32* groups)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetPerfMonitorGroupsAMD((Int32*)numGroups, (Int32)groupsSize, (UInt32*)groups);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorGroupString(Int32 group, Int32 bufSize, out Int32 length, StringBuilder groupString)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        StringHandle groupString_ptr = StringHandle.Alloc(groupString);
                        try
                        {
                            Delegates.glGetPerfMonitorGroupStringAMD((UInt32)group, (Int32)bufSize, (Int32*)length_ptr, groupString_ptr.Address);
                            length = *length_ptr;
                        }
                        finally
                        {
                            groupString_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorGroupString(Int32 group, Int32 bufSize, Int32* length, StringBuilder groupString)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                StringHandle groupString_ptr = StringHandle.Alloc(groupString);
                try
                {
                    Delegates.glGetPerfMonitorGroupStringAMD((UInt32)group, (Int32)bufSize, (Int32*)length, groupString_ptr.Address);
                }
                finally
                {
                    groupString_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorGroupString(UInt32 group, Int32 bufSize, out Int32 length, StringBuilder groupString)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        StringHandle groupString_ptr = StringHandle.Alloc(groupString);
                        try
                        {
                            Delegates.glGetPerfMonitorGroupStringAMD((UInt32)group, (Int32)bufSize, (Int32*)length_ptr, groupString_ptr.Address);
                            length = *length_ptr;
                        }
                        finally
                        {
                            groupString_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorGroupString(UInt32 group, Int32 bufSize, Int32* length, StringBuilder groupString)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                StringHandle groupString_ptr = StringHandle.Alloc(groupString);
                try
                {
                    Delegates.glGetPerfMonitorGroupStringAMD((UInt32)group, (Int32)bufSize, (Int32*)length, groupString_ptr.Address);
                }
                finally
                {
                    groupString_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SelectPerfMonitorCounters(Int32 monitor, bool enable, Int32 group, Int32 numCounters, Int32[] counterList)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* counterList_ptr = counterList)
                    {
                        Delegates.glSelectPerfMonitorCountersAMD((UInt32)monitor, (bool)enable, (UInt32)group, (Int32)numCounters, (UInt32*)counterList_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SelectPerfMonitorCounters(Int32 monitor, bool enable, Int32 group, Int32 numCounters, out Int32 counterList)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* counterList_ptr = &counterList)
                    {
                        Delegates.glSelectPerfMonitorCountersAMD((UInt32)monitor, (bool)enable, (UInt32)group, (Int32)numCounters, (UInt32*)counterList_ptr);
                        counterList = *counterList_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void SelectPerfMonitorCounters(Int32 monitor, bool enable, Int32 group, Int32 numCounters, Int32* counterList)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glSelectPerfMonitorCountersAMD((UInt32)monitor, (bool)enable, (UInt32)group, (Int32)numCounters, (UInt32*)counterList);
                #if DEBUG
                }
                #endif
            }

            public static 
            void SelectPerfMonitorCounters(UInt32 monitor, bool enable, UInt32 group, Int32 numCounters, UInt32[] counterList)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* counterList_ptr = counterList)
                    {
                        Delegates.glSelectPerfMonitorCountersAMD((UInt32)monitor, (bool)enable, (UInt32)group, (Int32)numCounters, (UInt32*)counterList_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SelectPerfMonitorCounters(UInt32 monitor, bool enable, UInt32 group, Int32 numCounters, out UInt32 counterList)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* counterList_ptr = &counterList)
                    {
                        Delegates.glSelectPerfMonitorCountersAMD((UInt32)monitor, (bool)enable, (UInt32)group, (Int32)numCounters, (UInt32*)counterList_ptr);
                        counterList = *counterList_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void SelectPerfMonitorCounters(UInt32 monitor, bool enable, UInt32 group, Int32 numCounters, UInt32* counterList)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glSelectPerfMonitorCountersAMD((UInt32)monitor, (bool)enable, (UInt32)group, (Int32)numCounters, (UInt32*)counterList);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TessellationFactor(Single factor)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTessellationFactorAMD((Single)factor);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TessellationMode(Chela.Graphics.GL2.AmdVertexShaderTesselator mode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTessellationModeAMD((Chela.Graphics.GL2.AmdVertexShaderTesselator)mode);
                }
                #if DEBUG
                }
                #endif
            }

        }

        public static partial class Apple
        {
            public static 
            void BindVertexArray(Int32 array)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindVertexArrayAPPLE((UInt32)array);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindVertexArray(UInt32 array)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindVertexArrayAPPLE((UInt32)array);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BufferParameter(Chela.Graphics.GL2.BufferTarget target, Chela.Graphics.GL2.BufferParameterApple pname, Int32 param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBufferParameteriAPPLE((Chela.Graphics.GL2.BufferTarget)target, (Chela.Graphics.GL2.BufferParameterApple)pname, (Int32)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteFences(Int32 n, Int32[] fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* fences_ptr = fences)
                    {
                        Delegates.glDeleteFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteFences(Int32 n, ref Int32 fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* fences_ptr = &fences)
                    {
                        Delegates.glDeleteFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteFences(Int32 n, Int32* fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteFencesAPPLE((Int32)n, (UInt32*)fences);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteFences(Int32 n, UInt32[] fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* fences_ptr = fences)
                    {
                        Delegates.glDeleteFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteFences(Int32 n, ref UInt32 fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* fences_ptr = &fences)
                    {
                        Delegates.glDeleteFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteFences(Int32 n, UInt32* fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteFencesAPPLE((Int32)n, (UInt32*)fences);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteVertexArrays(Int32 n, Int32[] arrays)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* arrays_ptr = arrays)
                    {
                        Delegates.glDeleteVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteVertexArrays(Int32 n, ref Int32 arrays)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* arrays_ptr = &arrays)
                    {
                        Delegates.glDeleteVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteVertexArrays(Int32 n, Int32* arrays)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteVertexArraysAPPLE((Int32)n, (UInt32*)arrays);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteVertexArrays(Int32 n, UInt32[] arrays)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* arrays_ptr = arrays)
                    {
                        Delegates.glDeleteVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteVertexArrays(Int32 n, ref UInt32 arrays)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* arrays_ptr = &arrays)
                    {
                        Delegates.glDeleteVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteVertexArrays(Int32 n, UInt32* arrays)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteVertexArraysAPPLE((Int32)n, (UInt32*)arrays);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DisableVertexAttrib(Int32 index, Chela.Graphics.GL2.AppleVertexProgramEvaluators pname)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDisableVertexAttribAPPLE((UInt32)index, (Chela.Graphics.GL2.AppleVertexProgramEvaluators)pname);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DisableVertexAttrib(UInt32 index, Chela.Graphics.GL2.AppleVertexProgramEvaluators pname)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDisableVertexAttribAPPLE((UInt32)index, (Chela.Graphics.GL2.AppleVertexProgramEvaluators)pname);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawElementArray(Chela.Graphics.GL2.BeginMode mode, Int32 first, Int32 count)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDrawElementArrayAPPLE((Chela.Graphics.GL2.BeginMode)mode, (Int32)first, (Int32)count);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawRangeElementArray(Chela.Graphics.GL2.BeginMode mode, Int32 start, Int32 end, Int32 first, Int32 count)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDrawRangeElementArrayAPPLE((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)first, (Int32)count);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawRangeElementArray(Chela.Graphics.GL2.BeginMode mode, UInt32 start, UInt32 end, Int32 first, Int32 count)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDrawRangeElementArrayAPPLE((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)first, (Int32)count);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ElementPointer(Chela.Graphics.GL2.AppleElementArray type, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glElementPointerAPPLE((Chela.Graphics.GL2.AppleElementArray)type, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ElementPointer<T1>(Chela.Graphics.GL2.AppleElementArray type, T1[] pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glElementPointerAPPLE((Chela.Graphics.GL2.AppleElementArray)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ElementPointer<T1>(Chela.Graphics.GL2.AppleElementArray type, T1[,] pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glElementPointerAPPLE((Chela.Graphics.GL2.AppleElementArray)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ElementPointer<T1>(Chela.Graphics.GL2.AppleElementArray type, T1[,,] pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glElementPointerAPPLE((Chela.Graphics.GL2.AppleElementArray)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ElementPointer<T1>(Chela.Graphics.GL2.AppleElementArray type, ref T1 pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glElementPointerAPPLE((Chela.Graphics.GL2.AppleElementArray)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T1)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EnableVertexAttrib(Int32 index, Chela.Graphics.GL2.AppleVertexProgramEvaluators pname)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEnableVertexAttribAPPLE((UInt32)index, (Chela.Graphics.GL2.AppleVertexProgramEvaluators)pname);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EnableVertexAttrib(UInt32 index, Chela.Graphics.GL2.AppleVertexProgramEvaluators pname)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEnableVertexAttribAPPLE((UInt32)index, (Chela.Graphics.GL2.AppleVertexProgramEvaluators)pname);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FinishFence(Int32 fence)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFinishFenceAPPLE((UInt32)fence);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FinishFence(UInt32 fence)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFinishFenceAPPLE((UInt32)fence);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FinishObject(Chela.Graphics.GL2.AppleFence @object, Int32 name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFinishObjectAPPLE((Chela.Graphics.GL2.AppleFence)@object, (Int32)name);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FlushMappedBufferRange(Chela.Graphics.GL2.BufferTarget target, IntPtr offset, IntPtr size)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFlushMappedBufferRangeAPPLE((Chela.Graphics.GL2.BufferTarget)target, (IntPtr)offset, (IntPtr)size);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FlushVertexArrayRange(Int32 length, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFlushVertexArrayRangeAPPLE((Int32)length, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FlushVertexArrayRange<T1>(Int32 length, T1[] pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glFlushVertexArrayRangeAPPLE((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FlushVertexArrayRange<T1>(Int32 length, T1[,] pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glFlushVertexArrayRangeAPPLE((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FlushVertexArrayRange<T1>(Int32 length, T1[,,] pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glFlushVertexArrayRangeAPPLE((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FlushVertexArrayRange<T1>(Int32 length, ref T1 pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glFlushVertexArrayRangeAPPLE((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T1)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenFences(Int32 n, Int32[] fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* fences_ptr = fences)
                    {
                        Delegates.glGenFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenFences(Int32 n, out Int32 fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* fences_ptr = &fences)
                    {
                        Delegates.glGenFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                        fences = *fences_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenFences(Int32 n, Int32* fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenFencesAPPLE((Int32)n, (UInt32*)fences);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenFences(Int32 n, UInt32[] fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* fences_ptr = fences)
                    {
                        Delegates.glGenFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenFences(Int32 n, out UInt32 fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* fences_ptr = &fences)
                    {
                        Delegates.glGenFencesAPPLE((Int32)n, (UInt32*)fences_ptr);
                        fences = *fences_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenFences(Int32 n, UInt32* fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenFencesAPPLE((Int32)n, (UInt32*)fences);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenVertexArrays(Int32 n, Int32[] arrays)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* arrays_ptr = arrays)
                    {
                        Delegates.glGenVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenVertexArrays(Int32 n, out Int32 arrays)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* arrays_ptr = &arrays)
                    {
                        Delegates.glGenVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                        arrays = *arrays_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenVertexArrays(Int32 n, Int32* arrays)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenVertexArraysAPPLE((Int32)n, (UInt32*)arrays);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenVertexArrays(Int32 n, UInt32[] arrays)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* arrays_ptr = arrays)
                    {
                        Delegates.glGenVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenVertexArrays(Int32 n, out UInt32 arrays)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* arrays_ptr = &arrays)
                    {
                        Delegates.glGenVertexArraysAPPLE((Int32)n, (UInt32*)arrays_ptr);
                        arrays = *arrays_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenVertexArrays(Int32 n, UInt32* arrays)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenVertexArraysAPPLE((Int32)n, (UInt32*)arrays);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetObjectParameter(Chela.Graphics.GL2.AppleObjectPurgeable objectType, Int32 name, Chela.Graphics.GL2.AppleObjectPurgeable pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetObjectParameterivAPPLE((Chela.Graphics.GL2.AppleObjectPurgeable)objectType, (UInt32)name, (Chela.Graphics.GL2.AppleObjectPurgeable)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetObjectParameter(Chela.Graphics.GL2.AppleObjectPurgeable objectType, Int32 name, Chela.Graphics.GL2.AppleObjectPurgeable pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectParameterivAPPLE((Chela.Graphics.GL2.AppleObjectPurgeable)objectType, (UInt32)name, (Chela.Graphics.GL2.AppleObjectPurgeable)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetObjectParameter(Chela.Graphics.GL2.AppleObjectPurgeable objectType, Int32 name, Chela.Graphics.GL2.AppleObjectPurgeable pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetObjectParameterivAPPLE((Chela.Graphics.GL2.AppleObjectPurgeable)objectType, (UInt32)name, (Chela.Graphics.GL2.AppleObjectPurgeable)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetObjectParameter(Chela.Graphics.GL2.AppleObjectPurgeable objectType, UInt32 name, Chela.Graphics.GL2.AppleObjectPurgeable pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetObjectParameterivAPPLE((Chela.Graphics.GL2.AppleObjectPurgeable)objectType, (UInt32)name, (Chela.Graphics.GL2.AppleObjectPurgeable)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetObjectParameter(Chela.Graphics.GL2.AppleObjectPurgeable objectType, UInt32 name, Chela.Graphics.GL2.AppleObjectPurgeable pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectParameterivAPPLE((Chela.Graphics.GL2.AppleObjectPurgeable)objectType, (UInt32)name, (Chela.Graphics.GL2.AppleObjectPurgeable)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetObjectParameter(Chela.Graphics.GL2.AppleObjectPurgeable objectType, UInt32 name, Chela.Graphics.GL2.AppleObjectPurgeable pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetObjectParameterivAPPLE((Chela.Graphics.GL2.AppleObjectPurgeable)objectType, (UInt32)name, (Chela.Graphics.GL2.AppleObjectPurgeable)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTexParameterPointer(Chela.Graphics.GL2.AppleTextureRange target, Chela.Graphics.GL2.AppleTextureRange pname, IntPtr @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetTexParameterPointervAPPLE((Chela.Graphics.GL2.AppleTextureRange)target, (Chela.Graphics.GL2.AppleTextureRange)pname, (IntPtr)@params);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTexParameterPointer<T2>(Chela.Graphics.GL2.AppleTextureRange target, Chela.Graphics.GL2.AppleTextureRange pname, T2[] @params)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetTexParameterPointervAPPLE((Chela.Graphics.GL2.AppleTextureRange)target, (Chela.Graphics.GL2.AppleTextureRange)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTexParameterPointer<T2>(Chela.Graphics.GL2.AppleTextureRange target, Chela.Graphics.GL2.AppleTextureRange pname, T2[,] @params)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetTexParameterPointervAPPLE((Chela.Graphics.GL2.AppleTextureRange)target, (Chela.Graphics.GL2.AppleTextureRange)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTexParameterPointer<T2>(Chela.Graphics.GL2.AppleTextureRange target, Chela.Graphics.GL2.AppleTextureRange pname, T2[,,] @params)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetTexParameterPointervAPPLE((Chela.Graphics.GL2.AppleTextureRange)target, (Chela.Graphics.GL2.AppleTextureRange)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTexParameterPointer<T2>(Chela.Graphics.GL2.AppleTextureRange target, Chela.Graphics.GL2.AppleTextureRange pname, ref T2 @params)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetTexParameterPointervAPPLE((Chela.Graphics.GL2.AppleTextureRange)target, (Chela.Graphics.GL2.AppleTextureRange)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                        @params = (T2)@params_ptr.Target;
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsFence(Int32 fence)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsFenceAPPLE((UInt32)fence);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsFence(UInt32 fence)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsFenceAPPLE((UInt32)fence);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsVertexArray(Int32 array)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsVertexArrayAPPLE((UInt32)array);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsVertexArray(UInt32 array)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsVertexArrayAPPLE((UInt32)array);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsVertexAttribEnabled(Int32 index, Chela.Graphics.GL2.AppleVertexProgramEvaluators pname)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsVertexAttribEnabledAPPLE((UInt32)index, (Chela.Graphics.GL2.AppleVertexProgramEvaluators)pname);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsVertexAttribEnabled(UInt32 index, Chela.Graphics.GL2.AppleVertexProgramEvaluators pname)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsVertexAttribEnabledAPPLE((UInt32)index, (Chela.Graphics.GL2.AppleVertexProgramEvaluators)pname);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapVertexAttrib1(Int32 index, Int32 size, Double u1, Double u2, Int32 stride, Int32 order, Double[] points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* points_ptr = points)
                    {
                        Delegates.glMapVertexAttrib1dAPPLE((UInt32)index, (UInt32)size, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapVertexAttrib1(Int32 index, Int32 size, Double u1, Double u2, Int32 stride, Int32 order, ref Double points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* points_ptr = &points)
                    {
                        Delegates.glMapVertexAttrib1dAPPLE((UInt32)index, (UInt32)size, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MapVertexAttrib1(Int32 index, Int32 size, Double u1, Double u2, Int32 stride, Int32 order, Double* points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMapVertexAttrib1dAPPLE((UInt32)index, (UInt32)size, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapVertexAttrib1(UInt32 index, UInt32 size, Double u1, Double u2, Int32 stride, Int32 order, Double[] points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* points_ptr = points)
                    {
                        Delegates.glMapVertexAttrib1dAPPLE((UInt32)index, (UInt32)size, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapVertexAttrib1(UInt32 index, UInt32 size, Double u1, Double u2, Int32 stride, Int32 order, ref Double points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* points_ptr = &points)
                    {
                        Delegates.glMapVertexAttrib1dAPPLE((UInt32)index, (UInt32)size, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MapVertexAttrib1(UInt32 index, UInt32 size, Double u1, Double u2, Int32 stride, Int32 order, Double* points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMapVertexAttrib1dAPPLE((UInt32)index, (UInt32)size, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapVertexAttrib1(Int32 index, Int32 size, Single u1, Single u2, Int32 stride, Int32 order, Single[] points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glMapVertexAttrib1fAPPLE((UInt32)index, (UInt32)size, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapVertexAttrib1(Int32 index, Int32 size, Single u1, Single u2, Int32 stride, Int32 order, ref Single points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glMapVertexAttrib1fAPPLE((UInt32)index, (UInt32)size, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MapVertexAttrib1(Int32 index, Int32 size, Single u1, Single u2, Int32 stride, Int32 order, Single* points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMapVertexAttrib1fAPPLE((UInt32)index, (UInt32)size, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapVertexAttrib1(UInt32 index, UInt32 size, Single u1, Single u2, Int32 stride, Int32 order, Single[] points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glMapVertexAttrib1fAPPLE((UInt32)index, (UInt32)size, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapVertexAttrib1(UInt32 index, UInt32 size, Single u1, Single u2, Int32 stride, Int32 order, ref Single points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glMapVertexAttrib1fAPPLE((UInt32)index, (UInt32)size, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MapVertexAttrib1(UInt32 index, UInt32 size, Single u1, Single u2, Int32 stride, Int32 order, Single* points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMapVertexAttrib1fAPPLE((UInt32)index, (UInt32)size, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapVertexAttrib2(Int32 index, Int32 size, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double[] points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* points_ptr = points)
                    {
                        Delegates.glMapVertexAttrib2dAPPLE((UInt32)index, (UInt32)size, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapVertexAttrib2(Int32 index, Int32 size, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, ref Double points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* points_ptr = &points)
                    {
                        Delegates.glMapVertexAttrib2dAPPLE((UInt32)index, (UInt32)size, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MapVertexAttrib2(Int32 index, Int32 size, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double* points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMapVertexAttrib2dAPPLE((UInt32)index, (UInt32)size, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapVertexAttrib2(UInt32 index, UInt32 size, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double[] points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* points_ptr = points)
                    {
                        Delegates.glMapVertexAttrib2dAPPLE((UInt32)index, (UInt32)size, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapVertexAttrib2(UInt32 index, UInt32 size, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, ref Double points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* points_ptr = &points)
                    {
                        Delegates.glMapVertexAttrib2dAPPLE((UInt32)index, (UInt32)size, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MapVertexAttrib2(UInt32 index, UInt32 size, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double* points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMapVertexAttrib2dAPPLE((UInt32)index, (UInt32)size, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapVertexAttrib2(Int32 index, Int32 size, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single[] points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glMapVertexAttrib2fAPPLE((UInt32)index, (UInt32)size, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapVertexAttrib2(Int32 index, Int32 size, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, ref Single points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glMapVertexAttrib2fAPPLE((UInt32)index, (UInt32)size, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MapVertexAttrib2(Int32 index, Int32 size, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single* points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMapVertexAttrib2fAPPLE((UInt32)index, (UInt32)size, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapVertexAttrib2(UInt32 index, UInt32 size, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single[] points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glMapVertexAttrib2fAPPLE((UInt32)index, (UInt32)size, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapVertexAttrib2(UInt32 index, UInt32 size, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, ref Single points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glMapVertexAttrib2fAPPLE((UInt32)index, (UInt32)size, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MapVertexAttrib2(UInt32 index, UInt32 size, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single* points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMapVertexAttrib2fAPPLE((UInt32)index, (UInt32)size, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiDrawElementArray(Chela.Graphics.GL2.BeginMode mode, Int32[] first, Int32[] count, Int32 primcount)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* first_ptr = first)
                    fixed (Int32* count_ptr = count)
                    {
                        Delegates.glMultiDrawElementArrayAPPLE((Chela.Graphics.GL2.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiDrawElementArray(Chela.Graphics.GL2.BeginMode mode, ref Int32 first, ref Int32 count, Int32 primcount)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* first_ptr = &first)
                    fixed (Int32* count_ptr = &count)
                    {
                        Delegates.glMultiDrawElementArrayAPPLE((Chela.Graphics.GL2.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiDrawElementArray(Chela.Graphics.GL2.BeginMode mode, Int32* first, Int32* count, Int32 primcount)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiDrawElementArrayAPPLE((Chela.Graphics.GL2.BeginMode)mode, (Int32*)first, (Int32*)count, (Int32)primcount);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiDrawRangeElementArray(Chela.Graphics.GL2.BeginMode mode, Int32 start, Int32 end, Int32[] first, Int32[] count, Int32 primcount)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* first_ptr = first)
                    fixed (Int32* count_ptr = count)
                    {
                        Delegates.glMultiDrawRangeElementArrayAPPLE((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiDrawRangeElementArray(Chela.Graphics.GL2.BeginMode mode, Int32 start, Int32 end, ref Int32 first, ref Int32 count, Int32 primcount)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* first_ptr = &first)
                    fixed (Int32* count_ptr = &count)
                    {
                        Delegates.glMultiDrawRangeElementArrayAPPLE((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiDrawRangeElementArray(Chela.Graphics.GL2.BeginMode mode, Int32 start, Int32 end, Int32* first, Int32* count, Int32 primcount)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiDrawRangeElementArrayAPPLE((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32*)first, (Int32*)count, (Int32)primcount);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiDrawRangeElementArray(Chela.Graphics.GL2.BeginMode mode, UInt32 start, UInt32 end, Int32[] first, Int32[] count, Int32 primcount)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* first_ptr = first)
                    fixed (Int32* count_ptr = count)
                    {
                        Delegates.glMultiDrawRangeElementArrayAPPLE((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiDrawRangeElementArray(Chela.Graphics.GL2.BeginMode mode, UInt32 start, UInt32 end, ref Int32 first, ref Int32 count, Int32 primcount)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* first_ptr = &first)
                    fixed (Int32* count_ptr = &count)
                    {
                        Delegates.glMultiDrawRangeElementArrayAPPLE((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiDrawRangeElementArray(Chela.Graphics.GL2.BeginMode mode, UInt32 start, UInt32 end, Int32* first, Int32* count, Int32 primcount)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiDrawRangeElementArrayAPPLE((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32*)first, (Int32*)count, (Int32)primcount);
                #if DEBUG
                }
                #endif
            }

            public static 
            System.IntPtr ObjectPurgeable(Chela.Graphics.GL2.AppleObjectPurgeable objectType, Int32 name, Chela.Graphics.GL2.AppleObjectPurgeable option)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glObjectPurgeableAPPLE((Chela.Graphics.GL2.AppleObjectPurgeable)objectType, (UInt32)name, (Chela.Graphics.GL2.AppleObjectPurgeable)option);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            System.IntPtr ObjectPurgeable(Chela.Graphics.GL2.AppleObjectPurgeable objectType, UInt32 name, Chela.Graphics.GL2.AppleObjectPurgeable option)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glObjectPurgeableAPPLE((Chela.Graphics.GL2.AppleObjectPurgeable)objectType, (UInt32)name, (Chela.Graphics.GL2.AppleObjectPurgeable)option);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            System.IntPtr ObjectUnpurgeable(Chela.Graphics.GL2.AppleObjectPurgeable objectType, Int32 name, Chela.Graphics.GL2.AppleObjectPurgeable option)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glObjectUnpurgeableAPPLE((Chela.Graphics.GL2.AppleObjectPurgeable)objectType, (UInt32)name, (Chela.Graphics.GL2.AppleObjectPurgeable)option);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            System.IntPtr ObjectUnpurgeable(Chela.Graphics.GL2.AppleObjectPurgeable objectType, UInt32 name, Chela.Graphics.GL2.AppleObjectPurgeable option)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glObjectUnpurgeableAPPLE((Chela.Graphics.GL2.AppleObjectPurgeable)objectType, (UInt32)name, (Chela.Graphics.GL2.AppleObjectPurgeable)option);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetFence(Int32 fence)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSetFenceAPPLE((UInt32)fence);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetFence(UInt32 fence)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSetFenceAPPLE((UInt32)fence);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool TestFence(Int32 fence)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glTestFenceAPPLE((UInt32)fence);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool TestFence(UInt32 fence)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glTestFenceAPPLE((UInt32)fence);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool TestObject(Chela.Graphics.GL2.AppleFence @object, Int32 name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glTestObjectAPPLE((Chela.Graphics.GL2.AppleFence)@object, (UInt32)name);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool TestObject(Chela.Graphics.GL2.AppleFence @object, UInt32 name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glTestObjectAPPLE((Chela.Graphics.GL2.AppleFence)@object, (UInt32)name);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureRange(Chela.Graphics.GL2.AppleTextureRange target, Int32 length, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureRangeAPPLE((Chela.Graphics.GL2.AppleTextureRange)target, (Int32)length, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureRange<T2>(Chela.Graphics.GL2.AppleTextureRange target, Int32 length, T2[] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureRangeAPPLE((Chela.Graphics.GL2.AppleTextureRange)target, (Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureRange<T2>(Chela.Graphics.GL2.AppleTextureRange target, Int32 length, T2[,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureRangeAPPLE((Chela.Graphics.GL2.AppleTextureRange)target, (Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureRange<T2>(Chela.Graphics.GL2.AppleTextureRange target, Int32 length, T2[,,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureRangeAPPLE((Chela.Graphics.GL2.AppleTextureRange)target, (Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureRange<T2>(Chela.Graphics.GL2.AppleTextureRange target, Int32 length, ref T2 pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureRangeAPPLE((Chela.Graphics.GL2.AppleTextureRange)target, (Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T2)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexArrayParameter(Chela.Graphics.GL2.AppleVertexArrayRange pname, Int32 param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexArrayParameteriAPPLE((Chela.Graphics.GL2.AppleVertexArrayRange)pname, (Int32)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexArrayRange(Int32 length, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexArrayRangeAPPLE((Int32)length, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexArrayRange<T1>(Int32 length, T1[] pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexArrayRangeAPPLE((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexArrayRange<T1>(Int32 length, T1[,] pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexArrayRangeAPPLE((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexArrayRange<T1>(Int32 length, T1[,,] pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexArrayRangeAPPLE((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexArrayRange<T1>(Int32 length, ref T1 pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexArrayRangeAPPLE((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T1)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

        }

        public static partial class Arb
        {
            public static 
            void ActiveTexture(Chela.Graphics.GL2.TextureUnit texture)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glActiveTextureARB((Chela.Graphics.GL2.TextureUnit)texture);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void AttachObject(Int32 containerObj, Int32 obj)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glAttachObjectARB((UInt32)containerObj, (UInt32)obj);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void AttachObject(UInt32 containerObj, UInt32 obj)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glAttachObjectARB((UInt32)containerObj, (UInt32)obj);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BeginQuery(Chela.Graphics.GL2.ArbOcclusionQuery target, Int32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBeginQueryARB((Chela.Graphics.GL2.ArbOcclusionQuery)target, (UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BeginQuery(Chela.Graphics.GL2.ArbOcclusionQuery target, UInt32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBeginQueryARB((Chela.Graphics.GL2.ArbOcclusionQuery)target, (UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindAttribLocation(Int32 programObj, Int32 index, String name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        Delegates.glBindAttribLocationARB((UInt32)programObj, (UInt32)index, name_ptr.Address);
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindAttribLocation(UInt32 programObj, UInt32 index, String name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        Delegates.glBindAttribLocationARB((UInt32)programObj, (UInt32)index, name_ptr.Address);
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindBuffer(Chela.Graphics.GL2.BufferTargetArb target, Int32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindBufferARB((Chela.Graphics.GL2.BufferTargetArb)target, (UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindBuffer(Chela.Graphics.GL2.BufferTargetArb target, UInt32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindBufferARB((Chela.Graphics.GL2.BufferTargetArb)target, (UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindProgram(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 program)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindProgramARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)program);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindProgram(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 program)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindProgramARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)program);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BufferData(Chela.Graphics.GL2.BufferTargetArb target, IntPtr size, IntPtr data, Chela.Graphics.GL2.BufferUsageArb usage)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBufferDataARB((Chela.Graphics.GL2.BufferTargetArb)target, (IntPtr)size, (IntPtr)data, (Chela.Graphics.GL2.BufferUsageArb)usage);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BufferData<T2>(Chela.Graphics.GL2.BufferTargetArb target, IntPtr size, T2[] data, Chela.Graphics.GL2.BufferUsageArb usage)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glBufferDataARB((Chela.Graphics.GL2.BufferTargetArb)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.BufferUsageArb)usage);
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BufferData<T2>(Chela.Graphics.GL2.BufferTargetArb target, IntPtr size, T2[,] data, Chela.Graphics.GL2.BufferUsageArb usage)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glBufferDataARB((Chela.Graphics.GL2.BufferTargetArb)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.BufferUsageArb)usage);
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BufferData<T2>(Chela.Graphics.GL2.BufferTargetArb target, IntPtr size, T2[,,] data, Chela.Graphics.GL2.BufferUsageArb usage)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glBufferDataARB((Chela.Graphics.GL2.BufferTargetArb)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.BufferUsageArb)usage);
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BufferData<T2>(Chela.Graphics.GL2.BufferTargetArb target, IntPtr size, ref T2 data, Chela.Graphics.GL2.BufferUsageArb usage)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glBufferDataARB((Chela.Graphics.GL2.BufferTargetArb)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.BufferUsageArb)usage);
                        data = (T2)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BufferSubData(Chela.Graphics.GL2.BufferTargetArb target, IntPtr offset, IntPtr size, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBufferSubDataARB((Chela.Graphics.GL2.BufferTargetArb)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BufferSubData<T3>(Chela.Graphics.GL2.BufferTargetArb target, IntPtr offset, IntPtr size, T3[] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glBufferSubDataARB((Chela.Graphics.GL2.BufferTargetArb)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BufferSubData<T3>(Chela.Graphics.GL2.BufferTargetArb target, IntPtr offset, IntPtr size, T3[,] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glBufferSubDataARB((Chela.Graphics.GL2.BufferTargetArb)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BufferSubData<T3>(Chela.Graphics.GL2.BufferTargetArb target, IntPtr offset, IntPtr size, T3[,,] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glBufferSubDataARB((Chela.Graphics.GL2.BufferTargetArb)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BufferSubData<T3>(Chela.Graphics.GL2.BufferTargetArb target, IntPtr offset, IntPtr size, ref T3 data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glBufferSubDataARB((Chela.Graphics.GL2.BufferTargetArb)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T3)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ClampColor(Chela.Graphics.GL2.ArbColorBufferFloat target, Chela.Graphics.GL2.ArbColorBufferFloat clamp)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glClampColorARB((Chela.Graphics.GL2.ArbColorBufferFloat)target, (Chela.Graphics.GL2.ArbColorBufferFloat)clamp);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ClientActiveTexture(Chela.Graphics.GL2.TextureUnit texture)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glClientActiveTextureARB((Chela.Graphics.GL2.TextureUnit)texture);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompileShader(Int32 shaderObj)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompileShaderARB((UInt32)shaderObj);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompileShader(UInt32 shaderObj)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompileShaderARB((UInt32)shaderObj);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexImage1D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedTexImage1DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, T6[] data)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexImage1DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, T6[,] data)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexImage1DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, T6[,,] data)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexImage1DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, ref T6 data)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexImage1DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T6)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexImage2D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedTexImage2DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexImage2D<T7>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, T7[] data)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexImage2DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexImage2D<T7>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, T7[,] data)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexImage2DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexImage2D<T7>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, T7[,,] data)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexImage2DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexImage2D<T7>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, ref T7 data)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexImage2DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T7)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexImage3D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedTexImage3DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexImage3D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, T8[] data)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexImage3DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexImage3D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, T8[,] data)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexImage3DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexImage3D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, T8[,,] data)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexImage3DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexImage3D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, ref T8 data)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexImage3DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T8)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexSubImage1D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedTexSubImage1DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexSubImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T6[] data)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexSubImage1DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexSubImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T6[,] data)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexSubImage1DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexSubImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T6[,,] data)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexSubImage1DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexSubImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, ref T6 data)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexSubImage1DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T6)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexSubImage2D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedTexSubImage2DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexSubImage2D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T8[] data)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexSubImage2DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexSubImage2D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T8[,] data)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexSubImage2DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexSubImage2D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T8[,,] data)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexSubImage2DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexSubImage2D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, ref T8 data)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexSubImage2DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T8)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexSubImage3D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedTexSubImage3DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexSubImage3D<T10>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T10[] data)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexSubImage3DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexSubImage3D<T10>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T10[,] data)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexSubImage3DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexSubImage3D<T10>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T10[,,] data)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexSubImage3DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexSubImage3D<T10>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, ref T10 data)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexSubImage3DARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T10)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 CreateProgramObject()
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glCreateProgramObjectARB();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 CreateShaderObject(Chela.Graphics.GL2.ArbShaderObjects shaderType)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glCreateShaderObjectARB((Chela.Graphics.GL2.ArbShaderObjects)shaderType);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CurrentPaletteMatrix(Int32 index)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCurrentPaletteMatrixARB((Int32)index);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteBuffers(Int32 n, Int32[] buffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* buffers_ptr = buffers)
                    {
                        Delegates.glDeleteBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteBuffers(Int32 n, ref Int32 buffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* buffers_ptr = &buffers)
                    {
                        Delegates.glDeleteBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteBuffers(Int32 n, Int32* buffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteBuffersARB((Int32)n, (UInt32*)buffers);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteBuffers(Int32 n, UInt32[] buffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* buffers_ptr = buffers)
                    {
                        Delegates.glDeleteBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteBuffers(Int32 n, ref UInt32 buffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* buffers_ptr = &buffers)
                    {
                        Delegates.glDeleteBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteBuffers(Int32 n, UInt32* buffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteBuffersARB((Int32)n, (UInt32*)buffers);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteObject(Int32 obj)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDeleteObjectARB((UInt32)obj);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteObject(UInt32 obj)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDeleteObjectARB((UInt32)obj);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteProgram(Int32 n, Int32[] programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* programs_ptr = programs)
                    {
                        Delegates.glDeleteProgramsARB((Int32)n, (UInt32*)programs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteProgram(Int32 n, ref Int32 programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* programs_ptr = &programs)
                    {
                        Delegates.glDeleteProgramsARB((Int32)n, (UInt32*)programs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteProgram(Int32 n, Int32* programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteProgramsARB((Int32)n, (UInt32*)programs);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteProgram(Int32 n, UInt32[] programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* programs_ptr = programs)
                    {
                        Delegates.glDeleteProgramsARB((Int32)n, (UInt32*)programs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteProgram(Int32 n, ref UInt32 programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* programs_ptr = &programs)
                    {
                        Delegates.glDeleteProgramsARB((Int32)n, (UInt32*)programs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteProgram(Int32 n, UInt32* programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteProgramsARB((Int32)n, (UInt32*)programs);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteQueries(Int32 n, Int32[] ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* ids_ptr = ids)
                    {
                        Delegates.glDeleteQueriesARB((Int32)n, (UInt32*)ids_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteQueries(Int32 n, ref Int32 ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* ids_ptr = &ids)
                    {
                        Delegates.glDeleteQueriesARB((Int32)n, (UInt32*)ids_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteQueries(Int32 n, Int32* ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteQueriesARB((Int32)n, (UInt32*)ids);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteQueries(Int32 n, UInt32[] ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* ids_ptr = ids)
                    {
                        Delegates.glDeleteQueriesARB((Int32)n, (UInt32*)ids_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteQueries(Int32 n, ref UInt32 ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* ids_ptr = &ids)
                    {
                        Delegates.glDeleteQueriesARB((Int32)n, (UInt32*)ids_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteQueries(Int32 n, UInt32* ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteQueriesARB((Int32)n, (UInt32*)ids);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DetachObject(Int32 containerObj, Int32 attachedObj)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDetachObjectARB((UInt32)containerObj, (UInt32)attachedObj);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DetachObject(UInt32 containerObj, UInt32 attachedObj)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDetachObjectARB((UInt32)containerObj, (UInt32)attachedObj);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DisableVertexAttribArray(Int32 index)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDisableVertexAttribArrayARB((UInt32)index);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DisableVertexAttribArray(UInt32 index)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDisableVertexAttribArrayARB((UInt32)index);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawArraysInstanced(Chela.Graphics.GL2.BeginMode mode, Int32 first, Int32 count, Int32 primcount)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDrawArraysInstancedARB((Chela.Graphics.GL2.BeginMode)mode, (Int32)first, (Int32)count, (Int32)primcount);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawBuffers(Int32 n, Chela.Graphics.GL2.ArbDrawBuffers[] bufs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.GL2.ArbDrawBuffers* bufs_ptr = bufs)
                    {
                        Delegates.glDrawBuffersARB((Int32)n, (Chela.Graphics.GL2.ArbDrawBuffers*)bufs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawBuffers(Int32 n, ref Chela.Graphics.GL2.ArbDrawBuffers bufs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.GL2.ArbDrawBuffers* bufs_ptr = &bufs)
                    {
                        Delegates.glDrawBuffersARB((Int32)n, (Chela.Graphics.GL2.ArbDrawBuffers*)bufs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DrawBuffers(Int32 n, Chela.Graphics.GL2.ArbDrawBuffers* bufs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDrawBuffersARB((Int32)n, (Chela.Graphics.GL2.ArbDrawBuffers*)bufs);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawElementsInstanced(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices, Int32 primcount)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDrawElementsInstancedARB((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawElementsInstanced<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[] indices, Int32 primcount)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawElementsInstancedARB((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawElementsInstanced<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[,] indices, Int32 primcount)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawElementsInstancedARB((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawElementsInstanced<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[,,] indices, Int32 primcount)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawElementsInstancedARB((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawElementsInstanced<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, ref T3 indices, Int32 primcount)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawElementsInstancedARB((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        indices = (T3)indices_ptr.Target;
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EnableVertexAttribArray(Int32 index)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEnableVertexAttribArrayARB((UInt32)index);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EnableVertexAttribArray(UInt32 index)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEnableVertexAttribArrayARB((UInt32)index);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EndQuery(Chela.Graphics.GL2.ArbOcclusionQuery target)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEndQueryARB((Chela.Graphics.GL2.ArbOcclusionQuery)target);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferTexture(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Int32 texture, Int32 level)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferTextureARB((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferTexture(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, UInt32 texture, Int32 level)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferTextureARB((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferTextureFace(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Int32 texture, Int32 level, Chela.Graphics.GL2.TextureTarget face)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferTextureFaceARB((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Chela.Graphics.GL2.TextureTarget)face);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferTextureFace(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, UInt32 texture, Int32 level, Chela.Graphics.GL2.TextureTarget face)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferTextureFaceARB((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Chela.Graphics.GL2.TextureTarget)face);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferTextureLayer(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Int32 texture, Int32 level, Int32 layer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferTextureLayerARB((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferTextureLayer(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, UInt32 texture, Int32 level, Int32 layer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferTextureLayerARB((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenBuffers(Int32 n, Int32[] buffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* buffers_ptr = buffers)
                    {
                        Delegates.glGenBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenBuffers(Int32 n, out Int32 buffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* buffers_ptr = &buffers)
                    {
                        Delegates.glGenBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                        buffers = *buffers_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenBuffers(Int32 n, Int32* buffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenBuffersARB((Int32)n, (UInt32*)buffers);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenBuffers(Int32 n, UInt32[] buffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* buffers_ptr = buffers)
                    {
                        Delegates.glGenBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenBuffers(Int32 n, out UInt32 buffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* buffers_ptr = &buffers)
                    {
                        Delegates.glGenBuffersARB((Int32)n, (UInt32*)buffers_ptr);
                        buffers = *buffers_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenBuffers(Int32 n, UInt32* buffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenBuffersARB((Int32)n, (UInt32*)buffers);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenProgram(Int32 n, Int32[] programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* programs_ptr = programs)
                    {
                        Delegates.glGenProgramsARB((Int32)n, (UInt32*)programs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenProgram(Int32 n, out Int32 programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* programs_ptr = &programs)
                    {
                        Delegates.glGenProgramsARB((Int32)n, (UInt32*)programs_ptr);
                        programs = *programs_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenProgram(Int32 n, Int32* programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenProgramsARB((Int32)n, (UInt32*)programs);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenProgram(Int32 n, UInt32[] programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* programs_ptr = programs)
                    {
                        Delegates.glGenProgramsARB((Int32)n, (UInt32*)programs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenProgram(Int32 n, out UInt32 programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* programs_ptr = &programs)
                    {
                        Delegates.glGenProgramsARB((Int32)n, (UInt32*)programs_ptr);
                        programs = *programs_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenProgram(Int32 n, UInt32* programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenProgramsARB((Int32)n, (UInt32*)programs);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenQueries(Int32 n, Int32[] ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* ids_ptr = ids)
                    {
                        Delegates.glGenQueriesARB((Int32)n, (UInt32*)ids_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenQueries(Int32 n, out Int32 ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* ids_ptr = &ids)
                    {
                        Delegates.glGenQueriesARB((Int32)n, (UInt32*)ids_ptr);
                        ids = *ids_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenQueries(Int32 n, Int32* ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenQueriesARB((Int32)n, (UInt32*)ids);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenQueries(Int32 n, UInt32[] ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* ids_ptr = ids)
                    {
                        Delegates.glGenQueriesARB((Int32)n, (UInt32*)ids_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenQueries(Int32 n, out UInt32 ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* ids_ptr = &ids)
                    {
                        Delegates.glGenQueriesARB((Int32)n, (UInt32*)ids_ptr);
                        ids = *ids_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenQueries(Int32 n, UInt32* ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenQueriesARB((Int32)n, (UInt32*)ids);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetActiveAttrib(Int32 programObj, Int32 index, Int32 maxLength, out Int32 length, out Int32 size, out Chela.Graphics.GL2.ArbVertexShader type, StringBuilder name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (Chela.Graphics.GL2.ArbVertexShader* type_ptr = &type)
                    {
                        StringHandle name_ptr = StringHandle.Alloc(name);
                        try
                        {
                            Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (Chela.Graphics.GL2.ArbVertexShader*)type_ptr, name_ptr.Address);
                            length = *length_ptr;
                            size = *size_ptr;
                            type = *type_ptr;
                        }
                        finally
                        {
                            name_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetActiveAttrib(Int32 programObj, Int32 index, Int32 maxLength, Int32* length, Int32* size, Chela.Graphics.GL2.ArbVertexShader* type, StringBuilder name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (Chela.Graphics.GL2.ArbVertexShader*)type, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetActiveAttrib(UInt32 programObj, UInt32 index, Int32 maxLength, out Int32 length, out Int32 size, out Chela.Graphics.GL2.ArbVertexShader type, StringBuilder name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (Chela.Graphics.GL2.ArbVertexShader* type_ptr = &type)
                    {
                        StringHandle name_ptr = StringHandle.Alloc(name);
                        try
                        {
                            Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (Chela.Graphics.GL2.ArbVertexShader*)type_ptr, name_ptr.Address);
                            length = *length_ptr;
                            size = *size_ptr;
                            type = *type_ptr;
                        }
                        finally
                        {
                            name_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetActiveAttrib(UInt32 programObj, UInt32 index, Int32 maxLength, Int32* length, Int32* size, Chela.Graphics.GL2.ArbVertexShader* type, StringBuilder name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    Delegates.glGetActiveAttribARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (Chela.Graphics.GL2.ArbVertexShader*)type, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetActiveUniform(Int32 programObj, Int32 index, Int32 maxLength, out Int32 length, out Int32 size, out Chela.Graphics.GL2.ArbShaderObjects type, StringBuilder name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (Chela.Graphics.GL2.ArbShaderObjects* type_ptr = &type)
                    {
                        StringHandle name_ptr = StringHandle.Alloc(name);
                        try
                        {
                            Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (Chela.Graphics.GL2.ArbShaderObjects*)type_ptr, name_ptr.Address);
                            length = *length_ptr;
                            size = *size_ptr;
                            type = *type_ptr;
                        }
                        finally
                        {
                            name_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetActiveUniform(Int32 programObj, Int32 index, Int32 maxLength, Int32* length, Int32* size, Chela.Graphics.GL2.ArbShaderObjects* type, StringBuilder name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (Chela.Graphics.GL2.ArbShaderObjects*)type, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetActiveUniform(UInt32 programObj, UInt32 index, Int32 maxLength, out Int32 length, out Int32 size, out Chela.Graphics.GL2.ArbShaderObjects type, StringBuilder name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (Chela.Graphics.GL2.ArbShaderObjects* type_ptr = &type)
                    {
                        StringHandle name_ptr = StringHandle.Alloc(name);
                        try
                        {
                            Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length_ptr, (Int32*)size_ptr, (Chela.Graphics.GL2.ArbShaderObjects*)type_ptr, name_ptr.Address);
                            length = *length_ptr;
                            size = *size_ptr;
                            type = *type_ptr;
                        }
                        finally
                        {
                            name_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetActiveUniform(UInt32 programObj, UInt32 index, Int32 maxLength, Int32* length, Int32* size, Chela.Graphics.GL2.ArbShaderObjects* type, StringBuilder name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    Delegates.glGetActiveUniformARB((UInt32)programObj, (UInt32)index, (Int32)maxLength, (Int32*)length, (Int32*)size, (Chela.Graphics.GL2.ArbShaderObjects*)type, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetAttachedObjects(Int32 containerObj, Int32 maxCount, out Int32 count, out Int32 obj)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    fixed (Int32* obj_ptr = &obj)
                    {
                        Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                        count = *count_ptr;
                        obj = *obj_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetAttachedObjects(Int32 containerObj, Int32 maxCount, Int32* count, Int32[] obj)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Int32* obj_ptr = obj)
                {
                    Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count, (UInt32*)obj_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetAttachedObjects(Int32 containerObj, Int32 maxCount, Int32* count, Int32* obj)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetAttachedObjects(UInt32 containerObj, Int32 maxCount, out Int32 count, out UInt32 obj)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    fixed (UInt32* obj_ptr = &obj)
                    {
                        Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                        count = *count_ptr;
                        obj = *obj_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetAttachedObjects(UInt32 containerObj, Int32 maxCount, Int32* count, UInt32[] obj)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (UInt32* obj_ptr = obj)
                {
                    Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count, (UInt32*)obj_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetAttachedObjects(UInt32 containerObj, Int32 maxCount, Int32* count, UInt32* obj)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetAttachedObjectsARB((UInt32)containerObj, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 GetAttribLocation(Int32 programObj, String name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        return Delegates.glGetAttribLocationARB((UInt32)programObj, name_ptr.Address);
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 GetAttribLocation(UInt32 programObj, String name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        return Delegates.glGetAttribLocationARB((UInt32)programObj, name_ptr.Address);
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetBufferParameter(Chela.Graphics.GL2.ArbVertexBufferObject target, Chela.Graphics.GL2.BufferParameterNameArb pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetBufferParameterivARB((Chela.Graphics.GL2.ArbVertexBufferObject)target, (Chela.Graphics.GL2.BufferParameterNameArb)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetBufferParameter(Chela.Graphics.GL2.ArbVertexBufferObject target, Chela.Graphics.GL2.BufferParameterNameArb pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetBufferParameterivARB((Chela.Graphics.GL2.ArbVertexBufferObject)target, (Chela.Graphics.GL2.BufferParameterNameArb)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetBufferParameter(Chela.Graphics.GL2.ArbVertexBufferObject target, Chela.Graphics.GL2.BufferParameterNameArb pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetBufferParameterivARB((Chela.Graphics.GL2.ArbVertexBufferObject)target, (Chela.Graphics.GL2.BufferParameterNameArb)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetBufferPointer(Chela.Graphics.GL2.ArbVertexBufferObject target, Chela.Graphics.GL2.BufferPointerNameArb pname, IntPtr @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetBufferPointervARB((Chela.Graphics.GL2.ArbVertexBufferObject)target, (Chela.Graphics.GL2.BufferPointerNameArb)pname, (IntPtr)@params);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetBufferPointer<T2>(Chela.Graphics.GL2.ArbVertexBufferObject target, Chela.Graphics.GL2.BufferPointerNameArb pname, T2[] @params)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetBufferPointervARB((Chela.Graphics.GL2.ArbVertexBufferObject)target, (Chela.Graphics.GL2.BufferPointerNameArb)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetBufferPointer<T2>(Chela.Graphics.GL2.ArbVertexBufferObject target, Chela.Graphics.GL2.BufferPointerNameArb pname, T2[,] @params)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetBufferPointervARB((Chela.Graphics.GL2.ArbVertexBufferObject)target, (Chela.Graphics.GL2.BufferPointerNameArb)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetBufferPointer<T2>(Chela.Graphics.GL2.ArbVertexBufferObject target, Chela.Graphics.GL2.BufferPointerNameArb pname, T2[,,] @params)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetBufferPointervARB((Chela.Graphics.GL2.ArbVertexBufferObject)target, (Chela.Graphics.GL2.BufferPointerNameArb)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetBufferPointer<T2>(Chela.Graphics.GL2.ArbVertexBufferObject target, Chela.Graphics.GL2.BufferPointerNameArb pname, ref T2 @params)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetBufferPointervARB((Chela.Graphics.GL2.ArbVertexBufferObject)target, (Chela.Graphics.GL2.BufferPointerNameArb)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                        @params = (T2)@params_ptr.Target;
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetBufferSubData(Chela.Graphics.GL2.BufferTargetArb target, IntPtr offset, IntPtr size, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetBufferSubDataARB((Chela.Graphics.GL2.BufferTargetArb)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetBufferSubData<T3>(Chela.Graphics.GL2.BufferTargetArb target, IntPtr offset, IntPtr size, T3[] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetBufferSubDataARB((Chela.Graphics.GL2.BufferTargetArb)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetBufferSubData<T3>(Chela.Graphics.GL2.BufferTargetArb target, IntPtr offset, IntPtr size, T3[,] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetBufferSubDataARB((Chela.Graphics.GL2.BufferTargetArb)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetBufferSubData<T3>(Chela.Graphics.GL2.BufferTargetArb target, IntPtr offset, IntPtr size, T3[,,] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetBufferSubDataARB((Chela.Graphics.GL2.BufferTargetArb)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetBufferSubData<T3>(Chela.Graphics.GL2.BufferTargetArb target, IntPtr offset, IntPtr size, ref T3 data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetBufferSubDataARB((Chela.Graphics.GL2.BufferTargetArb)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T3)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCompressedTexImage(Chela.Graphics.GL2.TextureTarget target, Int32 level, IntPtr img)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetCompressedTexImageARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (IntPtr)img);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCompressedTexImage<T2>(Chela.Graphics.GL2.TextureTarget target, Int32 level, T2[] img)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetCompressedTexImageARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        img_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCompressedTexImage<T2>(Chela.Graphics.GL2.TextureTarget target, Int32 level, T2[,] img)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetCompressedTexImageARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        img_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCompressedTexImage<T2>(Chela.Graphics.GL2.TextureTarget target, Int32 level, T2[,,] img)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetCompressedTexImageARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        img_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCompressedTexImage<T2>(Chela.Graphics.GL2.TextureTarget target, Int32 level, ref T2 img)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetCompressedTexImageARB((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                        img = (T2)img_ptr.Target;
                    }
                    finally
                    {
                        img_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 GetHandle(Chela.Graphics.GL2.ArbShaderObjects pname)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glGetHandleARB((Chela.Graphics.GL2.ArbShaderObjects)pname);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetInfoLog(Int32 obj, Int32 maxLength, out Int32 length, StringBuilder infoLog)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        StringHandle infoLog_ptr = StringHandle.Alloc(infoLog);
                        try
                        {
                            Delegates.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, infoLog_ptr.Address);
                            length = *length_ptr;
                        }
                        finally
                        {
                            infoLog_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetInfoLog(Int32 obj, Int32 maxLength, Int32* length, StringBuilder infoLog)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                StringHandle infoLog_ptr = StringHandle.Alloc(infoLog);
                try
                {
                    Delegates.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length, infoLog_ptr.Address);
                }
                finally
                {
                    infoLog_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetInfoLog(UInt32 obj, Int32 maxLength, out Int32 length, StringBuilder infoLog)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        StringHandle infoLog_ptr = StringHandle.Alloc(infoLog);
                        try
                        {
                            Delegates.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, infoLog_ptr.Address);
                            length = *length_ptr;
                        }
                        finally
                        {
                            infoLog_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetInfoLog(UInt32 obj, Int32 maxLength, Int32* length, StringBuilder infoLog)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                StringHandle infoLog_ptr = StringHandle.Alloc(infoLog);
                try
                {
                    Delegates.glGetInfoLogARB((UInt32)obj, (Int32)maxLength, (Int32*)length, infoLog_ptr.Address);
                }
                finally
                {
                    infoLog_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetObjectParameter(Int32 obj, Chela.Graphics.GL2.ArbShaderObjects pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetObjectParameterfvARB((UInt32)obj, (Chela.Graphics.GL2.ArbShaderObjects)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetObjectParameter(Int32 obj, Chela.Graphics.GL2.ArbShaderObjects pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectParameterfvARB((UInt32)obj, (Chela.Graphics.GL2.ArbShaderObjects)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetObjectParameter(Int32 obj, Chela.Graphics.GL2.ArbShaderObjects pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetObjectParameterfvARB((UInt32)obj, (Chela.Graphics.GL2.ArbShaderObjects)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetObjectParameter(UInt32 obj, Chela.Graphics.GL2.ArbShaderObjects pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetObjectParameterfvARB((UInt32)obj, (Chela.Graphics.GL2.ArbShaderObjects)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetObjectParameter(UInt32 obj, Chela.Graphics.GL2.ArbShaderObjects pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectParameterfvARB((UInt32)obj, (Chela.Graphics.GL2.ArbShaderObjects)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetObjectParameter(UInt32 obj, Chela.Graphics.GL2.ArbShaderObjects pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetObjectParameterfvARB((UInt32)obj, (Chela.Graphics.GL2.ArbShaderObjects)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetObjectParameter(Int32 obj, Chela.Graphics.GL2.ArbShaderObjects pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetObjectParameterivARB((UInt32)obj, (Chela.Graphics.GL2.ArbShaderObjects)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetObjectParameter(Int32 obj, Chela.Graphics.GL2.ArbShaderObjects pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectParameterivARB((UInt32)obj, (Chela.Graphics.GL2.ArbShaderObjects)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetObjectParameter(Int32 obj, Chela.Graphics.GL2.ArbShaderObjects pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetObjectParameterivARB((UInt32)obj, (Chela.Graphics.GL2.ArbShaderObjects)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetObjectParameter(UInt32 obj, Chela.Graphics.GL2.ArbShaderObjects pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetObjectParameterivARB((UInt32)obj, (Chela.Graphics.GL2.ArbShaderObjects)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetObjectParameter(UInt32 obj, Chela.Graphics.GL2.ArbShaderObjects pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectParameterivARB((UInt32)obj, (Chela.Graphics.GL2.ArbShaderObjects)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetObjectParameter(UInt32 obj, Chela.Graphics.GL2.ArbShaderObjects pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetObjectParameterivARB((UInt32)obj, (Chela.Graphics.GL2.ArbShaderObjects)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramEnvParameter(Chela.Graphics.GL2.ArbVertexProgram target, Int32 index, Double[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterdvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramEnvParameter(Chela.Graphics.GL2.ArbVertexProgram target, Int32 index, out Double @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterdvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramEnvParameter(Chela.Graphics.GL2.ArbVertexProgram target, Int32 index, Double* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramEnvParameterdvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Double*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramEnvParameter(Chela.Graphics.GL2.ArbVertexProgram target, UInt32 index, Double[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterdvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramEnvParameter(Chela.Graphics.GL2.ArbVertexProgram target, UInt32 index, out Double @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterdvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramEnvParameter(Chela.Graphics.GL2.ArbVertexProgram target, UInt32 index, Double* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramEnvParameterdvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Double*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramEnvParameter(Chela.Graphics.GL2.ArbVertexProgram target, Int32 index, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterfvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramEnvParameter(Chela.Graphics.GL2.ArbVertexProgram target, Int32 index, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterfvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramEnvParameter(Chela.Graphics.GL2.ArbVertexProgram target, Int32 index, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramEnvParameterfvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramEnvParameter(Chela.Graphics.GL2.ArbVertexProgram target, UInt32 index, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterfvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramEnvParameter(Chela.Graphics.GL2.ArbVertexProgram target, UInt32 index, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterfvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramEnvParameter(Chela.Graphics.GL2.ArbVertexProgram target, UInt32 index, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramEnvParameterfvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgram(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Chela.Graphics.GL2.AssemblyProgramParameterArb pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramivARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (Chela.Graphics.GL2.AssemblyProgramParameterArb)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgram(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Chela.Graphics.GL2.AssemblyProgramParameterArb pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramivARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (Chela.Graphics.GL2.AssemblyProgramParameterArb)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramLocalParameter(Chela.Graphics.GL2.ArbVertexProgram target, Int32 index, Double[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterdvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramLocalParameter(Chela.Graphics.GL2.ArbVertexProgram target, Int32 index, out Double @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterdvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramLocalParameter(Chela.Graphics.GL2.ArbVertexProgram target, Int32 index, Double* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramLocalParameterdvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Double*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramLocalParameter(Chela.Graphics.GL2.ArbVertexProgram target, UInt32 index, Double[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterdvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramLocalParameter(Chela.Graphics.GL2.ArbVertexProgram target, UInt32 index, out Double @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterdvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramLocalParameter(Chela.Graphics.GL2.ArbVertexProgram target, UInt32 index, Double* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramLocalParameterdvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Double*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramLocalParameter(Chela.Graphics.GL2.ArbVertexProgram target, Int32 index, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterfvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramLocalParameter(Chela.Graphics.GL2.ArbVertexProgram target, Int32 index, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterfvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramLocalParameter(Chela.Graphics.GL2.ArbVertexProgram target, Int32 index, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramLocalParameterfvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramLocalParameter(Chela.Graphics.GL2.ArbVertexProgram target, UInt32 index, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterfvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramLocalParameter(Chela.Graphics.GL2.ArbVertexProgram target, UInt32 index, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterfvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramLocalParameter(Chela.Graphics.GL2.ArbVertexProgram target, UInt32 index, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramLocalParameterfvARB((Chela.Graphics.GL2.ArbVertexProgram)target, (UInt32)index, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramString(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Chela.Graphics.GL2.AssemblyProgramParameterArb pname, IntPtr @string)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetProgramStringARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (Chela.Graphics.GL2.AssemblyProgramParameterArb)pname, (IntPtr)@string);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramString<T2>(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Chela.Graphics.GL2.AssemblyProgramParameterArb pname, T2[] @string)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetProgramStringARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (Chela.Graphics.GL2.AssemblyProgramParameterArb)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramString<T2>(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Chela.Graphics.GL2.AssemblyProgramParameterArb pname, T2[,] @string)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetProgramStringARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (Chela.Graphics.GL2.AssemblyProgramParameterArb)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramString<T2>(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Chela.Graphics.GL2.AssemblyProgramParameterArb pname, T2[,,] @string)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetProgramStringARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (Chela.Graphics.GL2.AssemblyProgramParameterArb)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramString<T2>(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Chela.Graphics.GL2.AssemblyProgramParameterArb pname, ref T2 @string)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetProgramStringARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (Chela.Graphics.GL2.AssemblyProgramParameterArb)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                        @string = (T2)@string_ptr.Target;
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetQuery(Chela.Graphics.GL2.ArbOcclusionQuery target, Chela.Graphics.GL2.ArbOcclusionQuery pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetQueryivARB((Chela.Graphics.GL2.ArbOcclusionQuery)target, (Chela.Graphics.GL2.ArbOcclusionQuery)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetQuery(Chela.Graphics.GL2.ArbOcclusionQuery target, Chela.Graphics.GL2.ArbOcclusionQuery pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryivARB((Chela.Graphics.GL2.ArbOcclusionQuery)target, (Chela.Graphics.GL2.ArbOcclusionQuery)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetQuery(Chela.Graphics.GL2.ArbOcclusionQuery target, Chela.Graphics.GL2.ArbOcclusionQuery pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetQueryivARB((Chela.Graphics.GL2.ArbOcclusionQuery)target, (Chela.Graphics.GL2.ArbOcclusionQuery)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetQueryObject(Int32 id, Chela.Graphics.GL2.ArbOcclusionQuery pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectivARB((UInt32)id, (Chela.Graphics.GL2.ArbOcclusionQuery)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetQueryObject(Int32 id, Chela.Graphics.GL2.ArbOcclusionQuery pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectivARB((UInt32)id, (Chela.Graphics.GL2.ArbOcclusionQuery)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetQueryObject(Int32 id, Chela.Graphics.GL2.ArbOcclusionQuery pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetQueryObjectivARB((UInt32)id, (Chela.Graphics.GL2.ArbOcclusionQuery)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetQueryObject(UInt32 id, Chela.Graphics.GL2.ArbOcclusionQuery pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectivARB((UInt32)id, (Chela.Graphics.GL2.ArbOcclusionQuery)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetQueryObject(UInt32 id, Chela.Graphics.GL2.ArbOcclusionQuery pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectivARB((UInt32)id, (Chela.Graphics.GL2.ArbOcclusionQuery)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetQueryObject(UInt32 id, Chela.Graphics.GL2.ArbOcclusionQuery pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetQueryObjectivARB((UInt32)id, (Chela.Graphics.GL2.ArbOcclusionQuery)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetQueryObject(UInt32 id, Chela.Graphics.GL2.ArbOcclusionQuery pname, UInt32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectuivARB((UInt32)id, (Chela.Graphics.GL2.ArbOcclusionQuery)pname, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetQueryObject(UInt32 id, Chela.Graphics.GL2.ArbOcclusionQuery pname, out UInt32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectuivARB((UInt32)id, (Chela.Graphics.GL2.ArbOcclusionQuery)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetQueryObject(UInt32 id, Chela.Graphics.GL2.ArbOcclusionQuery pname, UInt32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetQueryObjectuivARB((UInt32)id, (Chela.Graphics.GL2.ArbOcclusionQuery)pname, (UInt32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetShaderSource(Int32 obj, Int32 maxLength, out Int32 length, StringBuilder source)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        StringHandle source_ptr = StringHandle.Alloc(source);
                        try
                        {
                            Delegates.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, source_ptr.Address);
                            length = *length_ptr;
                        }
                        finally
                        {
                            source_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetShaderSource(Int32 obj, Int32 maxLength, Int32* length, StringBuilder source)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                StringHandle source_ptr = StringHandle.Alloc(source);
                try
                {
                    Delegates.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length, source_ptr.Address);
                }
                finally
                {
                    source_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetShaderSource(UInt32 obj, Int32 maxLength, out Int32 length, StringBuilder source)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        StringHandle source_ptr = StringHandle.Alloc(source);
                        try
                        {
                            Delegates.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length_ptr, source_ptr.Address);
                            length = *length_ptr;
                        }
                        finally
                        {
                            source_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetShaderSource(UInt32 obj, Int32 maxLength, Int32* length, StringBuilder source)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                StringHandle source_ptr = StringHandle.Alloc(source);
                try
                {
                    Delegates.glGetShaderSourceARB((UInt32)obj, (Int32)maxLength, (Int32*)length, source_ptr.Address);
                }
                finally
                {
                    source_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetUniform(Int32 programObj, Int32 location, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetUniform(Int32 programObj, Int32 location, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetUniform(Int32 programObj, Int32 location, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetUniform(UInt32 programObj, Int32 location, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetUniform(UInt32 programObj, Int32 location, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetUniform(UInt32 programObj, Int32 location, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetUniformfvARB((UInt32)programObj, (Int32)location, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetUniform(Int32 programObj, Int32 location, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetUniform(Int32 programObj, Int32 location, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetUniform(Int32 programObj, Int32 location, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetUniform(UInt32 programObj, Int32 location, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetUniform(UInt32 programObj, Int32 location, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetUniform(UInt32 programObj, Int32 location, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetUniformivARB((UInt32)programObj, (Int32)location, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 GetUniformLocation(Int32 programObj, String name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        return Delegates.glGetUniformLocationARB((UInt32)programObj, name_ptr.Address);
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 GetUniformLocation(UInt32 programObj, String name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        return Delegates.glGetUniformLocationARB((UInt32)programObj, name_ptr.Address);
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.VertexAttribParameterArb pname, Double[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribdvARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameterArb)pname, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.VertexAttribParameterArb pname, out Double @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribdvARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameterArb)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.VertexAttribParameterArb pname, Double* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVertexAttribdvARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameterArb)pname, (Double*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.VertexAttribParameterArb pname, Double[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribdvARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameterArb)pname, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.VertexAttribParameterArb pname, out Double @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribdvARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameterArb)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.VertexAttribParameterArb pname, Double* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVertexAttribdvARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameterArb)pname, (Double*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.VertexAttribParameterArb pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribfvARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameterArb)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.VertexAttribParameterArb pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribfvARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameterArb)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.VertexAttribParameterArb pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVertexAttribfvARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameterArb)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.VertexAttribParameterArb pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribfvARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameterArb)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.VertexAttribParameterArb pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribfvARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameterArb)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.VertexAttribParameterArb pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVertexAttribfvARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameterArb)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.VertexAttribParameterArb pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribivARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameterArb)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.VertexAttribParameterArb pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribivARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameterArb)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.VertexAttribParameterArb pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVertexAttribivARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameterArb)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.VertexAttribParameterArb pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribivARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameterArb)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.VertexAttribParameterArb pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribivARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameterArb)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.VertexAttribParameterArb pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVertexAttribivARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameterArb)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribPointer(Int32 index, Chela.Graphics.GL2.VertexAttribPointerParameterArb pname, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetVertexAttribPointervARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribPointerParameterArb)pname, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribPointer<T2>(Int32 index, Chela.Graphics.GL2.VertexAttribPointerParameterArb pname, T2[] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointervARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribPointerParameterArb)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribPointer<T2>(Int32 index, Chela.Graphics.GL2.VertexAttribPointerParameterArb pname, T2[,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointervARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribPointerParameterArb)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribPointer<T2>(Int32 index, Chela.Graphics.GL2.VertexAttribPointerParameterArb pname, T2[,,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointervARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribPointerParameterArb)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribPointer<T2>(Int32 index, Chela.Graphics.GL2.VertexAttribPointerParameterArb pname, ref T2 pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointervARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribPointerParameterArb)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T2)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribPointer(UInt32 index, Chela.Graphics.GL2.VertexAttribPointerParameterArb pname, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetVertexAttribPointervARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribPointerParameterArb)pname, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribPointer<T2>(UInt32 index, Chela.Graphics.GL2.VertexAttribPointerParameterArb pname, T2[] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointervARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribPointerParameterArb)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribPointer<T2>(UInt32 index, Chela.Graphics.GL2.VertexAttribPointerParameterArb pname, T2[,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointervARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribPointerParameterArb)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribPointer<T2>(UInt32 index, Chela.Graphics.GL2.VertexAttribPointerParameterArb pname, T2[,,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointervARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribPointerParameterArb)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribPointer<T2>(UInt32 index, Chela.Graphics.GL2.VertexAttribPointerParameterArb pname, ref T2 pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointervARB((UInt32)index, (Chela.Graphics.GL2.VertexAttribPointerParameterArb)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T2)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsBuffer(Int32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsBufferARB((UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsBuffer(UInt32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsBufferARB((UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsProgram(Int32 program)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsProgramARB((UInt32)program);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsProgram(UInt32 program)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsProgramARB((UInt32)program);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsQuery(Int32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsQueryARB((UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsQuery(UInt32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsQueryARB((UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void LinkProgram(Int32 programObj)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glLinkProgramARB((UInt32)programObj);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void LinkProgram(UInt32 programObj)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glLinkProgramARB((UInt32)programObj);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void LoadTransposeMatrix(Double[] m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glLoadTransposeMatrixdARB((Double*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void LoadTransposeMatrix(ref Double m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glLoadTransposeMatrixdARB((Double*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void LoadTransposeMatrix(Double* m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glLoadTransposeMatrixdARB((Double*)m);
                #if DEBUG
                }
                #endif
            }

            public static 
            void LoadTransposeMatrix(Single[] m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glLoadTransposeMatrixfARB((Single*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void LoadTransposeMatrix(ref Single m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glLoadTransposeMatrixfARB((Single*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void LoadTransposeMatrix(Single* m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glLoadTransposeMatrixfARB((Single*)m);
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe System.IntPtr MapBuffer(Chela.Graphics.GL2.BufferTargetArb target, Chela.Graphics.GL2.ArbVertexBufferObject access)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                return Delegates.glMapBufferARB((Chela.Graphics.GL2.BufferTargetArb)target, (Chela.Graphics.GL2.ArbVertexBufferObject)access);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixIndexPointer(Int32 size, Chela.Graphics.GL2.ArbMatrixPalette type, Int32 stride, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMatrixIndexPointerARB((Int32)size, (Chela.Graphics.GL2.ArbMatrixPalette)type, (Int32)stride, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixIndexPointer<T3>(Int32 size, Chela.Graphics.GL2.ArbMatrixPalette type, Int32 stride, T3[] pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMatrixIndexPointerARB((Int32)size, (Chela.Graphics.GL2.ArbMatrixPalette)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixIndexPointer<T3>(Int32 size, Chela.Graphics.GL2.ArbMatrixPalette type, Int32 stride, T3[,] pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMatrixIndexPointerARB((Int32)size, (Chela.Graphics.GL2.ArbMatrixPalette)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixIndexPointer<T3>(Int32 size, Chela.Graphics.GL2.ArbMatrixPalette type, Int32 stride, T3[,,] pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMatrixIndexPointerARB((Int32)size, (Chela.Graphics.GL2.ArbMatrixPalette)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixIndexPointer<T3>(Int32 size, Chela.Graphics.GL2.ArbMatrixPalette type, Int32 stride, ref T3 pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMatrixIndexPointerARB((Int32)size, (Chela.Graphics.GL2.ArbMatrixPalette)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T3)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixIndex(Int32 size, Byte[] indices)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* indices_ptr = indices)
                    {
                        Delegates.glMatrixIndexubvARB((Int32)size, (Byte*)indices_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixIndex(Int32 size, ref Byte indices)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* indices_ptr = &indices)
                    {
                        Delegates.glMatrixIndexubvARB((Int32)size, (Byte*)indices_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MatrixIndex(Int32 size, Byte* indices)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMatrixIndexubvARB((Int32)size, (Byte*)indices);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixIndex(Int32 size, Int32[] indices)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* indices_ptr = indices)
                    {
                        Delegates.glMatrixIndexuivARB((Int32)size, (UInt32*)indices_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixIndex(Int32 size, ref Int32 indices)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* indices_ptr = &indices)
                    {
                        Delegates.glMatrixIndexuivARB((Int32)size, (UInt32*)indices_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MatrixIndex(Int32 size, Int32* indices)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMatrixIndexuivARB((Int32)size, (UInt32*)indices);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixIndex(Int32 size, UInt32[] indices)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* indices_ptr = indices)
                    {
                        Delegates.glMatrixIndexuivARB((Int32)size, (UInt32*)indices_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixIndex(Int32 size, ref UInt32 indices)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* indices_ptr = &indices)
                    {
                        Delegates.glMatrixIndexuivARB((Int32)size, (UInt32*)indices_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MatrixIndex(Int32 size, UInt32* indices)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMatrixIndexuivARB((Int32)size, (UInt32*)indices);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixIndex(Int32 size, Int16[] indices)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* indices_ptr = indices)
                    {
                        Delegates.glMatrixIndexusvARB((Int32)size, (UInt16*)indices_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixIndex(Int32 size, ref Int16 indices)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* indices_ptr = &indices)
                    {
                        Delegates.glMatrixIndexusvARB((Int32)size, (UInt16*)indices_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MatrixIndex(Int32 size, Int16* indices)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMatrixIndexusvARB((Int32)size, (UInt16*)indices);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixIndex(Int32 size, UInt16[] indices)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt16* indices_ptr = indices)
                    {
                        Delegates.glMatrixIndexusvARB((Int32)size, (UInt16*)indices_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixIndex(Int32 size, ref UInt16 indices)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt16* indices_ptr = &indices)
                    {
                        Delegates.glMatrixIndexusvARB((Int32)size, (UInt16*)indices_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MatrixIndex(Int32 size, UInt16* indices)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMatrixIndexusvARB((Int32)size, (UInt16*)indices);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord1(Chela.Graphics.GL2.TextureUnit target, Double s)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexCoord1dARB((Chela.Graphics.GL2.TextureUnit)target, (Double)s);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexCoord1(Chela.Graphics.GL2.TextureUnit target, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexCoord1dvARB((Chela.Graphics.GL2.TextureUnit)target, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord1(Chela.Graphics.GL2.TextureUnit target, Single s)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexCoord1fARB((Chela.Graphics.GL2.TextureUnit)target, (Single)s);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexCoord1(Chela.Graphics.GL2.TextureUnit target, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexCoord1fvARB((Chela.Graphics.GL2.TextureUnit)target, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord1(Chela.Graphics.GL2.TextureUnit target, Int32 s)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexCoord1iARB((Chela.Graphics.GL2.TextureUnit)target, (Int32)s);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexCoord1(Chela.Graphics.GL2.TextureUnit target, Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexCoord1ivARB((Chela.Graphics.GL2.TextureUnit)target, (Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord1(Chela.Graphics.GL2.TextureUnit target, Int16 s)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexCoord1sARB((Chela.Graphics.GL2.TextureUnit)target, (Int16)s);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexCoord1(Chela.Graphics.GL2.TextureUnit target, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexCoord1svARB((Chela.Graphics.GL2.TextureUnit)target, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Double s, Double t)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexCoord2dARB((Chela.Graphics.GL2.TextureUnit)target, (Double)s, (Double)t);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2dvARB((Chela.Graphics.GL2.TextureUnit)target, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2dvARB((Chela.Graphics.GL2.TextureUnit)target, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexCoord2dvARB((Chela.Graphics.GL2.TextureUnit)target, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Single s, Single t)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexCoord2fARB((Chela.Graphics.GL2.TextureUnit)target, (Single)s, (Single)t);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2fvARB((Chela.Graphics.GL2.TextureUnit)target, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2fvARB((Chela.Graphics.GL2.TextureUnit)target, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexCoord2fvARB((Chela.Graphics.GL2.TextureUnit)target, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Int32 s, Int32 t)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexCoord2iARB((Chela.Graphics.GL2.TextureUnit)target, (Int32)s, (Int32)t);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Int32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2ivARB((Chela.Graphics.GL2.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, ref Int32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2ivARB((Chela.Graphics.GL2.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexCoord2ivARB((Chela.Graphics.GL2.TextureUnit)target, (Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Int16 s, Int16 t)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexCoord2sARB((Chela.Graphics.GL2.TextureUnit)target, (Int16)s, (Int16)t);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2svARB((Chela.Graphics.GL2.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2svARB((Chela.Graphics.GL2.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexCoord2svARB((Chela.Graphics.GL2.TextureUnit)target, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Double s, Double t, Double r)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexCoord3dARB((Chela.Graphics.GL2.TextureUnit)target, (Double)s, (Double)t, (Double)r);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3dvARB((Chela.Graphics.GL2.TextureUnit)target, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3dvARB((Chela.Graphics.GL2.TextureUnit)target, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexCoord3dvARB((Chela.Graphics.GL2.TextureUnit)target, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Single s, Single t, Single r)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexCoord3fARB((Chela.Graphics.GL2.TextureUnit)target, (Single)s, (Single)t, (Single)r);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3fvARB((Chela.Graphics.GL2.TextureUnit)target, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3fvARB((Chela.Graphics.GL2.TextureUnit)target, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexCoord3fvARB((Chela.Graphics.GL2.TextureUnit)target, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Int32 s, Int32 t, Int32 r)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexCoord3iARB((Chela.Graphics.GL2.TextureUnit)target, (Int32)s, (Int32)t, (Int32)r);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Int32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3ivARB((Chela.Graphics.GL2.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, ref Int32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3ivARB((Chela.Graphics.GL2.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexCoord3ivARB((Chela.Graphics.GL2.TextureUnit)target, (Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Int16 s, Int16 t, Int16 r)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexCoord3sARB((Chela.Graphics.GL2.TextureUnit)target, (Int16)s, (Int16)t, (Int16)r);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3svARB((Chela.Graphics.GL2.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3svARB((Chela.Graphics.GL2.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexCoord3svARB((Chela.Graphics.GL2.TextureUnit)target, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Double s, Double t, Double r, Double q)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexCoord4dARB((Chela.Graphics.GL2.TextureUnit)target, (Double)s, (Double)t, (Double)r, (Double)q);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4dvARB((Chela.Graphics.GL2.TextureUnit)target, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4dvARB((Chela.Graphics.GL2.TextureUnit)target, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexCoord4dvARB((Chela.Graphics.GL2.TextureUnit)target, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Single s, Single t, Single r, Single q)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexCoord4fARB((Chela.Graphics.GL2.TextureUnit)target, (Single)s, (Single)t, (Single)r, (Single)q);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4fvARB((Chela.Graphics.GL2.TextureUnit)target, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4fvARB((Chela.Graphics.GL2.TextureUnit)target, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexCoord4fvARB((Chela.Graphics.GL2.TextureUnit)target, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Int32 s, Int32 t, Int32 r, Int32 q)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexCoord4iARB((Chela.Graphics.GL2.TextureUnit)target, (Int32)s, (Int32)t, (Int32)r, (Int32)q);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Int32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4ivARB((Chela.Graphics.GL2.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, ref Int32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4ivARB((Chela.Graphics.GL2.TextureUnit)target, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexCoord4ivARB((Chela.Graphics.GL2.TextureUnit)target, (Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Int16 s, Int16 t, Int16 r, Int16 q)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexCoord4sARB((Chela.Graphics.GL2.TextureUnit)target, (Int16)s, (Int16)t, (Int16)r, (Int16)q);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4svARB((Chela.Graphics.GL2.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4svARB((Chela.Graphics.GL2.TextureUnit)target, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexCoord4svARB((Chela.Graphics.GL2.TextureUnit)target, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultTransposeMatrix(Double[] m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glMultTransposeMatrixdARB((Double*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultTransposeMatrix(ref Double m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glMultTransposeMatrixdARB((Double*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultTransposeMatrix(Double* m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultTransposeMatrixdARB((Double*)m);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultTransposeMatrix(Single[] m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glMultTransposeMatrixfARB((Single*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultTransposeMatrix(ref Single m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glMultTransposeMatrixfARB((Single*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultTransposeMatrix(Single* m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultTransposeMatrixfARB((Single*)m);
                #if DEBUG
                }
                #endif
            }

            public static 
            void PointParameter(Chela.Graphics.GL2.ArbPointParameters pname, Single param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPointParameterfARB((Chela.Graphics.GL2.ArbPointParameters)pname, (Single)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PointParameter(Chela.Graphics.GL2.ArbPointParameters pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glPointParameterfvARB((Chela.Graphics.GL2.ArbPointParameters)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void PointParameter(Chela.Graphics.GL2.ArbPointParameters pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glPointParameterfvARB((Chela.Graphics.GL2.ArbPointParameters)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Double x, Double y, Double z, Double w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramEnvParameter4dARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Double x, Double y, Double z, Double w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramEnvParameter4dARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Double[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameter4dvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, ref Double @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameter4dvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramEnvParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Double* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramEnvParameter4dvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Double[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameter4dvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, ref Double @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameter4dvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramEnvParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Double* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramEnvParameter4dvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Single x, Single y, Single z, Single w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramEnvParameter4fARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Single x, Single y, Single z, Single w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramEnvParameter4fARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameter4fvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, ref Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameter4fvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramEnvParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramEnvParameter4fvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameter4fvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, ref Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameter4fvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramEnvParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramEnvParameter4fvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Double x, Double y, Double z, Double w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramLocalParameter4dARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Double x, Double y, Double z, Double w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramLocalParameter4dARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Double[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameter4dvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, ref Double @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameter4dvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramLocalParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Double* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramLocalParameter4dvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Double[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameter4dvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, ref Double @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameter4dvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramLocalParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Double* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramLocalParameter4dvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Single x, Single y, Single z, Single w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramLocalParameter4fARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Single x, Single y, Single z, Single w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramLocalParameter4fARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameter4fvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, ref Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameter4fvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramLocalParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramLocalParameter4fvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameter4fvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, ref Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameter4fvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramLocalParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramLocalParameter4fvARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameter(Int32 program, Chela.Graphics.GL2.ArbGeometryShader4 pname, Int32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramParameteriARB((UInt32)program, (Chela.Graphics.GL2.ArbGeometryShader4)pname, (Int32)value);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameter(UInt32 program, Chela.Graphics.GL2.ArbGeometryShader4 pname, Int32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramParameteriARB((UInt32)program, (Chela.Graphics.GL2.ArbGeometryShader4)pname, (Int32)value);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramString(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Chela.Graphics.GL2.ArbVertexProgram format, Int32 len, IntPtr @string)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramStringARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (Chela.Graphics.GL2.ArbVertexProgram)format, (Int32)len, (IntPtr)@string);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramString<T3>(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Chela.Graphics.GL2.ArbVertexProgram format, Int32 len, T3[] @string)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glProgramStringARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (Chela.Graphics.GL2.ArbVertexProgram)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramString<T3>(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Chela.Graphics.GL2.ArbVertexProgram format, Int32 len, T3[,] @string)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glProgramStringARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (Chela.Graphics.GL2.ArbVertexProgram)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramString<T3>(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Chela.Graphics.GL2.ArbVertexProgram format, Int32 len, T3[,,] @string)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glProgramStringARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (Chela.Graphics.GL2.ArbVertexProgram)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramString<T3>(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Chela.Graphics.GL2.ArbVertexProgram format, Int32 len, ref T3 @string)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glProgramStringARB((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (Chela.Graphics.GL2.ArbVertexProgram)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                        @string = (T3)@string_ptr.Target;
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SampleCoverage(Single value, bool invert)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSampleCoverageARB((Single)value, (bool)invert);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ShaderSource(Int32 shaderObj, Int32 count, String[] @string, ref Int32 length)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        StringHandle @string_ptr = StringHandle.Alloc(@string);
                        try
                        {
                            Delegates.glShaderSourceARB((UInt32)shaderObj, (Int32)count, @string_ptr.ArrayAddress, (Int32*)length_ptr);
                        }
                        finally
                        {
                            @string_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ShaderSource(Int32 shaderObj, Int32 count, String[] @string, Int32* length)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                StringHandle @string_ptr = StringHandle.Alloc(@string);
                try
                {
                    Delegates.glShaderSourceARB((UInt32)shaderObj, (Int32)count, @string_ptr.ArrayAddress, (Int32*)length);
                }
                finally
                {
                    @string_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ShaderSource(UInt32 shaderObj, Int32 count, String[] @string, ref Int32 length)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        StringHandle @string_ptr = StringHandle.Alloc(@string);
                        try
                        {
                            Delegates.glShaderSourceARB((UInt32)shaderObj, (Int32)count, @string_ptr.ArrayAddress, (Int32*)length_ptr);
                        }
                        finally
                        {
                            @string_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ShaderSource(UInt32 shaderObj, Int32 count, String[] @string, Int32* length)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                StringHandle @string_ptr = StringHandle.Alloc(@string);
                try
                {
                    Delegates.glShaderSourceARB((UInt32)shaderObj, (Int32)count, @string_ptr.ArrayAddress, (Int32*)length);
                }
                finally
                {
                    @string_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexBuffer(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.ArbTextureBufferObject internalformat, Int32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexBufferARB((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.ArbTextureBufferObject)internalformat, (UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexBuffer(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.ArbTextureBufferObject internalformat, UInt32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexBufferARB((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.ArbTextureBufferObject)internalformat, (UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform1(Int32 location, Single v0)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUniform1fARB((Int32)location, (Single)v0);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform1(Int32 location, Int32 count, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniform1fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform1(Int32 location, Int32 count, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniform1fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Uniform1(Int32 location, Int32 count, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glUniform1fvARB((Int32)location, (Int32)count, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform1(Int32 location, Int32 v0)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUniform1iARB((Int32)location, (Int32)v0);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform1(Int32 location, Int32 count, Int32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform1ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform1(Int32 location, Int32 count, ref Int32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glUniform1ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Uniform1(Int32 location, Int32 count, Int32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glUniform1ivARB((Int32)location, (Int32)count, (Int32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform2(Int32 location, Single v0, Single v1)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUniform2fARB((Int32)location, (Single)v0, (Single)v1);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform2(Int32 location, Int32 count, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniform2fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform2(Int32 location, Int32 count, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniform2fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Uniform2(Int32 location, Int32 count, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glUniform2fvARB((Int32)location, (Int32)count, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform2(Int32 location, Int32 v0, Int32 v1)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUniform2iARB((Int32)location, (Int32)v0, (Int32)v1);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform2(Int32 location, Int32 count, Int32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform2ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Uniform2(Int32 location, Int32 count, Int32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glUniform2ivARB((Int32)location, (Int32)count, (Int32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform3(Int32 location, Single v0, Single v1, Single v2)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUniform3fARB((Int32)location, (Single)v0, (Single)v1, (Single)v2);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform3(Int32 location, Int32 count, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniform3fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform3(Int32 location, Int32 count, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniform3fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Uniform3(Int32 location, Int32 count, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glUniform3fvARB((Int32)location, (Int32)count, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform3(Int32 location, Int32 v0, Int32 v1, Int32 v2)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUniform3iARB((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform3(Int32 location, Int32 count, Int32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform3ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform3(Int32 location, Int32 count, ref Int32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glUniform3ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Uniform3(Int32 location, Int32 count, Int32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glUniform3ivARB((Int32)location, (Int32)count, (Int32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform4(Int32 location, Single v0, Single v1, Single v2, Single v3)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUniform4fARB((Int32)location, (Single)v0, (Single)v1, (Single)v2, (Single)v3);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform4(Int32 location, Int32 count, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniform4fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform4(Int32 location, Int32 count, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniform4fvARB((Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Uniform4(Int32 location, Int32 count, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glUniform4fvARB((Int32)location, (Int32)count, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform4(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUniform4iARB((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2, (Int32)v3);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform4(Int32 location, Int32 count, Int32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform4ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform4(Int32 location, Int32 count, ref Int32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glUniform4ivARB((Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Uniform4(Int32 location, Int32 count, Int32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glUniform4ivARB((Int32)location, (Int32)count, (Int32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniformMatrix2fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void UniformMatrix2(Int32 location, Int32 count, bool transpose, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniformMatrix2fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glUniformMatrix2fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniformMatrix3fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void UniformMatrix3(Int32 location, Int32 count, bool transpose, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniformMatrix3fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glUniformMatrix3fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glUniformMatrix4fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void UniformMatrix4(Int32 location, Int32 count, bool transpose, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glUniformMatrix4fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glUniformMatrix4fvARB((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            bool UnmapBuffer(Chela.Graphics.GL2.BufferTargetArb target)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glUnmapBufferARB((Chela.Graphics.GL2.BufferTargetArb)target);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void UseProgramObject(Int32 programObj)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUseProgramObjectARB((UInt32)programObj);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void UseProgramObject(UInt32 programObj)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUseProgramObjectARB((UInt32)programObj);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ValidateProgram(Int32 programObj)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glValidateProgramARB((UInt32)programObj);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ValidateProgram(UInt32 programObj)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glValidateProgramARB((UInt32)programObj);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib1(Int32 index, Double x)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib1dARB((UInt32)index, (Double)x);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib1(UInt32 index, Double x)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib1dARB((UInt32)index, (Double)x);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib1(Int32 index, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib1dvARB((UInt32)index, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib1(UInt32 index, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib1dvARB((UInt32)index, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib1(Int32 index, Single x)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib1fARB((UInt32)index, (Single)x);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib1(UInt32 index, Single x)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib1fARB((UInt32)index, (Single)x);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib1(Int32 index, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib1fvARB((UInt32)index, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib1(UInt32 index, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib1fvARB((UInt32)index, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib1(Int32 index, Int16 x)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib1sARB((UInt32)index, (Int16)x);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib1(UInt32 index, Int16 x)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib1sARB((UInt32)index, (Int16)x);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib1(Int32 index, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib1svARB((UInt32)index, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib1(UInt32 index, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib1svARB((UInt32)index, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(Int32 index, Double x, Double y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib2dARB((UInt32)index, (Double)x, (Double)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(UInt32 index, Double x, Double y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib2dARB((UInt32)index, (Double)x, (Double)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(Int32 index, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(Int32 index, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib2(Int32 index, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(UInt32 index, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(UInt32 index, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib2(UInt32 index, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib2dvARB((UInt32)index, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(Int32 index, Single x, Single y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib2fARB((UInt32)index, (Single)x, (Single)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(UInt32 index, Single x, Single y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib2fARB((UInt32)index, (Single)x, (Single)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(Int32 index, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(Int32 index, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib2(Int32 index, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(UInt32 index, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(UInt32 index, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib2(UInt32 index, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib2fvARB((UInt32)index, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(Int32 index, Int16 x, Int16 y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib2sARB((UInt32)index, (Int16)x, (Int16)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(UInt32 index, Int16 x, Int16 y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib2sARB((UInt32)index, (Int16)x, (Int16)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(Int32 index, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(Int32 index, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib2(Int32 index, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(UInt32 index, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(UInt32 index, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib2(UInt32 index, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib2svARB((UInt32)index, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(Int32 index, Double x, Double y, Double z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib3dARB((UInt32)index, (Double)x, (Double)y, (Double)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(UInt32 index, Double x, Double y, Double z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib3dARB((UInt32)index, (Double)x, (Double)y, (Double)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(Int32 index, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(Int32 index, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib3(Int32 index, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(UInt32 index, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(UInt32 index, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib3(UInt32 index, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib3dvARB((UInt32)index, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(Int32 index, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib3fARB((UInt32)index, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(UInt32 index, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib3fARB((UInt32)index, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(Int32 index, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(Int32 index, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib3(Int32 index, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(UInt32 index, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(UInt32 index, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib3(UInt32 index, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib3fvARB((UInt32)index, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(Int32 index, Int16 x, Int16 y, Int16 z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib3sARB((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(UInt32 index, Int16 x, Int16 y, Int16 z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib3sARB((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(Int32 index, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(Int32 index, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib3(Int32 index, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(UInt32 index, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(UInt32 index, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib3(UInt32 index, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib3svARB((UInt32)index, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, SByte[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (SByte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4bvARB((UInt32)index, (SByte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, ref SByte v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (SByte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4bvARB((UInt32)index, (SByte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4(UInt32 index, SByte* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4bvARB((UInt32)index, (SByte*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, Double x, Double y, Double z, Double w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib4dARB((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, Double x, Double y, Double z, Double w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib4dARB((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4(Int32 index, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4(UInt32 index, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4dvARB((UInt32)index, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, Single x, Single y, Single z, Single w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib4fARB((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, Single x, Single y, Single z, Single w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib4fARB((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4(Int32 index, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4(UInt32 index, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4fvARB((UInt32)index, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, Int32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, ref Int32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4(Int32 index, Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, Int32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, ref Int32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4(UInt32 index, Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4ivARB((UInt32)index, (Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4N(UInt32 index, SByte[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (SByte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NbvARB((UInt32)index, (SByte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4N(UInt32 index, ref SByte v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (SByte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NbvARB((UInt32)index, (SByte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4N(UInt32 index, SByte* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4NbvARB((UInt32)index, (SByte*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4N(Int32 index, Int32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4N(Int32 index, ref Int32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4N(Int32 index, Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4N(UInt32 index, Int32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4N(UInt32 index, ref Int32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4N(UInt32 index, Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4NivARB((UInt32)index, (Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4N(Int32 index, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4N(Int32 index, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4N(Int32 index, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4N(UInt32 index, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4N(UInt32 index, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4N(UInt32 index, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4NsvARB((UInt32)index, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4N(Int32 index, Byte x, Byte y, Byte z, Byte w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib4NubARB((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4N(UInt32 index, Byte x, Byte y, Byte z, Byte w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib4NubARB((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4N(Int32 index, Byte[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4N(Int32 index, ref Byte v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4N(Int32 index, Byte* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4N(UInt32 index, Byte[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4N(UInt32 index, ref Byte v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4N(UInt32 index, Byte* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4NubvARB((UInt32)index, (Byte*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4N(UInt32 index, UInt32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NuivARB((UInt32)index, (UInt32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4N(UInt32 index, ref UInt32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NuivARB((UInt32)index, (UInt32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4N(UInt32 index, UInt32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4NuivARB((UInt32)index, (UInt32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4N(UInt32 index, UInt16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4NusvARB((UInt32)index, (UInt16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4N(UInt32 index, ref UInt16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4NusvARB((UInt32)index, (UInt16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4N(UInt32 index, UInt16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4NusvARB((UInt32)index, (UInt16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, Int16 x, Int16 y, Int16 z, Int16 w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib4sARB((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, Int16 x, Int16 y, Int16 z, Int16 w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib4sARB((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4(Int32 index, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4(UInt32 index, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4svARB((UInt32)index, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, Byte[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, ref Byte v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4(Int32 index, Byte* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, Byte[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, ref Byte v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4(UInt32 index, Byte* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4ubvARB((UInt32)index, (Byte*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, UInt32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4uivARB((UInt32)index, (UInt32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, ref UInt32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4uivARB((UInt32)index, (UInt32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4(UInt32 index, UInt32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4uivARB((UInt32)index, (UInt32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, UInt16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4usvARB((UInt32)index, (UInt16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, ref UInt16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4usvARB((UInt32)index, (UInt16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4(UInt32 index, UInt16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4usvARB((UInt32)index, (UInt16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribDivisor(Int32 index, Int32 divisor)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttribDivisorARB((UInt32)index, (UInt32)divisor);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribDivisor(UInt32 index, UInt32 divisor)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttribDivisorARB((UInt32)index, (UInt32)divisor);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribPointer(Int32 index, Int32 size, Chela.Graphics.GL2.VertexAttribPointerTypeArb type, bool normalized, Int32 stride, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribPointerTypeArb)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribPointer<T5>(Int32 index, Int32 size, Chela.Graphics.GL2.VertexAttribPointerTypeArb type, bool normalized, Int32 stride, T5[] pointer)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribPointerTypeArb)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribPointer<T5>(Int32 index, Int32 size, Chela.Graphics.GL2.VertexAttribPointerTypeArb type, bool normalized, Int32 stride, T5[,] pointer)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribPointerTypeArb)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribPointer<T5>(Int32 index, Int32 size, Chela.Graphics.GL2.VertexAttribPointerTypeArb type, bool normalized, Int32 stride, T5[,,] pointer)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribPointerTypeArb)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribPointer<T5>(Int32 index, Int32 size, Chela.Graphics.GL2.VertexAttribPointerTypeArb type, bool normalized, Int32 stride, ref T5 pointer)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribPointerTypeArb)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T5)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribPointer(UInt32 index, Int32 size, Chela.Graphics.GL2.VertexAttribPointerTypeArb type, bool normalized, Int32 stride, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribPointerTypeArb)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribPointer<T5>(UInt32 index, Int32 size, Chela.Graphics.GL2.VertexAttribPointerTypeArb type, bool normalized, Int32 stride, T5[] pointer)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribPointerTypeArb)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribPointer<T5>(UInt32 index, Int32 size, Chela.Graphics.GL2.VertexAttribPointerTypeArb type, bool normalized, Int32 stride, T5[,] pointer)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribPointerTypeArb)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribPointer<T5>(UInt32 index, Int32 size, Chela.Graphics.GL2.VertexAttribPointerTypeArb type, bool normalized, Int32 stride, T5[,,] pointer)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribPointerTypeArb)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribPointer<T5>(UInt32 index, Int32 size, Chela.Graphics.GL2.VertexAttribPointerTypeArb type, bool normalized, Int32 stride, ref T5 pointer)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointerARB((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribPointerTypeArb)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T5)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexBlend(Int32 count)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexBlendARB((Int32)count);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Weight(Int32 size, SByte[] weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (SByte* weights_ptr = weights)
                    {
                        Delegates.glWeightbvARB((Int32)size, (SByte*)weights_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Weight(Int32 size, ref SByte weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (SByte* weights_ptr = &weights)
                    {
                        Delegates.glWeightbvARB((Int32)size, (SByte*)weights_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Weight(Int32 size, SByte* weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWeightbvARB((Int32)size, (SByte*)weights);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Weight(Int32 size, Double[] weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* weights_ptr = weights)
                    {
                        Delegates.glWeightdvARB((Int32)size, (Double*)weights_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Weight(Int32 size, ref Double weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* weights_ptr = &weights)
                    {
                        Delegates.glWeightdvARB((Int32)size, (Double*)weights_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Weight(Int32 size, Double* weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWeightdvARB((Int32)size, (Double*)weights);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Weight(Int32 size, Single[] weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* weights_ptr = weights)
                    {
                        Delegates.glWeightfvARB((Int32)size, (Single*)weights_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Weight(Int32 size, ref Single weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* weights_ptr = &weights)
                    {
                        Delegates.glWeightfvARB((Int32)size, (Single*)weights_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Weight(Int32 size, Single* weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWeightfvARB((Int32)size, (Single*)weights);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Weight(Int32 size, Int32[] weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* weights_ptr = weights)
                    {
                        Delegates.glWeightivARB((Int32)size, (Int32*)weights_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Weight(Int32 size, ref Int32 weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* weights_ptr = &weights)
                    {
                        Delegates.glWeightivARB((Int32)size, (Int32*)weights_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Weight(Int32 size, Int32* weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWeightivARB((Int32)size, (Int32*)weights);
                #if DEBUG
                }
                #endif
            }

            public static 
            void WeightPointer(Int32 size, Chela.Graphics.GL2.ArbVertexBlend type, Int32 stride, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glWeightPointerARB((Int32)size, (Chela.Graphics.GL2.ArbVertexBlend)type, (Int32)stride, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WeightPointer<T3>(Int32 size, Chela.Graphics.GL2.ArbVertexBlend type, Int32 stride, T3[] pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glWeightPointerARB((Int32)size, (Chela.Graphics.GL2.ArbVertexBlend)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WeightPointer<T3>(Int32 size, Chela.Graphics.GL2.ArbVertexBlend type, Int32 stride, T3[,] pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glWeightPointerARB((Int32)size, (Chela.Graphics.GL2.ArbVertexBlend)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WeightPointer<T3>(Int32 size, Chela.Graphics.GL2.ArbVertexBlend type, Int32 stride, T3[,,] pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glWeightPointerARB((Int32)size, (Chela.Graphics.GL2.ArbVertexBlend)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WeightPointer<T3>(Int32 size, Chela.Graphics.GL2.ArbVertexBlend type, Int32 stride, ref T3 pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glWeightPointerARB((Int32)size, (Chela.Graphics.GL2.ArbVertexBlend)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T3)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Weight(Int32 size, Int16[] weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* weights_ptr = weights)
                    {
                        Delegates.glWeightsvARB((Int32)size, (Int16*)weights_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Weight(Int32 size, ref Int16 weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* weights_ptr = &weights)
                    {
                        Delegates.glWeightsvARB((Int32)size, (Int16*)weights_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Weight(Int32 size, Int16* weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWeightsvARB((Int32)size, (Int16*)weights);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Weight(Int32 size, Byte[] weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* weights_ptr = weights)
                    {
                        Delegates.glWeightubvARB((Int32)size, (Byte*)weights_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Weight(Int32 size, ref Byte weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* weights_ptr = &weights)
                    {
                        Delegates.glWeightubvARB((Int32)size, (Byte*)weights_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Weight(Int32 size, Byte* weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWeightubvARB((Int32)size, (Byte*)weights);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Weight(Int32 size, UInt32[] weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* weights_ptr = weights)
                    {
                        Delegates.glWeightuivARB((Int32)size, (UInt32*)weights_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Weight(Int32 size, ref UInt32 weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* weights_ptr = &weights)
                    {
                        Delegates.glWeightuivARB((Int32)size, (UInt32*)weights_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Weight(Int32 size, UInt32* weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWeightuivARB((Int32)size, (UInt32*)weights);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Weight(Int32 size, UInt16[] weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt16* weights_ptr = weights)
                    {
                        Delegates.glWeightusvARB((Int32)size, (UInt16*)weights_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Weight(Int32 size, ref UInt16 weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt16* weights_ptr = &weights)
                    {
                        Delegates.glWeightusvARB((Int32)size, (UInt16*)weights_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Weight(Int32 size, UInt16* weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWeightusvARB((Int32)size, (UInt16*)weights);
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(Double x, Double y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glWindowPos2dARB((Double)x, (Double)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glWindowPos2dvARB((Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glWindowPos2dvARB((Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void WindowPos2(Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWindowPos2dvARB((Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(Single x, Single y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glWindowPos2fARB((Single)x, (Single)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glWindowPos2fvARB((Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glWindowPos2fvARB((Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void WindowPos2(Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWindowPos2fvARB((Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(Int32 x, Int32 y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glWindowPos2iARB((Int32)x, (Int32)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(Int32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glWindowPos2ivARB((Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(ref Int32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glWindowPos2ivARB((Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void WindowPos2(Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWindowPos2ivARB((Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(Int16 x, Int16 y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glWindowPos2sARB((Int16)x, (Int16)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glWindowPos2svARB((Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glWindowPos2svARB((Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void WindowPos2(Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWindowPos2svARB((Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(Double x, Double y, Double z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glWindowPos3dARB((Double)x, (Double)y, (Double)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glWindowPos3dvARB((Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glWindowPos3dvARB((Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void WindowPos3(Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWindowPos3dvARB((Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glWindowPos3fARB((Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glWindowPos3fvARB((Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glWindowPos3fvARB((Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void WindowPos3(Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWindowPos3fvARB((Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(Int32 x, Int32 y, Int32 z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glWindowPos3iARB((Int32)x, (Int32)y, (Int32)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(Int32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glWindowPos3ivARB((Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(ref Int32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glWindowPos3ivARB((Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void WindowPos3(Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWindowPos3ivARB((Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(Int16 x, Int16 y, Int16 z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glWindowPos3sARB((Int16)x, (Int16)y, (Int16)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glWindowPos3svARB((Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glWindowPos3svARB((Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void WindowPos3(Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWindowPos3svARB((Int16*)v);
                #if DEBUG
                }
                #endif
            }

        }

        public static partial class Ati
        {
            public static 
            void AlphaFragmentOp1(Chela.Graphics.GL2.AtiFragmentShader op, Int32 dst, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glAlphaFragmentOp1ATI((Chela.Graphics.GL2.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void AlphaFragmentOp1(Chela.Graphics.GL2.AtiFragmentShader op, UInt32 dst, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glAlphaFragmentOp1ATI((Chela.Graphics.GL2.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void AlphaFragmentOp2(Chela.Graphics.GL2.AtiFragmentShader op, Int32 dst, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod, Int32 arg2, Int32 arg2Rep, Int32 arg2Mod)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glAlphaFragmentOp2ATI((Chela.Graphics.GL2.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void AlphaFragmentOp2(Chela.Graphics.GL2.AtiFragmentShader op, UInt32 dst, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod, UInt32 arg2, UInt32 arg2Rep, UInt32 arg2Mod)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glAlphaFragmentOp2ATI((Chela.Graphics.GL2.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void AlphaFragmentOp3(Chela.Graphics.GL2.AtiFragmentShader op, Int32 dst, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod, Int32 arg2, Int32 arg2Rep, Int32 arg2Mod, Int32 arg3, Int32 arg3Rep, Int32 arg3Mod)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glAlphaFragmentOp3ATI((Chela.Graphics.GL2.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod, (UInt32)arg3, (UInt32)arg3Rep, (UInt32)arg3Mod);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void AlphaFragmentOp3(Chela.Graphics.GL2.AtiFragmentShader op, UInt32 dst, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod, UInt32 arg2, UInt32 arg2Rep, UInt32 arg2Mod, UInt32 arg3, UInt32 arg3Rep, UInt32 arg3Mod)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glAlphaFragmentOp3ATI((Chela.Graphics.GL2.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod, (UInt32)arg3, (UInt32)arg3Rep, (UInt32)arg3Mod);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ArrayObject(Chela.Graphics.GL2.EnableCap array, Int32 size, Chela.Graphics.GL2.AtiVertexArrayObject type, Int32 stride, Int32 buffer, Int32 offset)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glArrayObjectATI((Chela.Graphics.GL2.EnableCap)array, (Int32)size, (Chela.Graphics.GL2.AtiVertexArrayObject)type, (Int32)stride, (UInt32)buffer, (UInt32)offset);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ArrayObject(Chela.Graphics.GL2.EnableCap array, Int32 size, Chela.Graphics.GL2.AtiVertexArrayObject type, Int32 stride, UInt32 buffer, UInt32 offset)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glArrayObjectATI((Chela.Graphics.GL2.EnableCap)array, (Int32)size, (Chela.Graphics.GL2.AtiVertexArrayObject)type, (Int32)stride, (UInt32)buffer, (UInt32)offset);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BeginFragmentShader()
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBeginFragmentShaderATI();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindFragmentShader(Int32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindFragmentShaderATI((UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindFragmentShader(UInt32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindFragmentShaderATI((UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ClientActiveVertexStream(Chela.Graphics.GL2.AtiVertexStreams stream)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glClientActiveVertexStreamATI((Chela.Graphics.GL2.AtiVertexStreams)stream);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorFragmentOp1(Chela.Graphics.GL2.AtiFragmentShader op, Int32 dst, Int32 dstMask, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glColorFragmentOp1ATI((Chela.Graphics.GL2.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorFragmentOp1(Chela.Graphics.GL2.AtiFragmentShader op, UInt32 dst, UInt32 dstMask, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glColorFragmentOp1ATI((Chela.Graphics.GL2.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorFragmentOp2(Chela.Graphics.GL2.AtiFragmentShader op, Int32 dst, Int32 dstMask, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod, Int32 arg2, Int32 arg2Rep, Int32 arg2Mod)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glColorFragmentOp2ATI((Chela.Graphics.GL2.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorFragmentOp2(Chela.Graphics.GL2.AtiFragmentShader op, UInt32 dst, UInt32 dstMask, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod, UInt32 arg2, UInt32 arg2Rep, UInt32 arg2Mod)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glColorFragmentOp2ATI((Chela.Graphics.GL2.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorFragmentOp3(Chela.Graphics.GL2.AtiFragmentShader op, Int32 dst, Int32 dstMask, Int32 dstMod, Int32 arg1, Int32 arg1Rep, Int32 arg1Mod, Int32 arg2, Int32 arg2Rep, Int32 arg2Mod, Int32 arg3, Int32 arg3Rep, Int32 arg3Mod)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glColorFragmentOp3ATI((Chela.Graphics.GL2.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod, (UInt32)arg3, (UInt32)arg3Rep, (UInt32)arg3Mod);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorFragmentOp3(Chela.Graphics.GL2.AtiFragmentShader op, UInt32 dst, UInt32 dstMask, UInt32 dstMod, UInt32 arg1, UInt32 arg1Rep, UInt32 arg1Mod, UInt32 arg2, UInt32 arg2Rep, UInt32 arg2Mod, UInt32 arg3, UInt32 arg3Rep, UInt32 arg3Mod)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glColorFragmentOp3ATI((Chela.Graphics.GL2.AtiFragmentShader)op, (UInt32)dst, (UInt32)dstMask, (UInt32)dstMod, (UInt32)arg1, (UInt32)arg1Rep, (UInt32)arg1Mod, (UInt32)arg2, (UInt32)arg2Rep, (UInt32)arg2Mod, (UInt32)arg3, (UInt32)arg3Rep, (UInt32)arg3Mod);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteFragmentShader(Int32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDeleteFragmentShaderATI((UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteFragmentShader(UInt32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDeleteFragmentShaderATI((UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawBuffers(Int32 n, Chela.Graphics.GL2.AtiDrawBuffers[] bufs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.GL2.AtiDrawBuffers* bufs_ptr = bufs)
                    {
                        Delegates.glDrawBuffersATI((Int32)n, (Chela.Graphics.GL2.AtiDrawBuffers*)bufs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawBuffers(Int32 n, ref Chela.Graphics.GL2.AtiDrawBuffers bufs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.GL2.AtiDrawBuffers* bufs_ptr = &bufs)
                    {
                        Delegates.glDrawBuffersATI((Int32)n, (Chela.Graphics.GL2.AtiDrawBuffers*)bufs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DrawBuffers(Int32 n, Chela.Graphics.GL2.AtiDrawBuffers* bufs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDrawBuffersATI((Int32)n, (Chela.Graphics.GL2.AtiDrawBuffers*)bufs);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawElementArray(Chela.Graphics.GL2.BeginMode mode, Int32 count)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDrawElementArrayATI((Chela.Graphics.GL2.BeginMode)mode, (Int32)count);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawRangeElementArray(Chela.Graphics.GL2.BeginMode mode, Int32 start, Int32 end, Int32 count)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDrawRangeElementArrayATI((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawRangeElementArray(Chela.Graphics.GL2.BeginMode mode, UInt32 start, UInt32 end, Int32 count)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDrawRangeElementArrayATI((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ElementPointer(Chela.Graphics.GL2.AtiElementArray type, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glElementPointerATI((Chela.Graphics.GL2.AtiElementArray)type, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ElementPointer<T1>(Chela.Graphics.GL2.AtiElementArray type, T1[] pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glElementPointerATI((Chela.Graphics.GL2.AtiElementArray)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ElementPointer<T1>(Chela.Graphics.GL2.AtiElementArray type, T1[,] pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glElementPointerATI((Chela.Graphics.GL2.AtiElementArray)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ElementPointer<T1>(Chela.Graphics.GL2.AtiElementArray type, T1[,,] pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glElementPointerATI((Chela.Graphics.GL2.AtiElementArray)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ElementPointer<T1>(Chela.Graphics.GL2.AtiElementArray type, ref T1 pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glElementPointerATI((Chela.Graphics.GL2.AtiElementArray)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T1)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EndFragmentShader()
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEndFragmentShaderATI();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FreeObjectBuffer(Int32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFreeObjectBufferATI((UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FreeObjectBuffer(UInt32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFreeObjectBufferATI((UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 GenFragmentShaders(Int32 range)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glGenFragmentShadersATI((UInt32)range);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 GenFragmentShaders(UInt32 range)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glGenFragmentShadersATI((UInt32)range);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetArrayObject(Chela.Graphics.GL2.EnableCap array, Chela.Graphics.GL2.AtiVertexArrayObject pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetArrayObjectfvATI((Chela.Graphics.GL2.EnableCap)array, (Chela.Graphics.GL2.AtiVertexArrayObject)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetArrayObject(Chela.Graphics.GL2.EnableCap array, Chela.Graphics.GL2.AtiVertexArrayObject pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetArrayObjectfvATI((Chela.Graphics.GL2.EnableCap)array, (Chela.Graphics.GL2.AtiVertexArrayObject)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetArrayObject(Chela.Graphics.GL2.EnableCap array, Chela.Graphics.GL2.AtiVertexArrayObject pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetArrayObjectivATI((Chela.Graphics.GL2.EnableCap)array, (Chela.Graphics.GL2.AtiVertexArrayObject)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetArrayObject(Chela.Graphics.GL2.EnableCap array, Chela.Graphics.GL2.AtiVertexArrayObject pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetArrayObjectivATI((Chela.Graphics.GL2.EnableCap)array, (Chela.Graphics.GL2.AtiVertexArrayObject)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetObjectBuffer(Int32 buffer, Chela.Graphics.GL2.AtiVertexArrayObject pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectBufferfvATI((UInt32)buffer, (Chela.Graphics.GL2.AtiVertexArrayObject)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetObjectBuffer(Int32 buffer, Chela.Graphics.GL2.AtiVertexArrayObject pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetObjectBufferfvATI((UInt32)buffer, (Chela.Graphics.GL2.AtiVertexArrayObject)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetObjectBuffer(UInt32 buffer, Chela.Graphics.GL2.AtiVertexArrayObject pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectBufferfvATI((UInt32)buffer, (Chela.Graphics.GL2.AtiVertexArrayObject)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetObjectBuffer(UInt32 buffer, Chela.Graphics.GL2.AtiVertexArrayObject pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetObjectBufferfvATI((UInt32)buffer, (Chela.Graphics.GL2.AtiVertexArrayObject)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetObjectBuffer(Int32 buffer, Chela.Graphics.GL2.AtiVertexArrayObject pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectBufferivATI((UInt32)buffer, (Chela.Graphics.GL2.AtiVertexArrayObject)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetObjectBuffer(Int32 buffer, Chela.Graphics.GL2.AtiVertexArrayObject pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetObjectBufferivATI((UInt32)buffer, (Chela.Graphics.GL2.AtiVertexArrayObject)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetObjectBuffer(UInt32 buffer, Chela.Graphics.GL2.AtiVertexArrayObject pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetObjectBufferivATI((UInt32)buffer, (Chela.Graphics.GL2.AtiVertexArrayObject)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetObjectBuffer(UInt32 buffer, Chela.Graphics.GL2.AtiVertexArrayObject pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetObjectBufferivATI((UInt32)buffer, (Chela.Graphics.GL2.AtiVertexArrayObject)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTexBumpParameter(Chela.Graphics.GL2.AtiEnvmapBumpmap pname, Single[] param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* param_ptr = param)
                    {
                        Delegates.glGetTexBumpParameterfvATI((Chela.Graphics.GL2.AtiEnvmapBumpmap)pname, (Single*)param_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTexBumpParameter(Chela.Graphics.GL2.AtiEnvmapBumpmap pname, out Single param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* param_ptr = &param)
                    {
                        Delegates.glGetTexBumpParameterfvATI((Chela.Graphics.GL2.AtiEnvmapBumpmap)pname, (Single*)param_ptr);
                        param = *param_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetTexBumpParameter(Chela.Graphics.GL2.AtiEnvmapBumpmap pname, Single* param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetTexBumpParameterfvATI((Chela.Graphics.GL2.AtiEnvmapBumpmap)pname, (Single*)param);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTexBumpParameter(Chela.Graphics.GL2.AtiEnvmapBumpmap pname, Int32[] param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* param_ptr = param)
                    {
                        Delegates.glGetTexBumpParameterivATI((Chela.Graphics.GL2.AtiEnvmapBumpmap)pname, (Int32*)param_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTexBumpParameter(Chela.Graphics.GL2.AtiEnvmapBumpmap pname, out Int32 param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* param_ptr = &param)
                    {
                        Delegates.glGetTexBumpParameterivATI((Chela.Graphics.GL2.AtiEnvmapBumpmap)pname, (Int32*)param_ptr);
                        param = *param_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetTexBumpParameter(Chela.Graphics.GL2.AtiEnvmapBumpmap pname, Int32* param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetTexBumpParameterivATI((Chela.Graphics.GL2.AtiEnvmapBumpmap)pname, (Int32*)param);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantArrayObject(Int32 id, Chela.Graphics.GL2.AtiVertexArrayObject pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetVariantArrayObjectfvATI((UInt32)id, (Chela.Graphics.GL2.AtiVertexArrayObject)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVariantArrayObject(Int32 id, Chela.Graphics.GL2.AtiVertexArrayObject pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVariantArrayObjectfvATI((UInt32)id, (Chela.Graphics.GL2.AtiVertexArrayObject)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantArrayObject(UInt32 id, Chela.Graphics.GL2.AtiVertexArrayObject pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetVariantArrayObjectfvATI((UInt32)id, (Chela.Graphics.GL2.AtiVertexArrayObject)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVariantArrayObject(UInt32 id, Chela.Graphics.GL2.AtiVertexArrayObject pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVariantArrayObjectfvATI((UInt32)id, (Chela.Graphics.GL2.AtiVertexArrayObject)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantArrayObject(Int32 id, Chela.Graphics.GL2.AtiVertexArrayObject pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVariantArrayObjectivATI((UInt32)id, (Chela.Graphics.GL2.AtiVertexArrayObject)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVariantArrayObject(Int32 id, Chela.Graphics.GL2.AtiVertexArrayObject pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVariantArrayObjectivATI((UInt32)id, (Chela.Graphics.GL2.AtiVertexArrayObject)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantArrayObject(UInt32 id, Chela.Graphics.GL2.AtiVertexArrayObject pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVariantArrayObjectivATI((UInt32)id, (Chela.Graphics.GL2.AtiVertexArrayObject)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVariantArrayObject(UInt32 id, Chela.Graphics.GL2.AtiVertexArrayObject pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVariantArrayObjectivATI((UInt32)id, (Chela.Graphics.GL2.AtiVertexArrayObject)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribArrayObject(Int32 index, Chela.Graphics.GL2.AtiVertexAttribArrayObject pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribArrayObjectfvATI((UInt32)index, (Chela.Graphics.GL2.AtiVertexAttribArrayObject)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribArrayObject(Int32 index, Chela.Graphics.GL2.AtiVertexAttribArrayObject pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribArrayObjectfvATI((UInt32)index, (Chela.Graphics.GL2.AtiVertexAttribArrayObject)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVertexAttribArrayObject(Int32 index, Chela.Graphics.GL2.AtiVertexAttribArrayObject pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVertexAttribArrayObjectfvATI((UInt32)index, (Chela.Graphics.GL2.AtiVertexAttribArrayObject)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribArrayObject(UInt32 index, Chela.Graphics.GL2.AtiVertexAttribArrayObject pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribArrayObjectfvATI((UInt32)index, (Chela.Graphics.GL2.AtiVertexAttribArrayObject)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribArrayObject(UInt32 index, Chela.Graphics.GL2.AtiVertexAttribArrayObject pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribArrayObjectfvATI((UInt32)index, (Chela.Graphics.GL2.AtiVertexAttribArrayObject)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVertexAttribArrayObject(UInt32 index, Chela.Graphics.GL2.AtiVertexAttribArrayObject pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVertexAttribArrayObjectfvATI((UInt32)index, (Chela.Graphics.GL2.AtiVertexAttribArrayObject)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribArrayObject(Int32 index, Chela.Graphics.GL2.AtiVertexAttribArrayObject pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribArrayObjectivATI((UInt32)index, (Chela.Graphics.GL2.AtiVertexAttribArrayObject)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribArrayObject(Int32 index, Chela.Graphics.GL2.AtiVertexAttribArrayObject pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribArrayObjectivATI((UInt32)index, (Chela.Graphics.GL2.AtiVertexAttribArrayObject)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVertexAttribArrayObject(Int32 index, Chela.Graphics.GL2.AtiVertexAttribArrayObject pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVertexAttribArrayObjectivATI((UInt32)index, (Chela.Graphics.GL2.AtiVertexAttribArrayObject)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribArrayObject(UInt32 index, Chela.Graphics.GL2.AtiVertexAttribArrayObject pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetVertexAttribArrayObjectivATI((UInt32)index, (Chela.Graphics.GL2.AtiVertexAttribArrayObject)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribArrayObject(UInt32 index, Chela.Graphics.GL2.AtiVertexAttribArrayObject pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribArrayObjectivATI((UInt32)index, (Chela.Graphics.GL2.AtiVertexAttribArrayObject)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVertexAttribArrayObject(UInt32 index, Chela.Graphics.GL2.AtiVertexAttribArrayObject pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVertexAttribArrayObjectivATI((UInt32)index, (Chela.Graphics.GL2.AtiVertexAttribArrayObject)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsObjectBuffer(Int32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsObjectBufferATI((UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsObjectBuffer(UInt32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsObjectBufferATI((UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe System.IntPtr MapObjectBuffer(Int32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                return Delegates.glMapObjectBufferATI((UInt32)buffer);
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe System.IntPtr MapObjectBuffer(UInt32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                return Delegates.glMapObjectBufferATI((UInt32)buffer);
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 NewObjectBuffer(Int32 size, IntPtr pointer, Chela.Graphics.GL2.AtiVertexArrayObject usage)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glNewObjectBufferATI((Int32)size, (IntPtr)pointer, (Chela.Graphics.GL2.AtiVertexArrayObject)usage);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 NewObjectBuffer<T1>(Int32 size, T1[] pointer, Chela.Graphics.GL2.AtiVertexArrayObject usage)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        return Delegates.glNewObjectBufferATI((Int32)size, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.AtiVertexArrayObject)usage);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 NewObjectBuffer<T1>(Int32 size, T1[,] pointer, Chela.Graphics.GL2.AtiVertexArrayObject usage)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        return Delegates.glNewObjectBufferATI((Int32)size, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.AtiVertexArrayObject)usage);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 NewObjectBuffer<T1>(Int32 size, T1[,,] pointer, Chela.Graphics.GL2.AtiVertexArrayObject usage)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        return Delegates.glNewObjectBufferATI((Int32)size, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.AtiVertexArrayObject)usage);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 NewObjectBuffer<T1>(Int32 size, ref T1 pointer, Chela.Graphics.GL2.AtiVertexArrayObject usage)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Int32 retval = Delegates.glNewObjectBufferATI((Int32)size, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.AtiVertexArrayObject)usage);
                        pointer = (T1)pointer_ptr.Target;
                        return retval;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Byte nx, Byte ny, Byte nz)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNormalStream3bATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (SByte)nx, (SByte)ny, (SByte)nz);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, SByte nx, SByte ny, SByte nz)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNormalStream3bATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (SByte)nx, (SByte)ny, (SByte)nz);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Byte[] coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* coords_ptr = coords)
                    {
                        Delegates.glNormalStream3bvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (SByte*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, ref Byte coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* coords_ptr = &coords)
                    {
                        Delegates.glNormalStream3bvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (SByte*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Byte* coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glNormalStream3bvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (SByte*)coords);
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, SByte[] coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (SByte* coords_ptr = coords)
                    {
                        Delegates.glNormalStream3bvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (SByte*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, ref SByte coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (SByte* coords_ptr = &coords)
                    {
                        Delegates.glNormalStream3bvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (SByte*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, SByte* coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glNormalStream3bvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (SByte*)coords);
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Double nx, Double ny, Double nz)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNormalStream3dATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Double)nx, (Double)ny, (Double)nz);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Double[] coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* coords_ptr = coords)
                    {
                        Delegates.glNormalStream3dvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Double*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, ref Double coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* coords_ptr = &coords)
                    {
                        Delegates.glNormalStream3dvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Double*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Double* coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glNormalStream3dvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Double*)coords);
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Single nx, Single ny, Single nz)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNormalStream3fATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Single)nx, (Single)ny, (Single)nz);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Single[] coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* coords_ptr = coords)
                    {
                        Delegates.glNormalStream3fvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Single*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, ref Single coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* coords_ptr = &coords)
                    {
                        Delegates.glNormalStream3fvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Single*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Single* coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glNormalStream3fvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Single*)coords);
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Int32 nx, Int32 ny, Int32 nz)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNormalStream3iATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int32)nx, (Int32)ny, (Int32)nz);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Int32[] coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* coords_ptr = coords)
                    {
                        Delegates.glNormalStream3ivATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int32*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, ref Int32 coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* coords_ptr = &coords)
                    {
                        Delegates.glNormalStream3ivATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int32*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Int32* coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glNormalStream3ivATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int32*)coords);
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Int16 nx, Int16 ny, Int16 nz)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNormalStream3sATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int16)nx, (Int16)ny, (Int16)nz);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Int16[] coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* coords_ptr = coords)
                    {
                        Delegates.glNormalStream3svATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int16*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, ref Int16 coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* coords_ptr = &coords)
                    {
                        Delegates.glNormalStream3svATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int16*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void NormalStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Int16* coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glNormalStream3svATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int16*)coords);
                #if DEBUG
                }
                #endif
            }

            public static 
            void PassTexCoor(Int32 dst, Int32 coord, Chela.Graphics.GL2.AtiFragmentShader swizzle)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPassTexCoordATI((UInt32)dst, (UInt32)coord, (Chela.Graphics.GL2.AtiFragmentShader)swizzle);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PassTexCoor(UInt32 dst, UInt32 coord, Chela.Graphics.GL2.AtiFragmentShader swizzle)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPassTexCoordATI((UInt32)dst, (UInt32)coord, (Chela.Graphics.GL2.AtiFragmentShader)swizzle);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PNTriangles(Chela.Graphics.GL2.AtiPnTriangles pname, Single param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPNTrianglesfATI((Chela.Graphics.GL2.AtiPnTriangles)pname, (Single)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PNTriangles(Chela.Graphics.GL2.AtiPnTriangles pname, Int32 param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPNTrianglesiATI((Chela.Graphics.GL2.AtiPnTriangles)pname, (Int32)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SampleMap(Int32 dst, Int32 interp, Chela.Graphics.GL2.AtiFragmentShader swizzle)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSampleMapATI((UInt32)dst, (UInt32)interp, (Chela.Graphics.GL2.AtiFragmentShader)swizzle);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SampleMap(UInt32 dst, UInt32 interp, Chela.Graphics.GL2.AtiFragmentShader swizzle)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSampleMapATI((UInt32)dst, (UInt32)interp, (Chela.Graphics.GL2.AtiFragmentShader)swizzle);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetFragmentShaderConstant(Int32 dst, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetFragmentShaderConstant(Int32 dst, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void SetFragmentShaderConstant(Int32 dst, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetFragmentShaderConstant(UInt32 dst, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetFragmentShaderConstant(UInt32 dst, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void SetFragmentShaderConstant(UInt32 dst, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glSetFragmentShaderConstantATI((UInt32)dst, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void StencilFuncSeparate(Chela.Graphics.GL2.StencilFunction frontfunc, Chela.Graphics.GL2.StencilFunction backfunc, Int32 @ref, Int32 mask)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glStencilFuncSeparateATI((Chela.Graphics.GL2.StencilFunction)frontfunc, (Chela.Graphics.GL2.StencilFunction)backfunc, (Int32)@ref, (UInt32)mask);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void StencilFuncSeparate(Chela.Graphics.GL2.StencilFunction frontfunc, Chela.Graphics.GL2.StencilFunction backfunc, Int32 @ref, UInt32 mask)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glStencilFuncSeparateATI((Chela.Graphics.GL2.StencilFunction)frontfunc, (Chela.Graphics.GL2.StencilFunction)backfunc, (Int32)@ref, (UInt32)mask);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void StencilOpSeparate(Chela.Graphics.GL2.AtiSeparateStencil face, Chela.Graphics.GL2.StencilOp sfail, Chela.Graphics.GL2.StencilOp dpfail, Chela.Graphics.GL2.StencilOp dppass)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glStencilOpSeparateATI((Chela.Graphics.GL2.AtiSeparateStencil)face, (Chela.Graphics.GL2.StencilOp)sfail, (Chela.Graphics.GL2.StencilOp)dpfail, (Chela.Graphics.GL2.StencilOp)dppass);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexBumpParameter(Chela.Graphics.GL2.AtiEnvmapBumpmap pname, Single[] param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* param_ptr = param)
                    {
                        Delegates.glTexBumpParameterfvATI((Chela.Graphics.GL2.AtiEnvmapBumpmap)pname, (Single*)param_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexBumpParameter(Chela.Graphics.GL2.AtiEnvmapBumpmap pname, ref Single param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* param_ptr = &param)
                    {
                        Delegates.glTexBumpParameterfvATI((Chela.Graphics.GL2.AtiEnvmapBumpmap)pname, (Single*)param_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TexBumpParameter(Chela.Graphics.GL2.AtiEnvmapBumpmap pname, Single* param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTexBumpParameterfvATI((Chela.Graphics.GL2.AtiEnvmapBumpmap)pname, (Single*)param);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexBumpParameter(Chela.Graphics.GL2.AtiEnvmapBumpmap pname, Int32[] param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* param_ptr = param)
                    {
                        Delegates.glTexBumpParameterivATI((Chela.Graphics.GL2.AtiEnvmapBumpmap)pname, (Int32*)param_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexBumpParameter(Chela.Graphics.GL2.AtiEnvmapBumpmap pname, ref Int32 param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* param_ptr = &param)
                    {
                        Delegates.glTexBumpParameterivATI((Chela.Graphics.GL2.AtiEnvmapBumpmap)pname, (Int32*)param_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TexBumpParameter(Chela.Graphics.GL2.AtiEnvmapBumpmap pname, Int32* param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTexBumpParameterivATI((Chela.Graphics.GL2.AtiEnvmapBumpmap)pname, (Int32*)param);
                #if DEBUG
                }
                #endif
            }

            public static 
            void UnmapObjectBuffer(Int32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUnmapObjectBufferATI((UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void UnmapObjectBuffer(UInt32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUnmapObjectBufferATI((UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void UpdateObjectBuffer(Int32 buffer, Int32 offset, Int32 size, IntPtr pointer, Chela.Graphics.GL2.AtiVertexArrayObject preserve)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUpdateObjectBufferATI((UInt32)buffer, (UInt32)offset, (Int32)size, (IntPtr)pointer, (Chela.Graphics.GL2.AtiVertexArrayObject)preserve);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void UpdateObjectBuffer<T3>(Int32 buffer, Int32 offset, Int32 size, T3[] pointer, Chela.Graphics.GL2.AtiVertexArrayObject preserve)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glUpdateObjectBufferATI((UInt32)buffer, (UInt32)offset, (Int32)size, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.AtiVertexArrayObject)preserve);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void UpdateObjectBuffer<T3>(Int32 buffer, Int32 offset, Int32 size, T3[,] pointer, Chela.Graphics.GL2.AtiVertexArrayObject preserve)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glUpdateObjectBufferATI((UInt32)buffer, (UInt32)offset, (Int32)size, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.AtiVertexArrayObject)preserve);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void UpdateObjectBuffer<T3>(Int32 buffer, Int32 offset, Int32 size, T3[,,] pointer, Chela.Graphics.GL2.AtiVertexArrayObject preserve)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glUpdateObjectBufferATI((UInt32)buffer, (UInt32)offset, (Int32)size, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.AtiVertexArrayObject)preserve);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void UpdateObjectBuffer<T3>(Int32 buffer, Int32 offset, Int32 size, ref T3 pointer, Chela.Graphics.GL2.AtiVertexArrayObject preserve)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glUpdateObjectBufferATI((UInt32)buffer, (UInt32)offset, (Int32)size, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.AtiVertexArrayObject)preserve);
                        pointer = (T3)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void UpdateObjectBuffer(UInt32 buffer, UInt32 offset, Int32 size, IntPtr pointer, Chela.Graphics.GL2.AtiVertexArrayObject preserve)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUpdateObjectBufferATI((UInt32)buffer, (UInt32)offset, (Int32)size, (IntPtr)pointer, (Chela.Graphics.GL2.AtiVertexArrayObject)preserve);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void UpdateObjectBuffer<T3>(UInt32 buffer, UInt32 offset, Int32 size, T3[] pointer, Chela.Graphics.GL2.AtiVertexArrayObject preserve)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glUpdateObjectBufferATI((UInt32)buffer, (UInt32)offset, (Int32)size, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.AtiVertexArrayObject)preserve);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void UpdateObjectBuffer<T3>(UInt32 buffer, UInt32 offset, Int32 size, T3[,] pointer, Chela.Graphics.GL2.AtiVertexArrayObject preserve)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glUpdateObjectBufferATI((UInt32)buffer, (UInt32)offset, (Int32)size, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.AtiVertexArrayObject)preserve);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void UpdateObjectBuffer<T3>(UInt32 buffer, UInt32 offset, Int32 size, T3[,,] pointer, Chela.Graphics.GL2.AtiVertexArrayObject preserve)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glUpdateObjectBufferATI((UInt32)buffer, (UInt32)offset, (Int32)size, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.AtiVertexArrayObject)preserve);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void UpdateObjectBuffer<T3>(UInt32 buffer, UInt32 offset, Int32 size, ref T3 pointer, Chela.Graphics.GL2.AtiVertexArrayObject preserve)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glUpdateObjectBufferATI((UInt32)buffer, (UInt32)offset, (Int32)size, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.AtiVertexArrayObject)preserve);
                        pointer = (T3)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VariantArrayObject(Int32 id, Chela.Graphics.GL2.AtiVertexArrayObject type, Int32 stride, Int32 buffer, Int32 offset)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVariantArrayObjectATI((UInt32)id, (Chela.Graphics.GL2.AtiVertexArrayObject)type, (Int32)stride, (UInt32)buffer, (UInt32)offset);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VariantArrayObject(UInt32 id, Chela.Graphics.GL2.AtiVertexArrayObject type, Int32 stride, UInt32 buffer, UInt32 offset)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVariantArrayObjectATI((UInt32)id, (Chela.Graphics.GL2.AtiVertexArrayObject)type, (Int32)stride, (UInt32)buffer, (UInt32)offset);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribArrayObject(Int32 index, Int32 size, Chela.Graphics.GL2.AtiVertexAttribArrayObject type, bool normalized, Int32 stride, Int32 buffer, Int32 offset)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttribArrayObjectATI((UInt32)index, (Int32)size, (Chela.Graphics.GL2.AtiVertexAttribArrayObject)type, (bool)normalized, (Int32)stride, (UInt32)buffer, (UInt32)offset);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribArrayObject(UInt32 index, Int32 size, Chela.Graphics.GL2.AtiVertexAttribArrayObject type, bool normalized, Int32 stride, UInt32 buffer, UInt32 offset)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttribArrayObjectATI((UInt32)index, (Int32)size, (Chela.Graphics.GL2.AtiVertexAttribArrayObject)type, (bool)normalized, (Int32)stride, (UInt32)buffer, (UInt32)offset);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexBlendEnv(Chela.Graphics.GL2.AtiVertexStreams pname, Single param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexBlendEnvfATI((Chela.Graphics.GL2.AtiVertexStreams)pname, (Single)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexBlendEnv(Chela.Graphics.GL2.AtiVertexStreams pname, Int32 param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexBlendEnviATI((Chela.Graphics.GL2.AtiVertexStreams)pname, (Int32)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream1(Chela.Graphics.GL2.AtiVertexStreams stream, Double x)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexStream1dATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Double)x);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexStream1(Chela.Graphics.GL2.AtiVertexStreams stream, Double* coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexStream1dvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Double*)coords);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream1(Chela.Graphics.GL2.AtiVertexStreams stream, Single x)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexStream1fATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Single)x);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexStream1(Chela.Graphics.GL2.AtiVertexStreams stream, Single* coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexStream1fvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Single*)coords);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream1(Chela.Graphics.GL2.AtiVertexStreams stream, Int32 x)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexStream1iATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int32)x);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexStream1(Chela.Graphics.GL2.AtiVertexStreams stream, Int32* coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexStream1ivATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int32*)coords);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream1(Chela.Graphics.GL2.AtiVertexStreams stream, Int16 x)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexStream1sATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int16)x);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexStream1(Chela.Graphics.GL2.AtiVertexStreams stream, Int16* coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexStream1svATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int16*)coords);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream2(Chela.Graphics.GL2.AtiVertexStreams stream, Double x, Double y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexStream2dATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Double)x, (Double)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream2(Chela.Graphics.GL2.AtiVertexStreams stream, Double[] coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* coords_ptr = coords)
                    {
                        Delegates.glVertexStream2dvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Double*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream2(Chela.Graphics.GL2.AtiVertexStreams stream, ref Double coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream2dvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Double*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexStream2(Chela.Graphics.GL2.AtiVertexStreams stream, Double* coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexStream2dvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Double*)coords);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream2(Chela.Graphics.GL2.AtiVertexStreams stream, Single x, Single y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexStream2fATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Single)x, (Single)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream2(Chela.Graphics.GL2.AtiVertexStreams stream, Single[] coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* coords_ptr = coords)
                    {
                        Delegates.glVertexStream2fvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Single*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream2(Chela.Graphics.GL2.AtiVertexStreams stream, ref Single coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream2fvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Single*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexStream2(Chela.Graphics.GL2.AtiVertexStreams stream, Single* coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexStream2fvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Single*)coords);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream2(Chela.Graphics.GL2.AtiVertexStreams stream, Int32 x, Int32 y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexStream2iATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int32)x, (Int32)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream2(Chela.Graphics.GL2.AtiVertexStreams stream, Int32[] coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* coords_ptr = coords)
                    {
                        Delegates.glVertexStream2ivATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int32*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream2(Chela.Graphics.GL2.AtiVertexStreams stream, ref Int32 coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream2ivATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int32*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexStream2(Chela.Graphics.GL2.AtiVertexStreams stream, Int32* coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexStream2ivATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int32*)coords);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream2(Chela.Graphics.GL2.AtiVertexStreams stream, Int16 x, Int16 y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexStream2sATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int16)x, (Int16)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream2(Chela.Graphics.GL2.AtiVertexStreams stream, Int16[] coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* coords_ptr = coords)
                    {
                        Delegates.glVertexStream2svATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int16*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream2(Chela.Graphics.GL2.AtiVertexStreams stream, ref Int16 coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream2svATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int16*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexStream2(Chela.Graphics.GL2.AtiVertexStreams stream, Int16* coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexStream2svATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int16*)coords);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Double x, Double y, Double z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexStream3dATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Double)x, (Double)y, (Double)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Double[] coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* coords_ptr = coords)
                    {
                        Delegates.glVertexStream3dvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Double*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream3(Chela.Graphics.GL2.AtiVertexStreams stream, ref Double coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream3dvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Double*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Double* coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexStream3dvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Double*)coords);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexStream3fATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Single[] coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* coords_ptr = coords)
                    {
                        Delegates.glVertexStream3fvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Single*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream3(Chela.Graphics.GL2.AtiVertexStreams stream, ref Single coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream3fvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Single*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Single* coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexStream3fvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Single*)coords);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Int32 x, Int32 y, Int32 z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexStream3iATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int32)x, (Int32)y, (Int32)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Int32[] coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* coords_ptr = coords)
                    {
                        Delegates.glVertexStream3ivATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int32*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream3(Chela.Graphics.GL2.AtiVertexStreams stream, ref Int32 coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream3ivATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int32*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Int32* coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexStream3ivATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int32*)coords);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Int16 x, Int16 y, Int16 z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexStream3sATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int16)x, (Int16)y, (Int16)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Int16[] coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* coords_ptr = coords)
                    {
                        Delegates.glVertexStream3svATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int16*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream3(Chela.Graphics.GL2.AtiVertexStreams stream, ref Int16 coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream3svATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int16*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexStream3(Chela.Graphics.GL2.AtiVertexStreams stream, Int16* coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexStream3svATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int16*)coords);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream4(Chela.Graphics.GL2.AtiVertexStreams stream, Double x, Double y, Double z, Double w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexStream4dATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Double)x, (Double)y, (Double)z, (Double)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream4(Chela.Graphics.GL2.AtiVertexStreams stream, Double[] coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* coords_ptr = coords)
                    {
                        Delegates.glVertexStream4dvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Double*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream4(Chela.Graphics.GL2.AtiVertexStreams stream, ref Double coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream4dvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Double*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexStream4(Chela.Graphics.GL2.AtiVertexStreams stream, Double* coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexStream4dvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Double*)coords);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream4(Chela.Graphics.GL2.AtiVertexStreams stream, Single x, Single y, Single z, Single w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexStream4fATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Single)x, (Single)y, (Single)z, (Single)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream4(Chela.Graphics.GL2.AtiVertexStreams stream, Single[] coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* coords_ptr = coords)
                    {
                        Delegates.glVertexStream4fvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Single*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream4(Chela.Graphics.GL2.AtiVertexStreams stream, ref Single coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream4fvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Single*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexStream4(Chela.Graphics.GL2.AtiVertexStreams stream, Single* coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexStream4fvATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Single*)coords);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream4(Chela.Graphics.GL2.AtiVertexStreams stream, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexStream4iATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream4(Chela.Graphics.GL2.AtiVertexStreams stream, Int32[] coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* coords_ptr = coords)
                    {
                        Delegates.glVertexStream4ivATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int32*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream4(Chela.Graphics.GL2.AtiVertexStreams stream, ref Int32 coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream4ivATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int32*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexStream4(Chela.Graphics.GL2.AtiVertexStreams stream, Int32* coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexStream4ivATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int32*)coords);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream4(Chela.Graphics.GL2.AtiVertexStreams stream, Int16 x, Int16 y, Int16 z, Int16 w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexStream4sATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream4(Chela.Graphics.GL2.AtiVertexStreams stream, Int16[] coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* coords_ptr = coords)
                    {
                        Delegates.glVertexStream4svATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int16*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexStream4(Chela.Graphics.GL2.AtiVertexStreams stream, ref Int16 coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* coords_ptr = &coords)
                    {
                        Delegates.glVertexStream4svATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int16*)coords_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexStream4(Chela.Graphics.GL2.AtiVertexStreams stream, Int16* coords)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexStream4svATI((Chela.Graphics.GL2.AtiVertexStreams)stream, (Int16*)coords);
                #if DEBUG
                }
                #endif
            }

        }

        public static 
        void Accum(Chela.Graphics.GL2.AccumOp op, Single value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glAccum((Chela.Graphics.GL2.AccumOp)op, (Single)value);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ActiveTexture(Chela.Graphics.GL2.TextureUnit texture)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glActiveTexture((Chela.Graphics.GL2.TextureUnit)texture);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void AlphaFunc(Chela.Graphics.GL2.AlphaFunction func, Single @ref)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glAlphaFunc((Chela.Graphics.GL2.AlphaFunction)func, (Single)@ref);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool AreTexturesResident(Int32 n, Int32[] textures, bool[] residences)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* textures_ptr = textures)
                fixed (bool* residences_ptr = residences)
                {
                    return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool AreTexturesResident(Int32 n, ref Int32 textures, out bool residences)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* textures_ptr = &textures)
                fixed (bool* residences_ptr = &residences)
                {
                    bool retval = Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                    residences = *residences_ptr;
                    return retval;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe bool AreTexturesResident(Int32 n, Int32* textures, bool* residences)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures, (bool*)residences);
            #if DEBUG
            }
            #endif
        }

        public static 
        bool AreTexturesResident(Int32 n, UInt32[] textures, bool[] residences)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* textures_ptr = textures)
                fixed (bool* residences_ptr = residences)
                {
                    return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool AreTexturesResident(Int32 n, ref UInt32 textures, out bool residences)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* textures_ptr = &textures)
                fixed (bool* residences_ptr = &residences)
                {
                    bool retval = Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                    residences = *residences_ptr;
                    return retval;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe bool AreTexturesResident(Int32 n, UInt32* textures, bool* residences)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            return Delegates.glAreTexturesResident((Int32)n, (UInt32*)textures, (bool*)residences);
            #if DEBUG
            }
            #endif
        }

        public static 
        void ArrayElement(Int32 i)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glArrayElement((Int32)i);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void AttachShader(Int32 program, Int32 shader)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glAttachShader((UInt32)program, (UInt32)shader);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void AttachShader(UInt32 program, UInt32 shader)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glAttachShader((UInt32)program, (UInt32)shader);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Begin(Chela.Graphics.GL2.BeginMode mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            GraphicsContext.CurrentContext.ErrorChecking = false;
            #endif
            unsafe
            {
                Delegates.glBegin((Chela.Graphics.GL2.BeginMode)mode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BeginConditionalRender(Int32 id, Chela.Graphics.GL2.ConditionalRenderType mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBeginConditionalRender((UInt32)id, (Chela.Graphics.GL2.ConditionalRenderType)mode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BeginConditionalRender(UInt32 id, Chela.Graphics.GL2.ConditionalRenderType mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBeginConditionalRender((UInt32)id, (Chela.Graphics.GL2.ConditionalRenderType)mode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BeginQuery(Chela.Graphics.GL2.QueryTarget target, Int32 id)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBeginQuery((Chela.Graphics.GL2.QueryTarget)target, (UInt32)id);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BeginQuery(Chela.Graphics.GL2.QueryTarget target, UInt32 id)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBeginQuery((Chela.Graphics.GL2.QueryTarget)target, (UInt32)id);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BeginTransformFeedback(Chela.Graphics.GL2.BeginFeedbackMode primitiveMode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBeginTransformFeedback((Chela.Graphics.GL2.BeginFeedbackMode)primitiveMode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindAttribLocation(Int32 program, Int32 index, String name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    Delegates.glBindAttribLocation((UInt32)program, (UInt32)index, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindAttribLocation(UInt32 program, UInt32 index, String name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    Delegates.glBindAttribLocation((UInt32)program, (UInt32)index, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindBuffer(Chela.Graphics.GL2.BufferTarget target, Int32 buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBindBuffer((Chela.Graphics.GL2.BufferTarget)target, (UInt32)buffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindBuffer(Chela.Graphics.GL2.BufferTarget target, UInt32 buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBindBuffer((Chela.Graphics.GL2.BufferTarget)target, (UInt32)buffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindBufferBase(Chela.Graphics.GL2.BufferTarget target, Int32 index, Int32 buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBindBufferBase((Chela.Graphics.GL2.BufferTarget)target, (UInt32)index, (UInt32)buffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindBufferBase(Chela.Graphics.GL2.BufferTarget target, UInt32 index, UInt32 buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBindBufferBase((Chela.Graphics.GL2.BufferTarget)target, (UInt32)index, (UInt32)buffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindBufferRange(Chela.Graphics.GL2.BufferTarget target, Int32 index, Int32 buffer, IntPtr offset, IntPtr size)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBindBufferRange((Chela.Graphics.GL2.BufferTarget)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindBufferRange(Chela.Graphics.GL2.BufferTarget target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBindBufferRange((Chela.Graphics.GL2.BufferTarget)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindFragDataLocation(Int32 program, Int32 color, String name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    Delegates.glBindFragDataLocation((UInt32)program, (UInt32)color, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindFragDataLocation(UInt32 program, UInt32 color, String name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    Delegates.glBindFragDataLocation((UInt32)program, (UInt32)color, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindFramebuffer(Chela.Graphics.GL2.FramebufferTarget target, Int32 framebuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBindFramebuffer((Chela.Graphics.GL2.FramebufferTarget)target, (UInt32)framebuffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindFramebuffer(Chela.Graphics.GL2.FramebufferTarget target, UInt32 framebuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBindFramebuffer((Chela.Graphics.GL2.FramebufferTarget)target, (UInt32)framebuffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindRenderbuffer(Chela.Graphics.GL2.RenderbufferTarget target, Int32 renderbuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBindRenderbuffer((Chela.Graphics.GL2.RenderbufferTarget)target, (UInt32)renderbuffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindRenderbuffer(Chela.Graphics.GL2.RenderbufferTarget target, UInt32 renderbuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBindRenderbuffer((Chela.Graphics.GL2.RenderbufferTarget)target, (UInt32)renderbuffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindTexture(Chela.Graphics.GL2.TextureTarget target, Int32 texture)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBindTexture((Chela.Graphics.GL2.TextureTarget)target, (UInt32)texture);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindTexture(Chela.Graphics.GL2.TextureTarget target, UInt32 texture)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBindTexture((Chela.Graphics.GL2.TextureTarget)target, (UInt32)texture);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindVertexArray(Int32 array)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBindVertexArray((UInt32)array);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindVertexArray(UInt32 array)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBindVertexArray((UInt32)array);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Bitmap(Int32 width, Int32 height, Single xorig, Single yorig, Single xmove, Single ymove, Byte[] bitmap)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* bitmap_ptr = bitmap)
                {
                    Delegates.glBitmap((Int32)width, (Int32)height, (Single)xorig, (Single)yorig, (Single)xmove, (Single)ymove, (Byte*)bitmap_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Bitmap(Int32 width, Int32 height, Single xorig, Single yorig, Single xmove, Single ymove, ref Byte bitmap)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* bitmap_ptr = &bitmap)
                {
                    Delegates.glBitmap((Int32)width, (Int32)height, (Single)xorig, (Single)yorig, (Single)xmove, (Single)ymove, (Byte*)bitmap_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Bitmap(Int32 width, Int32 height, Single xorig, Single yorig, Single xmove, Single ymove, Byte* bitmap)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glBitmap((Int32)width, (Int32)height, (Single)xorig, (Single)yorig, (Single)xmove, (Single)ymove, (Byte*)bitmap);
            #if DEBUG
            }
            #endif
        }

        public static 
        void BlendColor(Single red, Single green, Single blue, Single alpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBlendColor((Single)red, (Single)green, (Single)blue, (Single)alpha);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BlendEquation(Chela.Graphics.GL2.BlendEquationMode mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBlendEquation((Chela.Graphics.GL2.BlendEquationMode)mode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BlendEquation(Int32 buf, Chela.Graphics.GL2.ArbDrawBuffersBlend mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBlendEquationi((UInt32)buf, (Chela.Graphics.GL2.ArbDrawBuffersBlend)mode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BlendEquation(UInt32 buf, Chela.Graphics.GL2.ArbDrawBuffersBlend mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBlendEquationi((UInt32)buf, (Chela.Graphics.GL2.ArbDrawBuffersBlend)mode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BlendEquationSeparate(Chela.Graphics.GL2.BlendEquationMode modeRGB, Chela.Graphics.GL2.BlendEquationMode modeAlpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBlendEquationSeparate((Chela.Graphics.GL2.BlendEquationMode)modeRGB, (Chela.Graphics.GL2.BlendEquationMode)modeAlpha);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BlendEquationSeparate(Int32 buf, Chela.Graphics.GL2.BlendEquationMode modeRGB, Chela.Graphics.GL2.BlendEquationMode modeAlpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBlendEquationSeparatei((UInt32)buf, (Chela.Graphics.GL2.BlendEquationMode)modeRGB, (Chela.Graphics.GL2.BlendEquationMode)modeAlpha);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BlendEquationSeparate(UInt32 buf, Chela.Graphics.GL2.BlendEquationMode modeRGB, Chela.Graphics.GL2.BlendEquationMode modeAlpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBlendEquationSeparatei((UInt32)buf, (Chela.Graphics.GL2.BlendEquationMode)modeRGB, (Chela.Graphics.GL2.BlendEquationMode)modeAlpha);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BlendFunc(Chela.Graphics.GL2.BlendingFactorSrc sfactor, Chela.Graphics.GL2.BlendingFactorDest dfactor)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBlendFunc((Chela.Graphics.GL2.BlendingFactorSrc)sfactor, (Chela.Graphics.GL2.BlendingFactorDest)dfactor);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BlendFunc(Int32 buf, Chela.Graphics.GL2.ArbDrawBuffersBlend src, Chela.Graphics.GL2.ArbDrawBuffersBlend dst)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBlendFunci((UInt32)buf, (Chela.Graphics.GL2.ArbDrawBuffersBlend)src, (Chela.Graphics.GL2.ArbDrawBuffersBlend)dst);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BlendFunc(UInt32 buf, Chela.Graphics.GL2.ArbDrawBuffersBlend src, Chela.Graphics.GL2.ArbDrawBuffersBlend dst)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBlendFunci((UInt32)buf, (Chela.Graphics.GL2.ArbDrawBuffersBlend)src, (Chela.Graphics.GL2.ArbDrawBuffersBlend)dst);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BlendFuncSeparate(Chela.Graphics.GL2.BlendingFactorSrc sfactorRGB, Chela.Graphics.GL2.BlendingFactorDest dfactorRGB, Chela.Graphics.GL2.BlendingFactorSrc sfactorAlpha, Chela.Graphics.GL2.BlendingFactorDest dfactorAlpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBlendFuncSeparate((Chela.Graphics.GL2.BlendingFactorSrc)sfactorRGB, (Chela.Graphics.GL2.BlendingFactorDest)dfactorRGB, (Chela.Graphics.GL2.BlendingFactorSrc)sfactorAlpha, (Chela.Graphics.GL2.BlendingFactorDest)dfactorAlpha);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BlendFuncSeparate(Int32 buf, Chela.Graphics.GL2.ArbDrawBuffersBlend srcRGB, Chela.Graphics.GL2.ArbDrawBuffersBlend dstRGB, Chela.Graphics.GL2.ArbDrawBuffersBlend srcAlpha, Chela.Graphics.GL2.ArbDrawBuffersBlend dstAlpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBlendFuncSeparatei((UInt32)buf, (Chela.Graphics.GL2.ArbDrawBuffersBlend)srcRGB, (Chela.Graphics.GL2.ArbDrawBuffersBlend)dstRGB, (Chela.Graphics.GL2.ArbDrawBuffersBlend)srcAlpha, (Chela.Graphics.GL2.ArbDrawBuffersBlend)dstAlpha);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BlendFuncSeparate(UInt32 buf, Chela.Graphics.GL2.ArbDrawBuffersBlend srcRGB, Chela.Graphics.GL2.ArbDrawBuffersBlend dstRGB, Chela.Graphics.GL2.ArbDrawBuffersBlend srcAlpha, Chela.Graphics.GL2.ArbDrawBuffersBlend dstAlpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBlendFuncSeparatei((UInt32)buf, (Chela.Graphics.GL2.ArbDrawBuffersBlend)srcRGB, (Chela.Graphics.GL2.ArbDrawBuffersBlend)dstRGB, (Chela.Graphics.GL2.ArbDrawBuffersBlend)srcAlpha, (Chela.Graphics.GL2.ArbDrawBuffersBlend)dstAlpha);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, Chela.Graphics.GL2.ClearBufferMask mask, Chela.Graphics.GL2.BlitFramebufferFilter filter)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBlitFramebuffer((Int32)srcX0, (Int32)srcY0, (Int32)srcX1, (Int32)srcY1, (Int32)dstX0, (Int32)dstY0, (Int32)dstX1, (Int32)dstY1, (Chela.Graphics.GL2.ClearBufferMask)mask, (Chela.Graphics.GL2.BlitFramebufferFilter)filter);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BufferData(Chela.Graphics.GL2.BufferTarget target, IntPtr size, IntPtr data, Chela.Graphics.GL2.BufferUsageHint usage)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBufferData((Chela.Graphics.GL2.BufferTarget)target, (IntPtr)size, (IntPtr)data, (Chela.Graphics.GL2.BufferUsageHint)usage);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BufferData<T2>(Chela.Graphics.GL2.BufferTarget target, IntPtr size, T2[] data, Chela.Graphics.GL2.BufferUsageHint usage)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferData((Chela.Graphics.GL2.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.BufferUsageHint)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BufferData<T2>(Chela.Graphics.GL2.BufferTarget target, IntPtr size, T2[,] data, Chela.Graphics.GL2.BufferUsageHint usage)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferData((Chela.Graphics.GL2.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.BufferUsageHint)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BufferData<T2>(Chela.Graphics.GL2.BufferTarget target, IntPtr size, T2[,,] data, Chela.Graphics.GL2.BufferUsageHint usage)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferData((Chela.Graphics.GL2.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.BufferUsageHint)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BufferData<T2>(Chela.Graphics.GL2.BufferTarget target, IntPtr size, ref T2 data, Chela.Graphics.GL2.BufferUsageHint usage)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferData((Chela.Graphics.GL2.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.BufferUsageHint)usage);
                    data = (T2)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BufferSubData(Chela.Graphics.GL2.BufferTarget target, IntPtr offset, IntPtr size, IntPtr data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBufferSubData((Chela.Graphics.GL2.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BufferSubData<T3>(Chela.Graphics.GL2.BufferTarget target, IntPtr offset, IntPtr size, T3[] data)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferSubData((Chela.Graphics.GL2.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BufferSubData<T3>(Chela.Graphics.GL2.BufferTarget target, IntPtr offset, IntPtr size, T3[,] data)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferSubData((Chela.Graphics.GL2.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BufferSubData<T3>(Chela.Graphics.GL2.BufferTarget target, IntPtr offset, IntPtr size, T3[,,] data)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferSubData((Chela.Graphics.GL2.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BufferSubData<T3>(Chela.Graphics.GL2.BufferTarget target, IntPtr offset, IntPtr size, ref T3 data)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferSubData((Chela.Graphics.GL2.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T3)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CallList(Int32 list)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCallList((UInt32)list);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CallList(UInt32 list)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCallList((UInt32)list);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CallLists(Int32 n, Chela.Graphics.GL2.ListNameType type, IntPtr lists)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCallLists((Int32)n, (Chela.Graphics.GL2.ListNameType)type, (IntPtr)lists);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CallLists<T2>(Int32 n, Chela.Graphics.GL2.ListNameType type, T2[] lists)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle lists_ptr = GCHandle.Alloc(lists, GCHandleType.Pinned);
                try
                {
                    Delegates.glCallLists((Int32)n, (Chela.Graphics.GL2.ListNameType)type, (IntPtr)lists_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    lists_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CallLists<T2>(Int32 n, Chela.Graphics.GL2.ListNameType type, T2[,] lists)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle lists_ptr = GCHandle.Alloc(lists, GCHandleType.Pinned);
                try
                {
                    Delegates.glCallLists((Int32)n, (Chela.Graphics.GL2.ListNameType)type, (IntPtr)lists_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    lists_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CallLists<T2>(Int32 n, Chela.Graphics.GL2.ListNameType type, T2[,,] lists)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle lists_ptr = GCHandle.Alloc(lists, GCHandleType.Pinned);
                try
                {
                    Delegates.glCallLists((Int32)n, (Chela.Graphics.GL2.ListNameType)type, (IntPtr)lists_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    lists_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CallLists<T2>(Int32 n, Chela.Graphics.GL2.ListNameType type, ref T2 lists)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle lists_ptr = GCHandle.Alloc(lists, GCHandleType.Pinned);
                try
                {
                    Delegates.glCallLists((Int32)n, (Chela.Graphics.GL2.ListNameType)type, (IntPtr)lists_ptr.AddrOfPinnedObject());
                    lists = (T2)lists_ptr.Target;
                }
                finally
                {
                    lists_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        Chela.Graphics.GL2.FramebufferErrorCode CheckFramebufferStatus(Chela.Graphics.GL2.FramebufferTarget target)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glCheckFramebufferStatus((Chela.Graphics.GL2.FramebufferTarget)target);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ClampColor(Chela.Graphics.GL2.ClampColorTarget target, Chela.Graphics.GL2.ClampColorMode clamp)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glClampColor((Chela.Graphics.GL2.ClampColorTarget)target, (Chela.Graphics.GL2.ClampColorMode)clamp);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Clear(Chela.Graphics.GL2.ClearBufferMask mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glClear((Chela.Graphics.GL2.ClearBufferMask)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ClearAccum(Single red, Single green, Single blue, Single alpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glClearAccum((Single)red, (Single)green, (Single)blue, (Single)alpha);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ClearBuffer(Chela.Graphics.GL2.ClearBuffer buffer, Int32 drawbuffer, Single depth, Int32 stencil)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glClearBufferfi((Chela.Graphics.GL2.ClearBuffer)buffer, (Int32)drawbuffer, (Single)depth, (Int32)stencil);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ClearBuffer(Chela.Graphics.GL2.ClearBuffer buffer, Int32 drawbuffer, Single[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glClearBufferfv((Chela.Graphics.GL2.ClearBuffer)buffer, (Int32)drawbuffer, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ClearBuffer(Chela.Graphics.GL2.ClearBuffer buffer, Int32 drawbuffer, ref Single value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glClearBufferfv((Chela.Graphics.GL2.ClearBuffer)buffer, (Int32)drawbuffer, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void ClearBuffer(Chela.Graphics.GL2.ClearBuffer buffer, Int32 drawbuffer, Single* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glClearBufferfv((Chela.Graphics.GL2.ClearBuffer)buffer, (Int32)drawbuffer, (Single*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void ClearBuffer(Chela.Graphics.GL2.ClearBuffer buffer, Int32 drawbuffer, Int32[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Delegates.glClearBufferiv((Chela.Graphics.GL2.ClearBuffer)buffer, (Int32)drawbuffer, (Int32*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ClearBuffer(Chela.Graphics.GL2.ClearBuffer buffer, Int32 drawbuffer, ref Int32 value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Delegates.glClearBufferiv((Chela.Graphics.GL2.ClearBuffer)buffer, (Int32)drawbuffer, (Int32*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void ClearBuffer(Chela.Graphics.GL2.ClearBuffer buffer, Int32 drawbuffer, Int32* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glClearBufferiv((Chela.Graphics.GL2.ClearBuffer)buffer, (Int32)drawbuffer, (Int32*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void ClearBuffer(Chela.Graphics.GL2.ClearBuffer buffer, Int32 drawbuffer, UInt32[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* value_ptr = value)
                {
                    Delegates.glClearBufferuiv((Chela.Graphics.GL2.ClearBuffer)buffer, (Int32)drawbuffer, (UInt32*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ClearBuffer(Chela.Graphics.GL2.ClearBuffer buffer, Int32 drawbuffer, ref UInt32 value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* value_ptr = &value)
                {
                    Delegates.glClearBufferuiv((Chela.Graphics.GL2.ClearBuffer)buffer, (Int32)drawbuffer, (UInt32*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void ClearBuffer(Chela.Graphics.GL2.ClearBuffer buffer, Int32 drawbuffer, UInt32* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glClearBufferuiv((Chela.Graphics.GL2.ClearBuffer)buffer, (Int32)drawbuffer, (UInt32*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void ClearColor(Single red, Single green, Single blue, Single alpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glClearColor((Single)red, (Single)green, (Single)blue, (Single)alpha);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ClearDepth(Double depth)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glClearDepth((Double)depth);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ClearIndex(Single c)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glClearIndex((Single)c);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ClearStencil(Int32 s)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glClearStencil((Int32)s);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ClientActiveTexture(Chela.Graphics.GL2.TextureUnit texture)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glClientActiveTexture((Chela.Graphics.GL2.TextureUnit)texture);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        Chela.Graphics.GL2.ArbSync ClientWaitSync(IntPtr sync, Int32 flags, Int64 timeout)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glClientWaitSync((IntPtr)sync, (UInt32)flags, (UInt64)timeout);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        Chela.Graphics.GL2.ArbSync ClientWaitSync(IntPtr sync, UInt32 flags, UInt64 timeout)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glClientWaitSync((IntPtr)sync, (UInt32)flags, (UInt64)timeout);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ClipPlane(Chela.Graphics.GL2.ClipPlaneName plane, Double[] equation)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* equation_ptr = equation)
                {
                    Delegates.glClipPlane((Chela.Graphics.GL2.ClipPlaneName)plane, (Double*)equation_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ClipPlane(Chela.Graphics.GL2.ClipPlaneName plane, ref Double equation)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* equation_ptr = &equation)
                {
                    Delegates.glClipPlane((Chela.Graphics.GL2.ClipPlaneName)plane, (Double*)equation_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void ClipPlane(Chela.Graphics.GL2.ClipPlaneName plane, Double* equation)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glClipPlane((Chela.Graphics.GL2.ClipPlaneName)plane, (Double*)equation);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(SByte red, SByte green, SByte blue)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColor3b((SByte)red, (SByte)green, (SByte)blue);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(SByte[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Delegates.glColor3bv((SByte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(ref SByte v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Delegates.glColor3bv((SByte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Color3(SByte* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glColor3bv((SByte*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(Double red, Double green, Double blue)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColor3d((Double)red, (Double)green, (Double)blue);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glColor3dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glColor3dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Color3(Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glColor3dv((Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(Single red, Single green, Single blue)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColor3f((Single)red, (Single)green, (Single)blue);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glColor3fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glColor3fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Color3(Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glColor3fv((Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(Int32 red, Int32 green, Int32 blue)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColor3i((Int32)red, (Int32)green, (Int32)blue);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glColor3iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glColor3iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Color3(Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glColor3iv((Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(Int16 red, Int16 green, Int16 blue)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColor3s((Int16)red, (Int16)green, (Int16)blue);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glColor3sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glColor3sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Color3(Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glColor3sv((Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(Byte red, Byte green, Byte blue)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColor3ub((Byte)red, (Byte)green, (Byte)blue);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(Byte[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glColor3ubv((Byte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(ref Byte v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glColor3ubv((Byte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Color3(Byte* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glColor3ubv((Byte*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(UInt32 red, UInt32 green, UInt32 blue)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColor3ui((UInt32)red, (UInt32)green, (UInt32)blue);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(UInt32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glColor3uiv((UInt32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(ref UInt32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glColor3uiv((UInt32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Color3(UInt32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glColor3uiv((UInt32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(UInt16 red, UInt16 green, UInt16 blue)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColor3us((UInt16)red, (UInt16)green, (UInt16)blue);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(UInt16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Delegates.glColor3usv((UInt16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color3(ref UInt16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Delegates.glColor3usv((UInt16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Color3(UInt16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glColor3usv((UInt16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(SByte red, SByte green, SByte blue, SByte alpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColor4b((SByte)red, (SByte)green, (SByte)blue, (SByte)alpha);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(SByte[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Delegates.glColor4bv((SByte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(ref SByte v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Delegates.glColor4bv((SByte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Color4(SByte* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glColor4bv((SByte*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(Double red, Double green, Double blue, Double alpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColor4d((Double)red, (Double)green, (Double)blue, (Double)alpha);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glColor4dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glColor4dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Color4(Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glColor4dv((Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(Single red, Single green, Single blue, Single alpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColor4f((Single)red, (Single)green, (Single)blue, (Single)alpha);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glColor4fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glColor4fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Color4(Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glColor4fv((Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(Int32 red, Int32 green, Int32 blue, Int32 alpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColor4i((Int32)red, (Int32)green, (Int32)blue, (Int32)alpha);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glColor4iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glColor4iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Color4(Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glColor4iv((Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(Int16 red, Int16 green, Int16 blue, Int16 alpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColor4s((Int16)red, (Int16)green, (Int16)blue, (Int16)alpha);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glColor4sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glColor4sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Color4(Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glColor4sv((Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(Byte red, Byte green, Byte blue, Byte alpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColor4ub((Byte)red, (Byte)green, (Byte)blue, (Byte)alpha);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(Byte[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glColor4ubv((Byte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(ref Byte v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glColor4ubv((Byte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Color4(Byte* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glColor4ubv((Byte*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(UInt32 red, UInt32 green, UInt32 blue, UInt32 alpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColor4ui((UInt32)red, (UInt32)green, (UInt32)blue, (UInt32)alpha);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(UInt32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glColor4uiv((UInt32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(ref UInt32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glColor4uiv((UInt32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Color4(UInt32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glColor4uiv((UInt32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(UInt16 red, UInt16 green, UInt16 blue, UInt16 alpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColor4us((UInt16)red, (UInt16)green, (UInt16)blue, (UInt16)alpha);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(UInt16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Delegates.glColor4usv((UInt16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Color4(ref UInt16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Delegates.glColor4usv((UInt16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Color4(UInt16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glColor4usv((UInt16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorMask(bool red, bool green, bool blue, bool alpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColorMask((bool)red, (bool)green, (bool)blue, (bool)alpha);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorMask(Int32 index, bool r, bool g, bool b, bool a)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColorMaski((UInt32)index, (bool)r, (bool)g, (bool)b, (bool)a);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorMask(UInt32 index, bool r, bool g, bool b, bool a)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColorMaski((UInt32)index, (bool)r, (bool)g, (bool)b, (bool)a);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorMaterial(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.ColorMaterialParameter mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColorMaterial((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.ColorMaterialParameter)mode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorPointer(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, IntPtr pointer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColorPointer((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (IntPtr)pointer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorPointer<T3>(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, T3[] pointer)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorPointer((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorPointer<T3>(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, T3[,] pointer)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorPointer((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorPointer<T3>(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, T3[,,] pointer)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorPointer((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorPointer<T3>(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, ref T3 pointer)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorPointer((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T3)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorSubTable(Chela.Graphics.GL2.ColorTableTarget target, Int32 start, Int32 count, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColorSubTable((Chela.Graphics.GL2.ColorTableTarget)target, (Int32)start, (Int32)count, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)data);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorSubTable<T5>(Chela.Graphics.GL2.ColorTableTarget target, Int32 start, Int32 count, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[] data)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorSubTable((Chela.Graphics.GL2.ColorTableTarget)target, (Int32)start, (Int32)count, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorSubTable<T5>(Chela.Graphics.GL2.ColorTableTarget target, Int32 start, Int32 count, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[,] data)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorSubTable((Chela.Graphics.GL2.ColorTableTarget)target, (Int32)start, (Int32)count, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorSubTable<T5>(Chela.Graphics.GL2.ColorTableTarget target, Int32 start, Int32 count, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[,,] data)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorSubTable((Chela.Graphics.GL2.ColorTableTarget)target, (Int32)start, (Int32)count, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorSubTable<T5>(Chela.Graphics.GL2.ColorTableTarget target, Int32 start, Int32 count, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T5 data)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorSubTable((Chela.Graphics.GL2.ColorTableTarget)target, (Int32)start, (Int32)count, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T5)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorTable(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr table)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColorTable((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorTable<T5>(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[] table)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorTable((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    table_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorTable<T5>(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[,] table)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorTable((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    table_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorTable<T5>(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[,,] table)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorTable((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    table_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorTable<T5>(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T5 table)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                try
                {
                    Delegates.glColorTable((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                    table = (T5)table_ptr.Target;
                }
                finally
                {
                    table_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorTableParameter(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.ColorTableParameterPName pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glColorTableParameterfv((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.ColorTableParameterPName)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorTableParameter(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.ColorTableParameterPName pname, ref Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glColorTableParameterfv((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.ColorTableParameterPName)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void ColorTableParameter(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.ColorTableParameterPName pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glColorTableParameterfv((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.ColorTableParameterPName)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorTableParameter(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.ColorTableParameterPName pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glColorTableParameteriv((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.ColorTableParameterPName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorTableParameter(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.ColorTableParameterPName pname, ref Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glColorTableParameteriv((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.ColorTableParameterPName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void ColorTableParameter(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.ColorTableParameterPName pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glColorTableParameteriv((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.ColorTableParameterPName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompileShader(Int32 shader)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCompileShader((UInt32)shader);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompileShader(UInt32 shader)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCompileShader((UInt32)shader);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexImage1D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCompressedTexImage1D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, T6[] data)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage1D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, T6[,] data)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage1D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, T6[,,] data)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage1D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 border, Int32 imageSize, ref T6 data)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage1D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T6)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexImage2D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCompressedTexImage2D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexImage2D<T7>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, T7[] data)
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage2D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexImage2D<T7>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, T7[,] data)
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage2D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexImage2D<T7>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, T7[,,] data)
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage2D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexImage2D<T7>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, ref T7 data)
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage2D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T7)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexImage3D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCompressedTexImage3D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexImage3D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, T8[] data)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage3D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexImage3D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, T8[,] data)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage3D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexImage3D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, T8[,,] data)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage3D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexImage3D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, ref T8 data)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage3D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T8)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexSubImage1D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, IntPtr data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCompressedTexSubImage1D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexSubImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T6[] data)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage1D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexSubImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T6[,] data)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage1D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexSubImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T6[,,] data)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage1D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexSubImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, ref T6 data)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage1D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T6)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexSubImage2D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, IntPtr data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCompressedTexSubImage2D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexSubImage2D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T8[] data)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage2D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexSubImage2D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T8[,] data)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage2D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexSubImage2D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T8[,,] data)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage2D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexSubImage2D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, ref T8 data)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage2D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T8)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexSubImage3D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, IntPtr data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCompressedTexSubImage3D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexSubImage3D<T10>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T10[] data)
            where T10 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage3D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexSubImage3D<T10>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T10[,] data)
            where T10 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage3D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexSubImage3D<T10>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T10[,,] data)
            where T10 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage3D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexSubImage3D<T10>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, ref T10 data)
            where T10 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage3D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T10)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ConvolutionFilter1D(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr image)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glConvolutionFilter1D((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ConvolutionFilter1D<T5>(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[] image)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter1D((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ConvolutionFilter1D<T5>(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[,] image)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter1D((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ConvolutionFilter1D<T5>(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[,,] image)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter1D((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ConvolutionFilter1D<T5>(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T5 image)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter1D((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                    image = (T5)image_ptr.Target;
                }
                finally
                {
                    image_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ConvolutionFilter2D(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr image)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glConvolutionFilter2D((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ConvolutionFilter2D<T6>(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T6[] image)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter2D((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ConvolutionFilter2D<T6>(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T6[,] image)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter2D((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ConvolutionFilter2D<T6>(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T6[,,] image)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter2D((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ConvolutionFilter2D<T6>(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T6 image)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glConvolutionFilter2D((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                    image = (T6)image_ptr.Target;
                }
                finally
                {
                    image_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ConvolutionParameter(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.ConvolutionParameter pname, Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glConvolutionParameterf((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.ConvolutionParameter)pname, (Single)@params);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ConvolutionParameter(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.ConvolutionParameter pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glConvolutionParameterfv((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.ConvolutionParameter)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void ConvolutionParameter(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.ConvolutionParameter pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glConvolutionParameterfv((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.ConvolutionParameter)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void ConvolutionParameter(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.ConvolutionParameter pname, Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glConvolutionParameteri((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.ConvolutionParameter)pname, (Int32)@params);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ConvolutionParameter(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.ConvolutionParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glConvolutionParameteriv((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.ConvolutionParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void ConvolutionParameter(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.ConvolutionParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glConvolutionParameteriv((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.ConvolutionParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void CopyBufferSubData(Chela.Graphics.GL2.BufferTarget readTarget, Chela.Graphics.GL2.BufferTarget writeTarget, IntPtr readOffset, IntPtr writeOffset, IntPtr size)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCopyBufferSubData((Chela.Graphics.GL2.BufferTarget)readTarget, (Chela.Graphics.GL2.BufferTarget)writeTarget, (IntPtr)readOffset, (IntPtr)writeOffset, (IntPtr)size);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CopyColorSubTable(Chela.Graphics.GL2.ColorTableTarget target, Int32 start, Int32 x, Int32 y, Int32 width)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCopyColorSubTable((Chela.Graphics.GL2.ColorTableTarget)target, (Int32)start, (Int32)x, (Int32)y, (Int32)width);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CopyColorTable(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCopyColorTable((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CopyConvolutionFilter1D(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCopyConvolutionFilter1D((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CopyConvolutionFilter2D(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCopyConvolutionFilter2D((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CopyPixels(Int32 x, Int32 y, Int32 width, Int32 height, Chela.Graphics.GL2.PixelCopyType type)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCopyPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelCopyType)type);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CopyTexImage1D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCopyTexImage1D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CopyTexImage2D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCopyTexImage2D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CopyTexSubImage1D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCopyTexSubImage1D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CopyTexSubImage2D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCopyTexSubImage2D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CopyTexSubImage3D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCopyTexSubImage3D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        Int32 CreateProgram()
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glCreateProgram();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        Int32 CreateShader(Chela.Graphics.GL2.ShaderType type)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glCreateShader((Chela.Graphics.GL2.ShaderType)type);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CullFace(Chela.Graphics.GL2.CullFaceMode mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCullFace((Chela.Graphics.GL2.CullFaceMode)mode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteBuffers(Int32 n, Int32[] buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* buffers_ptr = buffers)
                {
                    Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteBuffers(Int32 n, ref Int32 buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* buffers_ptr = &buffers)
                {
                    Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void DeleteBuffers(Int32 n, Int32* buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteBuffers(Int32 n, UInt32[] buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* buffers_ptr = buffers)
                {
                    Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteBuffers(Int32 n, ref UInt32 buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* buffers_ptr = &buffers)
                {
                    Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void DeleteBuffers(Int32 n, UInt32* buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteFramebuffers(Int32 n, Int32[] framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* framebuffers_ptr = framebuffers)
                {
                    Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteFramebuffers(Int32 n, ref Int32 framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* framebuffers_ptr = &framebuffers)
                {
                    Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void DeleteFramebuffers(Int32 n, Int32* framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteFramebuffers(Int32 n, UInt32[] framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* framebuffers_ptr = framebuffers)
                {
                    Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteFramebuffers(Int32 n, ref UInt32 framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* framebuffers_ptr = &framebuffers)
                {
                    Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void DeleteFramebuffers(Int32 n, UInt32* framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteLists(Int32 list, Int32 range)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDeleteLists((UInt32)list, (Int32)range);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteLists(UInt32 list, Int32 range)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDeleteLists((UInt32)list, (Int32)range);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteProgram(Int32 program)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDeleteProgram((UInt32)program);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteProgram(UInt32 program)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDeleteProgram((UInt32)program);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteQueries(Int32 n, Int32[] ids)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* ids_ptr = ids)
                {
                    Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteQueries(Int32 n, ref Int32 ids)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* ids_ptr = &ids)
                {
                    Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void DeleteQueries(Int32 n, Int32* ids)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glDeleteQueries((Int32)n, (UInt32*)ids);
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteQueries(Int32 n, UInt32[] ids)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* ids_ptr = ids)
                {
                    Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteQueries(Int32 n, ref UInt32 ids)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* ids_ptr = &ids)
                {
                    Delegates.glDeleteQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void DeleteQueries(Int32 n, UInt32* ids)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glDeleteQueries((Int32)n, (UInt32*)ids);
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteRenderbuffers(Int32 n, Int32[] renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* renderbuffers_ptr = renderbuffers)
                {
                    Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteRenderbuffers(Int32 n, ref Int32 renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* renderbuffers_ptr = &renderbuffers)
                {
                    Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void DeleteRenderbuffers(Int32 n, Int32* renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteRenderbuffers(Int32 n, UInt32[] renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* renderbuffers_ptr = renderbuffers)
                {
                    Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteRenderbuffers(Int32 n, ref UInt32 renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* renderbuffers_ptr = &renderbuffers)
                {
                    Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void DeleteRenderbuffers(Int32 n, UInt32* renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteShader(Int32 shader)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDeleteShader((UInt32)shader);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteShader(UInt32 shader)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDeleteShader((UInt32)shader);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteSync(IntPtr sync)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDeleteSync((IntPtr)sync);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteTextures(Int32 n, Int32[] textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* textures_ptr = textures)
                {
                    Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteTextures(Int32 n, ref Int32 textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* textures_ptr = &textures)
                {
                    Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void DeleteTextures(Int32 n, Int32* textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glDeleteTextures((Int32)n, (UInt32*)textures);
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteTextures(Int32 n, UInt32[] textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* textures_ptr = textures)
                {
                    Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteTextures(Int32 n, ref UInt32 textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* textures_ptr = &textures)
                {
                    Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void DeleteTextures(Int32 n, UInt32* textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glDeleteTextures((Int32)n, (UInt32*)textures);
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteVertexArrays(Int32 n, Int32[] arrays)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* arrays_ptr = arrays)
                {
                    Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteVertexArrays(Int32 n, ref Int32 arrays)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* arrays_ptr = &arrays)
                {
                    Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void DeleteVertexArrays(Int32 n, Int32* arrays)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays);
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteVertexArrays(Int32 n, UInt32[] arrays)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* arrays_ptr = arrays)
                {
                    Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteVertexArrays(Int32 n, ref UInt32 arrays)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* arrays_ptr = &arrays)
                {
                    Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void DeleteVertexArrays(Int32 n, UInt32* arrays)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glDeleteVertexArrays((Int32)n, (UInt32*)arrays);
            #if DEBUG
            }
            #endif
        }

        public static 
        void DepthFunc(Chela.Graphics.GL2.DepthFunction func)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDepthFunc((Chela.Graphics.GL2.DepthFunction)func);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DepthMask(bool flag)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDepthMask((bool)flag);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DepthRange(Double near, Double far)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDepthRange((Double)near, (Double)far);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DetachShader(Int32 program, Int32 shader)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDetachShader((UInt32)program, (UInt32)shader);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DetachShader(UInt32 program, UInt32 shader)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDetachShader((UInt32)program, (UInt32)shader);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Disable(Chela.Graphics.GL2.EnableCap cap)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDisable((Chela.Graphics.GL2.EnableCap)cap);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DisableClientState(Chela.Graphics.GL2.ArrayCap array)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDisableClientState((Chela.Graphics.GL2.ArrayCap)array);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Disable(Chela.Graphics.GL2.IndexedEnableCap target, Int32 index)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDisablei((Chela.Graphics.GL2.IndexedEnableCap)target, (UInt32)index);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Disable(Chela.Graphics.GL2.IndexedEnableCap target, UInt32 index)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDisablei((Chela.Graphics.GL2.IndexedEnableCap)target, (UInt32)index);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DisableVertexAttribArray(Int32 index)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDisableVertexAttribArray((UInt32)index);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DisableVertexAttribArray(UInt32 index)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDisableVertexAttribArray((UInt32)index);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawArrays(Chela.Graphics.GL2.BeginMode mode, Int32 first, Int32 count)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDrawArrays((Chela.Graphics.GL2.BeginMode)mode, (Int32)first, (Int32)count);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawArraysInstanced(Chela.Graphics.GL2.BeginMode mode, Int32 first, Int32 count, Int32 primcount)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDrawArraysInstanced((Chela.Graphics.GL2.BeginMode)mode, (Int32)first, (Int32)count, (Int32)primcount);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawBuffer(Chela.Graphics.GL2.DrawBufferMode mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDrawBuffer((Chela.Graphics.GL2.DrawBufferMode)mode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawBuffers(Int32 n, Chela.Graphics.GL2.DrawBuffersEnum[] bufs)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Chela.Graphics.GL2.DrawBuffersEnum* bufs_ptr = bufs)
                {
                    Delegates.glDrawBuffers((Int32)n, (Chela.Graphics.GL2.DrawBuffersEnum*)bufs_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawBuffers(Int32 n, ref Chela.Graphics.GL2.DrawBuffersEnum bufs)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Chela.Graphics.GL2.DrawBuffersEnum* bufs_ptr = &bufs)
                {
                    Delegates.glDrawBuffers((Int32)n, (Chela.Graphics.GL2.DrawBuffersEnum*)bufs_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void DrawBuffers(Int32 n, Chela.Graphics.GL2.DrawBuffersEnum* bufs)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glDrawBuffers((Int32)n, (Chela.Graphics.GL2.DrawBuffersEnum*)bufs);
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElements(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDrawElements((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[] indices)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElements((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[,] indices)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElements((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[,,] indices)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElements((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, ref T3 indices)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElements((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                    indices = (T3)indices_ptr.Target;
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElementsBaseVertex(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices, Int32 basevertex)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDrawElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices, (Int32)basevertex);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElementsBaseVertex<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[] indices, Int32 basevertex)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElementsBaseVertex<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[,] indices, Int32 basevertex)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElementsBaseVertex<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[,,] indices, Int32 basevertex)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElementsBaseVertex<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, ref T3 indices, Int32 basevertex)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
                    indices = (T3)indices_ptr.Target;
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElementsInstanced(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices, Int32 primcount)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDrawElementsInstanced((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElementsInstanced<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[] indices, Int32 primcount)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstanced((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElementsInstanced<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[,] indices, Int32 primcount)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstanced((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElementsInstanced<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[,,] indices, Int32 primcount)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstanced((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElementsInstanced<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, ref T3 indices, Int32 primcount)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstanced((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    indices = (T3)indices_ptr.Target;
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElementsInstancedBaseVertex(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices, Int32 primcount, Int32 basevertex)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDrawElementsInstancedBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices, (Int32)primcount, (Int32)basevertex);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElementsInstancedBaseVertex<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[] indices, Int32 primcount, Int32 basevertex)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstancedBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)basevertex);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElementsInstancedBaseVertex<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[,] indices, Int32 primcount, Int32 basevertex)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstancedBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)basevertex);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElementsInstancedBaseVertex<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[,,] indices, Int32 primcount, Int32 basevertex)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstancedBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)basevertex);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElementsInstancedBaseVertex<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, ref T3 indices, Int32 primcount, Int32 basevertex)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElementsInstancedBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)basevertex);
                    indices = (T3)indices_ptr.Target;
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawPixels(Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDrawPixels((Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawPixels<T4>(Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T4[] pixels)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawPixels((Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawPixels<T4>(Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T4[,] pixels)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawPixels((Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawPixels<T4>(Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T4[,,] pixels)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawPixels((Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawPixels<T4>(Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T4 pixels)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawPixels((Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T4)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawRangeElements(Chela.Graphics.GL2.BeginMode mode, Int32 start, Int32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDrawRangeElements((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawRangeElements<T5>(Chela.Graphics.GL2.BeginMode mode, Int32 start, Int32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T5[] indices)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElements((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawRangeElements<T5>(Chela.Graphics.GL2.BeginMode mode, Int32 start, Int32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T5[,] indices)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElements((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawRangeElements<T5>(Chela.Graphics.GL2.BeginMode mode, Int32 start, Int32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T5[,,] indices)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElements((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawRangeElements<T5>(Chela.Graphics.GL2.BeginMode mode, Int32 start, Int32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, ref T5 indices)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElements((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                    indices = (T5)indices_ptr.Target;
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawRangeElements(Chela.Graphics.GL2.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDrawRangeElements((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawRangeElements<T5>(Chela.Graphics.GL2.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T5[] indices)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElements((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawRangeElements<T5>(Chela.Graphics.GL2.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T5[,] indices)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElements((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawRangeElements<T5>(Chela.Graphics.GL2.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T5[,,] indices)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElements((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawRangeElements<T5>(Chela.Graphics.GL2.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, ref T5 indices)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElements((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                    indices = (T5)indices_ptr.Target;
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawRangeElementsBaseVertex(Chela.Graphics.GL2.BeginMode mode, Int32 start, Int32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices, Int32 basevertex)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDrawRangeElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices, (Int32)basevertex);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawRangeElementsBaseVertex<T5>(Chela.Graphics.GL2.BeginMode mode, Int32 start, Int32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T5[] indices, Int32 basevertex)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawRangeElementsBaseVertex<T5>(Chela.Graphics.GL2.BeginMode mode, Int32 start, Int32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T5[,] indices, Int32 basevertex)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawRangeElementsBaseVertex<T5>(Chela.Graphics.GL2.BeginMode mode, Int32 start, Int32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T5[,,] indices, Int32 basevertex)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawRangeElementsBaseVertex<T5>(Chela.Graphics.GL2.BeginMode mode, Int32 start, Int32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, ref T5 indices, Int32 basevertex)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
                    indices = (T5)indices_ptr.Target;
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawRangeElementsBaseVertex(Chela.Graphics.GL2.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices, Int32 basevertex)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDrawRangeElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices, (Int32)basevertex);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawRangeElementsBaseVertex<T5>(Chela.Graphics.GL2.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T5[] indices, Int32 basevertex)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawRangeElementsBaseVertex<T5>(Chela.Graphics.GL2.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T5[,] indices, Int32 basevertex)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawRangeElementsBaseVertex<T5>(Chela.Graphics.GL2.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T5[,,] indices, Int32 basevertex)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawRangeElementsBaseVertex<T5>(Chela.Graphics.GL2.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, ref T5 indices, Int32 basevertex)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawRangeElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)basevertex);
                    indices = (T5)indices_ptr.Target;
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EdgeFlag(bool flag)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEdgeFlag((bool)flag);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EdgeFlagPointer(Int32 stride, IntPtr pointer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEdgeFlagPointer((Int32)stride, (IntPtr)pointer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EdgeFlagPointer<T1>(Int32 stride, T1[] pointer)
            where T1 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glEdgeFlagPointer((Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EdgeFlagPointer<T1>(Int32 stride, T1[,] pointer)
            where T1 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glEdgeFlagPointer((Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EdgeFlagPointer<T1>(Int32 stride, T1[,,] pointer)
            where T1 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glEdgeFlagPointer((Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EdgeFlagPointer<T1>(Int32 stride, ref T1 pointer)
            where T1 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glEdgeFlagPointer((Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T1)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void EdgeFlag(bool* flag)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glEdgeFlagv((bool*)flag);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Enable(Chela.Graphics.GL2.EnableCap cap)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEnable((Chela.Graphics.GL2.EnableCap)cap);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EnableClientState(Chela.Graphics.GL2.ArrayCap array)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEnableClientState((Chela.Graphics.GL2.ArrayCap)array);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Enable(Chela.Graphics.GL2.IndexedEnableCap target, Int32 index)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEnablei((Chela.Graphics.GL2.IndexedEnableCap)target, (UInt32)index);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Enable(Chela.Graphics.GL2.IndexedEnableCap target, UInt32 index)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEnablei((Chela.Graphics.GL2.IndexedEnableCap)target, (UInt32)index);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EnableVertexAttribArray(Int32 index)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEnableVertexAttribArray((UInt32)index);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EnableVertexAttribArray(UInt32 index)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEnableVertexAttribArray((UInt32)index);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void End()
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEnd();
            }
            #if DEBUG
            GraphicsContext.CurrentContext.ErrorChecking = true;
            }
            #endif
        }

        public static 
        void EndConditionalRender()
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEndConditionalRender();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EndList()
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEndList();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EndQuery(Chela.Graphics.GL2.QueryTarget target)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEndQuery((Chela.Graphics.GL2.QueryTarget)target);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EndTransformFeedback()
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEndTransformFeedback();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EvalCoord1(Double u)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEvalCoord1d((Double)u);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void EvalCoord1(Double* u)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glEvalCoord1dv((Double*)u);
            #if DEBUG
            }
            #endif
        }

        public static 
        void EvalCoord1(Single u)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEvalCoord1f((Single)u);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void EvalCoord1(Single* u)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glEvalCoord1fv((Single*)u);
            #if DEBUG
            }
            #endif
        }

        public static 
        void EvalCoord2(Double u, Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEvalCoord2d((Double)u, (Double)v);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EvalCoord2(Double[] u)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* u_ptr = u)
                {
                    Delegates.glEvalCoord2dv((Double*)u_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EvalCoord2(ref Double u)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* u_ptr = &u)
                {
                    Delegates.glEvalCoord2dv((Double*)u_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void EvalCoord2(Double* u)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glEvalCoord2dv((Double*)u);
            #if DEBUG
            }
            #endif
        }

        public static 
        void EvalCoord2(Single u, Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEvalCoord2f((Single)u, (Single)v);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EvalCoord2(Single[] u)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* u_ptr = u)
                {
                    Delegates.glEvalCoord2fv((Single*)u_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EvalCoord2(ref Single u)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* u_ptr = &u)
                {
                    Delegates.glEvalCoord2fv((Single*)u_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void EvalCoord2(Single* u)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glEvalCoord2fv((Single*)u);
            #if DEBUG
            }
            #endif
        }

        public static 
        void EvalMesh1(Chela.Graphics.GL2.MeshMode1 mode, Int32 i1, Int32 i2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEvalMesh1((Chela.Graphics.GL2.MeshMode1)mode, (Int32)i1, (Int32)i2);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EvalMesh2(Chela.Graphics.GL2.MeshMode2 mode, Int32 i1, Int32 i2, Int32 j1, Int32 j2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEvalMesh2((Chela.Graphics.GL2.MeshMode2)mode, (Int32)i1, (Int32)i2, (Int32)j1, (Int32)j2);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EvalPoint1(Int32 i)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEvalPoint1((Int32)i);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EvalPoint2(Int32 i, Int32 j)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEvalPoint2((Int32)i, (Int32)j);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FeedbackBuffer(Int32 size, Chela.Graphics.GL2.FeedbackType type, Single[] buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* buffer_ptr = buffer)
                {
                    Delegates.glFeedbackBuffer((Int32)size, (Chela.Graphics.GL2.FeedbackType)type, (Single*)buffer_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FeedbackBuffer(Int32 size, Chela.Graphics.GL2.FeedbackType type, out Single buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* buffer_ptr = &buffer)
                {
                    Delegates.glFeedbackBuffer((Int32)size, (Chela.Graphics.GL2.FeedbackType)type, (Single*)buffer_ptr);
                    buffer = *buffer_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void FeedbackBuffer(Int32 size, Chela.Graphics.GL2.FeedbackType type, Single* buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glFeedbackBuffer((Int32)size, (Chela.Graphics.GL2.FeedbackType)type, (Single*)buffer);
            #if DEBUG
            }
            #endif
        }

        public static 
        IntPtr FenceSync(Chela.Graphics.GL2.ArbSync condition, Int32 flags)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glFenceSync((Chela.Graphics.GL2.ArbSync)condition, (UInt32)flags);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        IntPtr FenceSync(Chela.Graphics.GL2.ArbSync condition, UInt32 flags)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glFenceSync((Chela.Graphics.GL2.ArbSync)condition, (UInt32)flags);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Finish()
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFinish();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Flush()
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFlush();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FlushMappedBufferRange(Chela.Graphics.GL2.BufferTarget target, IntPtr offset, IntPtr length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFlushMappedBufferRange((Chela.Graphics.GL2.BufferTarget)target, (IntPtr)offset, (IntPtr)length);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FogCoord(Double coord)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFogCoordd((Double)coord);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void FogCoord(Double* coord)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glFogCoorddv((Double*)coord);
            #if DEBUG
            }
            #endif
        }

        public static 
        void FogCoord(Single coord)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFogCoordf((Single)coord);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void FogCoord(Single* coord)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glFogCoordfv((Single*)coord);
            #if DEBUG
            }
            #endif
        }

        public static 
        void FogCoordPointer(Chela.Graphics.GL2.FogPointerType type, Int32 stride, IntPtr pointer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFogCoordPointer((Chela.Graphics.GL2.FogPointerType)type, (Int32)stride, (IntPtr)pointer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FogCoordPointer<T2>(Chela.Graphics.GL2.FogPointerType type, Int32 stride, T2[] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glFogCoordPointer((Chela.Graphics.GL2.FogPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FogCoordPointer<T2>(Chela.Graphics.GL2.FogPointerType type, Int32 stride, T2[,] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glFogCoordPointer((Chela.Graphics.GL2.FogPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FogCoordPointer<T2>(Chela.Graphics.GL2.FogPointerType type, Int32 stride, T2[,,] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glFogCoordPointer((Chela.Graphics.GL2.FogPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FogCoordPointer<T2>(Chela.Graphics.GL2.FogPointerType type, Int32 stride, ref T2 pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glFogCoordPointer((Chela.Graphics.GL2.FogPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T2)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Fog(Chela.Graphics.GL2.FogParameter pname, Single param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFogf((Chela.Graphics.GL2.FogParameter)pname, (Single)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Fog(Chela.Graphics.GL2.FogParameter pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glFogfv((Chela.Graphics.GL2.FogParameter)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Fog(Chela.Graphics.GL2.FogParameter pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glFogfv((Chela.Graphics.GL2.FogParameter)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Fog(Chela.Graphics.GL2.FogParameter pname, Int32 param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFogi((Chela.Graphics.GL2.FogParameter)pname, (Int32)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Fog(Chela.Graphics.GL2.FogParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glFogiv((Chela.Graphics.GL2.FogParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Fog(Chela.Graphics.GL2.FogParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glFogiv((Chela.Graphics.GL2.FogParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void FramebufferRenderbuffer(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.RenderbufferTarget renderbuffertarget, Int32 renderbuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFramebufferRenderbuffer((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FramebufferRenderbuffer(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.RenderbufferTarget renderbuffertarget, UInt32 renderbuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFramebufferRenderbuffer((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FramebufferTexture(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Int32 texture, Int32 level)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFramebufferTexture((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FramebufferTexture(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, UInt32 texture, Int32 level)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFramebufferTexture((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FramebufferTexture1D(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.TextureTarget textarget, Int32 texture, Int32 level)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFramebufferTexture1D((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FramebufferTexture1D(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.TextureTarget textarget, UInt32 texture, Int32 level)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFramebufferTexture1D((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FramebufferTexture2D(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.TextureTarget textarget, Int32 texture, Int32 level)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFramebufferTexture2D((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FramebufferTexture2D(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.TextureTarget textarget, UInt32 texture, Int32 level)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFramebufferTexture2D((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FramebufferTexture3D(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.TextureTarget textarget, Int32 texture, Int32 level, Int32 zoffset)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFramebufferTexture3D((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FramebufferTexture3D(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.TextureTarget textarget, UInt32 texture, Int32 level, Int32 zoffset)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFramebufferTexture3D((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FramebufferTextureFace(Chela.Graphics.GL2.Version32 target, Chela.Graphics.GL2.Version32 attachment, Int32 texture, Int32 level, Chela.Graphics.GL2.Version32 face)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFramebufferTextureFace((Chela.Graphics.GL2.Version32)target, (Chela.Graphics.GL2.Version32)attachment, (UInt32)texture, (Int32)level, (Chela.Graphics.GL2.Version32)face);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FramebufferTextureFace(Chela.Graphics.GL2.Version32 target, Chela.Graphics.GL2.Version32 attachment, UInt32 texture, Int32 level, Chela.Graphics.GL2.Version32 face)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFramebufferTextureFace((Chela.Graphics.GL2.Version32)target, (Chela.Graphics.GL2.Version32)attachment, (UInt32)texture, (Int32)level, (Chela.Graphics.GL2.Version32)face);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FramebufferTextureLayer(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Int32 texture, Int32 level, Int32 layer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFramebufferTextureLayer((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FramebufferTextureLayer(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, UInt32 texture, Int32 level, Int32 layer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFramebufferTextureLayer((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FrontFace(Chela.Graphics.GL2.FrontFaceDirection mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFrontFace((Chela.Graphics.GL2.FrontFaceDirection)mode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Frustum(Double left, Double right, Double bottom, Double top, Double zNear, Double zFar)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFrustum((Double)left, (Double)right, (Double)bottom, (Double)top, (Double)zNear, (Double)zFar);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenBuffers(Int32 n, Int32[] buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* buffers_ptr = buffers)
                {
                    Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenBuffers(Int32 n, out Int32 buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* buffers_ptr = &buffers)
                {
                    Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                    buffers = *buffers_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GenBuffers(Int32 n, Int32* buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGenBuffers((Int32)n, (UInt32*)buffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenBuffers(Int32 n, UInt32[] buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* buffers_ptr = buffers)
                {
                    Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenBuffers(Int32 n, out UInt32 buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* buffers_ptr = &buffers)
                {
                    Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                    buffers = *buffers_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GenBuffers(Int32 n, UInt32* buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGenBuffers((Int32)n, (UInt32*)buffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenerateMipmap(Chela.Graphics.GL2.GenerateMipmapTarget target)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glGenerateMipmap((Chela.Graphics.GL2.GenerateMipmapTarget)target);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenFramebuffers(Int32 n, Int32[] framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* framebuffers_ptr = framebuffers)
                {
                    Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenFramebuffers(Int32 n, out Int32 framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* framebuffers_ptr = &framebuffers)
                {
                    Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                    framebuffers = *framebuffers_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GenFramebuffers(Int32 n, Int32* framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenFramebuffers(Int32 n, UInt32[] framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* framebuffers_ptr = framebuffers)
                {
                    Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenFramebuffers(Int32 n, out UInt32 framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* framebuffers_ptr = &framebuffers)
                {
                    Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                    framebuffers = *framebuffers_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GenFramebuffers(Int32 n, UInt32* framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        Int32 GenLists(Int32 range)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glGenLists((Int32)range);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenQueries(Int32 n, Int32[] ids)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* ids_ptr = ids)
                {
                    Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenQueries(Int32 n, out Int32 ids)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* ids_ptr = &ids)
                {
                    Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
                    ids = *ids_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GenQueries(Int32 n, Int32* ids)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGenQueries((Int32)n, (UInt32*)ids);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenQueries(Int32 n, UInt32[] ids)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* ids_ptr = ids)
                {
                    Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenQueries(Int32 n, out UInt32 ids)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* ids_ptr = &ids)
                {
                    Delegates.glGenQueries((Int32)n, (UInt32*)ids_ptr);
                    ids = *ids_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GenQueries(Int32 n, UInt32* ids)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGenQueries((Int32)n, (UInt32*)ids);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenRenderbuffers(Int32 n, Int32[] renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* renderbuffers_ptr = renderbuffers)
                {
                    Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenRenderbuffers(Int32 n, out Int32 renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* renderbuffers_ptr = &renderbuffers)
                {
                    Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                    renderbuffers = *renderbuffers_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GenRenderbuffers(Int32 n, Int32* renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenRenderbuffers(Int32 n, UInt32[] renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* renderbuffers_ptr = renderbuffers)
                {
                    Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenRenderbuffers(Int32 n, out UInt32 renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* renderbuffers_ptr = &renderbuffers)
                {
                    Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                    renderbuffers = *renderbuffers_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GenRenderbuffers(Int32 n, UInt32* renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenTextures(Int32 n, Int32[] textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* textures_ptr = textures)
                {
                    Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenTextures(Int32 n, out Int32 textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* textures_ptr = &textures)
                {
                    Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                    textures = *textures_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GenTextures(Int32 n, Int32* textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGenTextures((Int32)n, (UInt32*)textures);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenTextures(Int32 n, UInt32[] textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* textures_ptr = textures)
                {
                    Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenTextures(Int32 n, out UInt32 textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* textures_ptr = &textures)
                {
                    Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                    textures = *textures_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GenTextures(Int32 n, UInt32* textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGenTextures((Int32)n, (UInt32*)textures);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenVertexArrays(Int32 n, Int32[] arrays)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* arrays_ptr = arrays)
                {
                    Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenVertexArrays(Int32 n, out Int32 arrays)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* arrays_ptr = &arrays)
                {
                    Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                    arrays = *arrays_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GenVertexArrays(Int32 n, Int32* arrays)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenVertexArrays(Int32 n, UInt32[] arrays)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* arrays_ptr = arrays)
                {
                    Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenVertexArrays(Int32 n, out UInt32 arrays)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* arrays_ptr = &arrays)
                {
                    Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays_ptr);
                    arrays = *arrays_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GenVertexArrays(Int32 n, UInt32* arrays)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGenVertexArrays((Int32)n, (UInt32*)arrays);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, out Int32 length, out Int32 size, out Chela.Graphics.GL2.ActiveAttribType type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (Chela.Graphics.GL2.ActiveAttribType* type_ptr = &type)
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (Chela.Graphics.GL2.ActiveAttribType*)type_ptr, name_ptr.Address);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetActiveAttrib(Int32 program, Int32 index, Int32 bufSize, Int32* length, Int32* size, Chela.Graphics.GL2.ActiveAttribType* type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle name_ptr = StringHandle.Alloc(name);
            try
            {
                Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (Chela.Graphics.GL2.ActiveAttribType*)type, name_ptr.Address);
            }
            finally
            {
                name_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, out Int32 length, out Int32 size, out Chela.Graphics.GL2.ActiveAttribType type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (Chela.Graphics.GL2.ActiveAttribType* type_ptr = &type)
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (Chela.Graphics.GL2.ActiveAttribType*)type_ptr, name_ptr.Address);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufSize, Int32* length, Int32* size, Chela.Graphics.GL2.ActiveAttribType* type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle name_ptr = StringHandle.Alloc(name);
            try
            {
                Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (Chela.Graphics.GL2.ActiveAttribType*)type, name_ptr.Address);
            }
            finally
            {
                name_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, out Int32 length, out Int32 size, out Chela.Graphics.GL2.ActiveUniformType type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (Chela.Graphics.GL2.ActiveUniformType* type_ptr = &type)
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (Chela.Graphics.GL2.ActiveUniformType*)type_ptr, name_ptr.Address);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetActiveUniform(Int32 program, Int32 index, Int32 bufSize, Int32* length, Int32* size, Chela.Graphics.GL2.ActiveUniformType* type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle name_ptr = StringHandle.Alloc(name);
            try
            {
                Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (Chela.Graphics.GL2.ActiveUniformType*)type, name_ptr.Address);
            }
            finally
            {
                name_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, out Int32 length, out Int32 size, out Chela.Graphics.GL2.ActiveUniformType type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (Chela.Graphics.GL2.ActiveUniformType* type_ptr = &type)
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (Chela.Graphics.GL2.ActiveUniformType*)type_ptr, name_ptr.Address);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufSize, Int32* length, Int32* size, Chela.Graphics.GL2.ActiveUniformType* type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle name_ptr = StringHandle.Alloc(name);
            try
            {
                Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (Chela.Graphics.GL2.ActiveUniformType*)type, name_ptr.Address);
            }
            finally
            {
                name_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, Chela.Graphics.GL2.ActiveUniformBlockParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (Chela.Graphics.GL2.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, Chela.Graphics.GL2.ActiveUniformBlockParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (Chela.Graphics.GL2.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetActiveUniformBlock(Int32 program, Int32 uniformBlockIndex, Chela.Graphics.GL2.ActiveUniformBlockParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (Chela.Graphics.GL2.ActiveUniformBlockParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, Chela.Graphics.GL2.ActiveUniformBlockParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (Chela.Graphics.GL2.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, Chela.Graphics.GL2.ActiveUniformBlockParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (Chela.Graphics.GL2.ActiveUniformBlockParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetActiveUniformBlock(UInt32 program, UInt32 uniformBlockIndex, Chela.Graphics.GL2.ActiveUniformBlockParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetActiveUniformBlockiv((UInt32)program, (UInt32)uniformBlockIndex, (Chela.Graphics.GL2.ActiveUniformBlockParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveUniformBlockName(Int32 program, Int32 uniformBlockIndex, Int32 bufSize, out Int32 length, StringBuilder uniformBlockName)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    StringHandle uniformBlockName_ptr = StringHandle.Alloc(uniformBlockName);
                    try
                    {
                        Delegates.glGetActiveUniformBlockName((UInt32)program, (UInt32)uniformBlockIndex, (Int32)bufSize, (Int32*)length_ptr, uniformBlockName_ptr.Address);
                        length = *length_ptr;
                    }
                    finally
                    {
                        uniformBlockName_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetActiveUniformBlockName(Int32 program, Int32 uniformBlockIndex, Int32 bufSize, Int32* length, StringBuilder uniformBlockName)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle uniformBlockName_ptr = StringHandle.Alloc(uniformBlockName);
            try
            {
                Delegates.glGetActiveUniformBlockName((UInt32)program, (UInt32)uniformBlockIndex, (Int32)bufSize, (Int32*)length, uniformBlockName_ptr.Address);
            }
            finally
            {
                uniformBlockName_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, Int32 bufSize, out Int32 length, StringBuilder uniformBlockName)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    StringHandle uniformBlockName_ptr = StringHandle.Alloc(uniformBlockName);
                    try
                    {
                        Delegates.glGetActiveUniformBlockName((UInt32)program, (UInt32)uniformBlockIndex, (Int32)bufSize, (Int32*)length_ptr, uniformBlockName_ptr.Address);
                        length = *length_ptr;
                    }
                    finally
                    {
                        uniformBlockName_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetActiveUniformBlockName(UInt32 program, UInt32 uniformBlockIndex, Int32 bufSize, Int32* length, StringBuilder uniformBlockName)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle uniformBlockName_ptr = StringHandle.Alloc(uniformBlockName);
            try
            {
                Delegates.glGetActiveUniformBlockName((UInt32)program, (UInt32)uniformBlockIndex, (Int32)bufSize, (Int32*)length, uniformBlockName_ptr.Address);
            }
            finally
            {
                uniformBlockName_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveUniformName(Int32 program, Int32 uniformIndex, Int32 bufSize, out Int32 length, StringBuilder uniformName)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    StringHandle uniformName_ptr = StringHandle.Alloc(uniformName);
                    try
                    {
                        Delegates.glGetActiveUniformName((UInt32)program, (UInt32)uniformIndex, (Int32)bufSize, (Int32*)length_ptr, uniformName_ptr.Address);
                        length = *length_ptr;
                    }
                    finally
                    {
                        uniformName_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetActiveUniformName(Int32 program, Int32 uniformIndex, Int32 bufSize, Int32* length, StringBuilder uniformName)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle uniformName_ptr = StringHandle.Alloc(uniformName);
            try
            {
                Delegates.glGetActiveUniformName((UInt32)program, (UInt32)uniformIndex, (Int32)bufSize, (Int32*)length, uniformName_ptr.Address);
            }
            finally
            {
                uniformName_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveUniformName(UInt32 program, UInt32 uniformIndex, Int32 bufSize, out Int32 length, StringBuilder uniformName)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    StringHandle uniformName_ptr = StringHandle.Alloc(uniformName);
                    try
                    {
                        Delegates.glGetActiveUniformName((UInt32)program, (UInt32)uniformIndex, (Int32)bufSize, (Int32*)length_ptr, uniformName_ptr.Address);
                        length = *length_ptr;
                    }
                    finally
                    {
                        uniformName_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetActiveUniformName(UInt32 program, UInt32 uniformIndex, Int32 bufSize, Int32* length, StringBuilder uniformName)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle uniformName_ptr = StringHandle.Alloc(uniformName);
            try
            {
                Delegates.glGetActiveUniformName((UInt32)program, (UInt32)uniformIndex, (Int32)bufSize, (Int32*)length, uniformName_ptr.Address);
            }
            finally
            {
                uniformName_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveUniforms(Int32 program, Int32 uniformCount, Int32[] uniformIndices, Chela.Graphics.GL2.ActiveUniformParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* uniformIndices_ptr = uniformIndices)
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (Chela.Graphics.GL2.ActiveUniformParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveUniforms(Int32 program, Int32 uniformCount, ref Int32 uniformIndices, Chela.Graphics.GL2.ActiveUniformParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* uniformIndices_ptr = &uniformIndices)
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (Chela.Graphics.GL2.ActiveUniformParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetActiveUniforms(Int32 program, Int32 uniformCount, Int32* uniformIndices, Chela.Graphics.GL2.ActiveUniformParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices, (Chela.Graphics.GL2.ActiveUniformParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveUniforms(UInt32 program, Int32 uniformCount, UInt32[] uniformIndices, Chela.Graphics.GL2.ActiveUniformParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* uniformIndices_ptr = uniformIndices)
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (Chela.Graphics.GL2.ActiveUniformParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveUniforms(UInt32 program, Int32 uniformCount, ref UInt32 uniformIndices, Chela.Graphics.GL2.ActiveUniformParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* uniformIndices_ptr = &uniformIndices)
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices_ptr, (Chela.Graphics.GL2.ActiveUniformParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetActiveUniforms(UInt32 program, Int32 uniformCount, UInt32* uniformIndices, Chela.Graphics.GL2.ActiveUniformParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetActiveUniformsiv((UInt32)program, (Int32)uniformCount, (UInt32*)uniformIndices, (Chela.Graphics.GL2.ActiveUniformParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetAttachedShaders(Int32 program, Int32 maxCount, out Int32 count, out Int32 obj)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (Int32* obj_ptr = &obj)
                {
                    Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                    count = *count_ptr;
                    obj = *obj_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetAttachedShaders(Int32 program, Int32 maxCount, Int32* count, Int32[] obj)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            fixed (Int32* obj_ptr = obj)
            {
                Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj_ptr);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetAttachedShaders(Int32 program, Int32 maxCount, Int32* count, Int32* obj)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetAttachedShaders(UInt32 program, Int32 maxCount, out Int32 count, out UInt32 obj)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (UInt32* obj_ptr = &obj)
                {
                    Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count_ptr, (UInt32*)obj_ptr);
                    count = *count_ptr;
                    obj = *obj_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetAttachedShaders(UInt32 program, Int32 maxCount, Int32* count, UInt32[] obj)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            fixed (UInt32* obj_ptr = obj)
            {
                Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj_ptr);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetAttachedShaders(UInt32 program, Int32 maxCount, Int32* count, UInt32* obj)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxCount, (Int32*)count, (UInt32*)obj);
            #if DEBUG
            }
            #endif
        }

        public static 
        Int32 GetAttribLocation(Int32 program, String name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    return Delegates.glGetAttribLocation((UInt32)program, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        Int32 GetAttribLocation(UInt32 program, String name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    return Delegates.glGetAttribLocation((UInt32)program, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBoolean(Chela.Graphics.GL2.GetIndexedPName target, Int32 index, bool[] data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (bool* data_ptr = data)
                {
                    Delegates.glGetBooleani_v((Chela.Graphics.GL2.GetIndexedPName)target, (UInt32)index, (bool*)data_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBoolean(Chela.Graphics.GL2.GetIndexedPName target, Int32 index, out bool data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (bool* data_ptr = &data)
                {
                    Delegates.glGetBooleani_v((Chela.Graphics.GL2.GetIndexedPName)target, (UInt32)index, (bool*)data_ptr);
                    data = *data_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetBoolean(Chela.Graphics.GL2.GetIndexedPName target, Int32 index, bool* data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetBooleani_v((Chela.Graphics.GL2.GetIndexedPName)target, (UInt32)index, (bool*)data);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBoolean(Chela.Graphics.GL2.GetIndexedPName target, UInt32 index, bool[] data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (bool* data_ptr = data)
                {
                    Delegates.glGetBooleani_v((Chela.Graphics.GL2.GetIndexedPName)target, (UInt32)index, (bool*)data_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBoolean(Chela.Graphics.GL2.GetIndexedPName target, UInt32 index, out bool data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (bool* data_ptr = &data)
                {
                    Delegates.glGetBooleani_v((Chela.Graphics.GL2.GetIndexedPName)target, (UInt32)index, (bool*)data_ptr);
                    data = *data_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetBoolean(Chela.Graphics.GL2.GetIndexedPName target, UInt32 index, bool* data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetBooleani_v((Chela.Graphics.GL2.GetIndexedPName)target, (UInt32)index, (bool*)data);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBoolean(Chela.Graphics.GL2.GetPName pname, bool[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (bool* @params_ptr = @params)
                {
                    Delegates.glGetBooleanv((Chela.Graphics.GL2.GetPName)pname, (bool*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBoolean(Chela.Graphics.GL2.GetPName pname, out bool @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (bool* @params_ptr = &@params)
                {
                    Delegates.glGetBooleanv((Chela.Graphics.GL2.GetPName)pname, (bool*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetBoolean(Chela.Graphics.GL2.GetPName pname, bool* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetBooleanv((Chela.Graphics.GL2.GetPName)pname, (bool*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBufferParameteri64(Chela.Graphics.GL2.Version32 target, Chela.Graphics.GL2.Version32 pname, Int64[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int64* @params_ptr = @params)
                {
                    Delegates.glGetBufferParameteri64v((Chela.Graphics.GL2.Version32)target, (Chela.Graphics.GL2.Version32)pname, (Int64*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBufferParameteri64(Chela.Graphics.GL2.Version32 target, Chela.Graphics.GL2.Version32 pname, out Int64 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int64* @params_ptr = &@params)
                {
                    Delegates.glGetBufferParameteri64v((Chela.Graphics.GL2.Version32)target, (Chela.Graphics.GL2.Version32)pname, (Int64*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetBufferParameteri64(Chela.Graphics.GL2.Version32 target, Chela.Graphics.GL2.Version32 pname, Int64* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetBufferParameteri64v((Chela.Graphics.GL2.Version32)target, (Chela.Graphics.GL2.Version32)pname, (Int64*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBufferParameter(Chela.Graphics.GL2.BufferTarget target, Chela.Graphics.GL2.BufferParameterName pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetBufferParameteriv((Chela.Graphics.GL2.BufferTarget)target, (Chela.Graphics.GL2.BufferParameterName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBufferParameter(Chela.Graphics.GL2.BufferTarget target, Chela.Graphics.GL2.BufferParameterName pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetBufferParameteriv((Chela.Graphics.GL2.BufferTarget)target, (Chela.Graphics.GL2.BufferParameterName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetBufferParameter(Chela.Graphics.GL2.BufferTarget target, Chela.Graphics.GL2.BufferParameterName pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetBufferParameteriv((Chela.Graphics.GL2.BufferTarget)target, (Chela.Graphics.GL2.BufferParameterName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBufferPointer(Chela.Graphics.GL2.BufferTarget target, Chela.Graphics.GL2.BufferPointer pname, IntPtr @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glGetBufferPointerv((Chela.Graphics.GL2.BufferTarget)target, (Chela.Graphics.GL2.BufferPointer)pname, (IntPtr)@params);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBufferPointer<T2>(Chela.Graphics.GL2.BufferTarget target, Chela.Graphics.GL2.BufferPointer pname, T2[] @params)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferPointerv((Chela.Graphics.GL2.BufferTarget)target, (Chela.Graphics.GL2.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBufferPointer<T2>(Chela.Graphics.GL2.BufferTarget target, Chela.Graphics.GL2.BufferPointer pname, T2[,] @params)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferPointerv((Chela.Graphics.GL2.BufferTarget)target, (Chela.Graphics.GL2.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBufferPointer<T2>(Chela.Graphics.GL2.BufferTarget target, Chela.Graphics.GL2.BufferPointer pname, T2[,,] @params)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferPointerv((Chela.Graphics.GL2.BufferTarget)target, (Chela.Graphics.GL2.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBufferPointer<T2>(Chela.Graphics.GL2.BufferTarget target, Chela.Graphics.GL2.BufferPointer pname, ref T2 @params)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferPointerv((Chela.Graphics.GL2.BufferTarget)target, (Chela.Graphics.GL2.BufferPointer)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    @params = (T2)@params_ptr.Target;
                }
                finally
                {
                    @params_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBufferSubData(Chela.Graphics.GL2.BufferTarget target, IntPtr offset, IntPtr size, IntPtr data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glGetBufferSubData((Chela.Graphics.GL2.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBufferSubData<T3>(Chela.Graphics.GL2.BufferTarget target, IntPtr offset, IntPtr size, T3[] data)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferSubData((Chela.Graphics.GL2.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBufferSubData<T3>(Chela.Graphics.GL2.BufferTarget target, IntPtr offset, IntPtr size, T3[,] data)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferSubData((Chela.Graphics.GL2.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBufferSubData<T3>(Chela.Graphics.GL2.BufferTarget target, IntPtr offset, IntPtr size, T3[,,] data)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferSubData((Chela.Graphics.GL2.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBufferSubData<T3>(Chela.Graphics.GL2.BufferTarget target, IntPtr offset, IntPtr size, ref T3 data)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetBufferSubData((Chela.Graphics.GL2.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T3)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetClipPlane(Chela.Graphics.GL2.ClipPlaneName plane, Double[] equation)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* equation_ptr = equation)
                {
                    Delegates.glGetClipPlane((Chela.Graphics.GL2.ClipPlaneName)plane, (Double*)equation_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetClipPlane(Chela.Graphics.GL2.ClipPlaneName plane, out Double equation)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* equation_ptr = &equation)
                {
                    Delegates.glGetClipPlane((Chela.Graphics.GL2.ClipPlaneName)plane, (Double*)equation_ptr);
                    equation = *equation_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetClipPlane(Chela.Graphics.GL2.ClipPlaneName plane, Double* equation)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetClipPlane((Chela.Graphics.GL2.ClipPlaneName)plane, (Double*)equation);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetColorTable(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr table)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glGetColorTable((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetColorTable<T3>(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T3[] table)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetColorTable((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    table_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetColorTable<T3>(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T3[,] table)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetColorTable((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    table_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetColorTable<T3>(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T3[,,] table)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetColorTable((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    table_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetColorTable<T3>(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T3 table)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetColorTable((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                    table = (T3)table_ptr.Target;
                }
                finally
                {
                    table_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetColorTableParameter(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.GetColorTableParameterPName pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetColorTableParameterfv((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.GetColorTableParameterPName)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetColorTableParameter(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.GetColorTableParameterPName pname, out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetColorTableParameterfv((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.GetColorTableParameterPName)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetColorTableParameter(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.GetColorTableParameterPName pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetColorTableParameterfv((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.GetColorTableParameterPName)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetColorTableParameter(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.GetColorTableParameterPName pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetColorTableParameteriv((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.GetColorTableParameterPName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetColorTableParameter(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.GetColorTableParameterPName pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetColorTableParameteriv((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.GetColorTableParameterPName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetColorTableParameter(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.GetColorTableParameterPName pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetColorTableParameteriv((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.GetColorTableParameterPName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetCompressedTexImage(Chela.Graphics.GL2.TextureTarget target, Int32 level, IntPtr img)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glGetCompressedTexImage((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (IntPtr)img);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetCompressedTexImage<T2>(Chela.Graphics.GL2.TextureTarget target, Int32 level, T2[] img)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTexImage((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetCompressedTexImage<T2>(Chela.Graphics.GL2.TextureTarget target, Int32 level, T2[,] img)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTexImage((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetCompressedTexImage<T2>(Chela.Graphics.GL2.TextureTarget target, Int32 level, T2[,,] img)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTexImage((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    img_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetCompressedTexImage<T2>(Chela.Graphics.GL2.TextureTarget target, Int32 level, ref T2 img)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetCompressedTexImage((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (IntPtr)img_ptr.AddrOfPinnedObject());
                    img = (T2)img_ptr.Target;
                }
                finally
                {
                    img_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetConvolutionFilter(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr image)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glGetConvolutionFilter((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetConvolutionFilter<T3>(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T3[] image)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetConvolutionFilter((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetConvolutionFilter<T3>(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T3[,] image)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetConvolutionFilter((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetConvolutionFilter<T3>(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T3[,,] image)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetConvolutionFilter((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    image_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetConvolutionFilter<T3>(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T3 image)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetConvolutionFilter((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                    image = (T3)image_ptr.Target;
                }
                finally
                {
                    image_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetConvolutionParameter(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.GetConvolutionParameterPName pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetConvolutionParameterfv((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.GetConvolutionParameterPName)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetConvolutionParameter(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.GetConvolutionParameterPName pname, out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetConvolutionParameterfv((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.GetConvolutionParameterPName)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetConvolutionParameter(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.GetConvolutionParameterPName pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetConvolutionParameterfv((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.GetConvolutionParameterPName)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetConvolutionParameter(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.GetConvolutionParameterPName pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetConvolutionParameteriv((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.GetConvolutionParameterPName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetConvolutionParameter(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.GetConvolutionParameterPName pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetConvolutionParameteriv((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.GetConvolutionParameterPName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetConvolutionParameter(Chela.Graphics.GL2.ConvolutionTarget target, Chela.Graphics.GL2.GetConvolutionParameterPName pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetConvolutionParameteriv((Chela.Graphics.GL2.ConvolutionTarget)target, (Chela.Graphics.GL2.GetConvolutionParameterPName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetDouble(Chela.Graphics.GL2.GetPName pname, Double[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Delegates.glGetDoublev((Chela.Graphics.GL2.GetPName)pname, (Double*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetDouble(Chela.Graphics.GL2.GetPName pname, out Double @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Delegates.glGetDoublev((Chela.Graphics.GL2.GetPName)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetDouble(Chela.Graphics.GL2.GetPName pname, Double* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetDoublev((Chela.Graphics.GL2.GetPName)pname, (Double*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        Chela.Graphics.GL2.ErrorCode GetError()
        {
            unsafe
            {
                return Delegates.glGetError();
            }
        }

        public static 
        void GetFloat(Chela.Graphics.GL2.GetPName pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetFloatv((Chela.Graphics.GL2.GetPName)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetFloat(Chela.Graphics.GL2.GetPName pname, out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetFloatv((Chela.Graphics.GL2.GetPName)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetFloat(Chela.Graphics.GL2.GetPName pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetFloatv((Chela.Graphics.GL2.GetPName)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        Int32 GetFragDataLocation(Int32 program, String name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    return Delegates.glGetFragDataLocation((UInt32)program, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        Int32 GetFragDataLocation(UInt32 program, String name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    return Delegates.glGetFragDataLocation((UInt32)program, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetFramebufferAttachmentParameter(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.FramebufferParameterName pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetFramebufferAttachmentParameteriv((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.FramebufferParameterName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetFramebufferAttachmentParameter(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.FramebufferParameterName pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetFramebufferAttachmentParameteriv((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.FramebufferParameterName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetFramebufferAttachmentParameter(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.FramebufferParameterName pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetFramebufferAttachmentParameteriv((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.FramebufferParameterName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetHistogram(Chela.Graphics.GL2.HistogramTarget target, bool reset, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glGetHistogram((Chela.Graphics.GL2.HistogramTarget)target, (bool)reset, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)values);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetHistogram<T4>(Chela.Graphics.GL2.HistogramTarget target, bool reset, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T4[] values)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetHistogram((Chela.Graphics.GL2.HistogramTarget)target, (bool)reset, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetHistogram<T4>(Chela.Graphics.GL2.HistogramTarget target, bool reset, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T4[,] values)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetHistogram((Chela.Graphics.GL2.HistogramTarget)target, (bool)reset, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetHistogram<T4>(Chela.Graphics.GL2.HistogramTarget target, bool reset, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T4[,,] values)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetHistogram((Chela.Graphics.GL2.HistogramTarget)target, (bool)reset, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetHistogram<T4>(Chela.Graphics.GL2.HistogramTarget target, bool reset, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T4 values)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetHistogram((Chela.Graphics.GL2.HistogramTarget)target, (bool)reset, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                    values = (T4)values_ptr.Target;
                }
                finally
                {
                    values_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetHistogramParameter(Chela.Graphics.GL2.HistogramTarget target, Chela.Graphics.GL2.GetHistogramParameterPName pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetHistogramParameterfv((Chela.Graphics.GL2.HistogramTarget)target, (Chela.Graphics.GL2.GetHistogramParameterPName)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetHistogramParameter(Chela.Graphics.GL2.HistogramTarget target, Chela.Graphics.GL2.GetHistogramParameterPName pname, out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetHistogramParameterfv((Chela.Graphics.GL2.HistogramTarget)target, (Chela.Graphics.GL2.GetHistogramParameterPName)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetHistogramParameter(Chela.Graphics.GL2.HistogramTarget target, Chela.Graphics.GL2.GetHistogramParameterPName pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetHistogramParameterfv((Chela.Graphics.GL2.HistogramTarget)target, (Chela.Graphics.GL2.GetHistogramParameterPName)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetHistogramParameter(Chela.Graphics.GL2.HistogramTarget target, Chela.Graphics.GL2.GetHistogramParameterPName pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetHistogramParameteriv((Chela.Graphics.GL2.HistogramTarget)target, (Chela.Graphics.GL2.GetHistogramParameterPName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetHistogramParameter(Chela.Graphics.GL2.HistogramTarget target, Chela.Graphics.GL2.GetHistogramParameterPName pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetHistogramParameteriv((Chela.Graphics.GL2.HistogramTarget)target, (Chela.Graphics.GL2.GetHistogramParameterPName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetHistogramParameter(Chela.Graphics.GL2.HistogramTarget target, Chela.Graphics.GL2.GetHistogramParameterPName pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetHistogramParameteriv((Chela.Graphics.GL2.HistogramTarget)target, (Chela.Graphics.GL2.GetHistogramParameterPName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetInteger64(Chela.Graphics.GL2.Version32 target, Int32 index, Int64[] data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int64* data_ptr = data)
                {
                    Delegates.glGetInteger64i_v((Chela.Graphics.GL2.Version32)target, (UInt32)index, (Int64*)data_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetInteger64(Chela.Graphics.GL2.Version32 target, Int32 index, out Int64 data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int64* data_ptr = &data)
                {
                    Delegates.glGetInteger64i_v((Chela.Graphics.GL2.Version32)target, (UInt32)index, (Int64*)data_ptr);
                    data = *data_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetInteger64(Chela.Graphics.GL2.Version32 target, Int32 index, Int64* data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetInteger64i_v((Chela.Graphics.GL2.Version32)target, (UInt32)index, (Int64*)data);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetInteger64(Chela.Graphics.GL2.Version32 target, UInt32 index, Int64[] data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int64* data_ptr = data)
                {
                    Delegates.glGetInteger64i_v((Chela.Graphics.GL2.Version32)target, (UInt32)index, (Int64*)data_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetInteger64(Chela.Graphics.GL2.Version32 target, UInt32 index, out Int64 data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int64* data_ptr = &data)
                {
                    Delegates.glGetInteger64i_v((Chela.Graphics.GL2.Version32)target, (UInt32)index, (Int64*)data_ptr);
                    data = *data_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetInteger64(Chela.Graphics.GL2.Version32 target, UInt32 index, Int64* data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetInteger64i_v((Chela.Graphics.GL2.Version32)target, (UInt32)index, (Int64*)data);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetInteger64(Chela.Graphics.GL2.ArbSync pname, Int64[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int64* @params_ptr = @params)
                {
                    Delegates.glGetInteger64v((Chela.Graphics.GL2.ArbSync)pname, (Int64*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetInteger64(Chela.Graphics.GL2.ArbSync pname, out Int64 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int64* @params_ptr = &@params)
                {
                    Delegates.glGetInteger64v((Chela.Graphics.GL2.ArbSync)pname, (Int64*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetInteger64(Chela.Graphics.GL2.ArbSync pname, Int64* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetInteger64v((Chela.Graphics.GL2.ArbSync)pname, (Int64*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetInteger(Chela.Graphics.GL2.GetIndexedPName target, Int32 index, Int32[] data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* data_ptr = data)
                {
                    Delegates.glGetIntegeri_v((Chela.Graphics.GL2.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetInteger(Chela.Graphics.GL2.GetIndexedPName target, Int32 index, out Int32 data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* data_ptr = &data)
                {
                    Delegates.glGetIntegeri_v((Chela.Graphics.GL2.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
                    data = *data_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetInteger(Chela.Graphics.GL2.GetIndexedPName target, Int32 index, Int32* data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetIntegeri_v((Chela.Graphics.GL2.GetIndexedPName)target, (UInt32)index, (Int32*)data);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetInteger(Chela.Graphics.GL2.GetIndexedPName target, UInt32 index, Int32[] data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* data_ptr = data)
                {
                    Delegates.glGetIntegeri_v((Chela.Graphics.GL2.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetInteger(Chela.Graphics.GL2.GetIndexedPName target, UInt32 index, out Int32 data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* data_ptr = &data)
                {
                    Delegates.glGetIntegeri_v((Chela.Graphics.GL2.GetIndexedPName)target, (UInt32)index, (Int32*)data_ptr);
                    data = *data_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetInteger(Chela.Graphics.GL2.GetIndexedPName target, UInt32 index, Int32* data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetIntegeri_v((Chela.Graphics.GL2.GetIndexedPName)target, (UInt32)index, (Int32*)data);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetInteger(Chela.Graphics.GL2.GetPName pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetIntegerv((Chela.Graphics.GL2.GetPName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetInteger(Chela.Graphics.GL2.GetPName pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetIntegerv((Chela.Graphics.GL2.GetPName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetInteger(Chela.Graphics.GL2.GetPName pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetIntegerv((Chela.Graphics.GL2.GetPName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetLight(Chela.Graphics.GL2.LightName light, Chela.Graphics.GL2.LightParameter pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetLightfv((Chela.Graphics.GL2.LightName)light, (Chela.Graphics.GL2.LightParameter)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetLight(Chela.Graphics.GL2.LightName light, Chela.Graphics.GL2.LightParameter pname, out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetLightfv((Chela.Graphics.GL2.LightName)light, (Chela.Graphics.GL2.LightParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetLight(Chela.Graphics.GL2.LightName light, Chela.Graphics.GL2.LightParameter pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetLightfv((Chela.Graphics.GL2.LightName)light, (Chela.Graphics.GL2.LightParameter)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetLight(Chela.Graphics.GL2.LightName light, Chela.Graphics.GL2.LightParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetLightiv((Chela.Graphics.GL2.LightName)light, (Chela.Graphics.GL2.LightParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetLight(Chela.Graphics.GL2.LightName light, Chela.Graphics.GL2.LightParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetLightiv((Chela.Graphics.GL2.LightName)light, (Chela.Graphics.GL2.LightParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetLight(Chela.Graphics.GL2.LightName light, Chela.Graphics.GL2.LightParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetLightiv((Chela.Graphics.GL2.LightName)light, (Chela.Graphics.GL2.LightParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetMap(Chela.Graphics.GL2.MapTarget target, Chela.Graphics.GL2.GetMapQuery query, Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glGetMapdv((Chela.Graphics.GL2.MapTarget)target, (Chela.Graphics.GL2.GetMapQuery)query, (Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetMap(Chela.Graphics.GL2.MapTarget target, Chela.Graphics.GL2.GetMapQuery query, out Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glGetMapdv((Chela.Graphics.GL2.MapTarget)target, (Chela.Graphics.GL2.GetMapQuery)query, (Double*)v_ptr);
                    v = *v_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetMap(Chela.Graphics.GL2.MapTarget target, Chela.Graphics.GL2.GetMapQuery query, Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetMapdv((Chela.Graphics.GL2.MapTarget)target, (Chela.Graphics.GL2.GetMapQuery)query, (Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetMap(Chela.Graphics.GL2.MapTarget target, Chela.Graphics.GL2.GetMapQuery query, Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glGetMapfv((Chela.Graphics.GL2.MapTarget)target, (Chela.Graphics.GL2.GetMapQuery)query, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetMap(Chela.Graphics.GL2.MapTarget target, Chela.Graphics.GL2.GetMapQuery query, out Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glGetMapfv((Chela.Graphics.GL2.MapTarget)target, (Chela.Graphics.GL2.GetMapQuery)query, (Single*)v_ptr);
                    v = *v_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetMap(Chela.Graphics.GL2.MapTarget target, Chela.Graphics.GL2.GetMapQuery query, Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetMapfv((Chela.Graphics.GL2.MapTarget)target, (Chela.Graphics.GL2.GetMapQuery)query, (Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetMap(Chela.Graphics.GL2.MapTarget target, Chela.Graphics.GL2.GetMapQuery query, Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glGetMapiv((Chela.Graphics.GL2.MapTarget)target, (Chela.Graphics.GL2.GetMapQuery)query, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetMap(Chela.Graphics.GL2.MapTarget target, Chela.Graphics.GL2.GetMapQuery query, out Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glGetMapiv((Chela.Graphics.GL2.MapTarget)target, (Chela.Graphics.GL2.GetMapQuery)query, (Int32*)v_ptr);
                    v = *v_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetMap(Chela.Graphics.GL2.MapTarget target, Chela.Graphics.GL2.GetMapQuery query, Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetMapiv((Chela.Graphics.GL2.MapTarget)target, (Chela.Graphics.GL2.GetMapQuery)query, (Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetMaterial(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetMaterialfv((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetMaterial(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetMaterialfv((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetMaterial(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetMaterialfv((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetMaterial(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetMaterialiv((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetMaterial(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetMaterialiv((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetMaterial(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetMaterialiv((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetMinmax(Chela.Graphics.GL2.MinmaxTarget target, bool reset, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glGetMinmax((Chela.Graphics.GL2.MinmaxTarget)target, (bool)reset, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)values);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetMinmax<T4>(Chela.Graphics.GL2.MinmaxTarget target, bool reset, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T4[] values)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetMinmax((Chela.Graphics.GL2.MinmaxTarget)target, (bool)reset, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetMinmax<T4>(Chela.Graphics.GL2.MinmaxTarget target, bool reset, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T4[,] values)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetMinmax((Chela.Graphics.GL2.MinmaxTarget)target, (bool)reset, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetMinmax<T4>(Chela.Graphics.GL2.MinmaxTarget target, bool reset, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T4[,,] values)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetMinmax((Chela.Graphics.GL2.MinmaxTarget)target, (bool)reset, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    values_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetMinmax<T4>(Chela.Graphics.GL2.MinmaxTarget target, bool reset, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T4 values)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetMinmax((Chela.Graphics.GL2.MinmaxTarget)target, (bool)reset, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                    values = (T4)values_ptr.Target;
                }
                finally
                {
                    values_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetMinmaxParameter(Chela.Graphics.GL2.MinmaxTarget target, Chela.Graphics.GL2.GetMinmaxParameterPName pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetMinmaxParameterfv((Chela.Graphics.GL2.MinmaxTarget)target, (Chela.Graphics.GL2.GetMinmaxParameterPName)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetMinmaxParameter(Chela.Graphics.GL2.MinmaxTarget target, Chela.Graphics.GL2.GetMinmaxParameterPName pname, out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetMinmaxParameterfv((Chela.Graphics.GL2.MinmaxTarget)target, (Chela.Graphics.GL2.GetMinmaxParameterPName)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetMinmaxParameter(Chela.Graphics.GL2.MinmaxTarget target, Chela.Graphics.GL2.GetMinmaxParameterPName pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetMinmaxParameterfv((Chela.Graphics.GL2.MinmaxTarget)target, (Chela.Graphics.GL2.GetMinmaxParameterPName)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetMinmaxParameter(Chela.Graphics.GL2.MinmaxTarget target, Chela.Graphics.GL2.GetMinmaxParameterPName pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetMinmaxParameteriv((Chela.Graphics.GL2.MinmaxTarget)target, (Chela.Graphics.GL2.GetMinmaxParameterPName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetMinmaxParameter(Chela.Graphics.GL2.MinmaxTarget target, Chela.Graphics.GL2.GetMinmaxParameterPName pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetMinmaxParameteriv((Chela.Graphics.GL2.MinmaxTarget)target, (Chela.Graphics.GL2.GetMinmaxParameterPName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetMinmaxParameter(Chela.Graphics.GL2.MinmaxTarget target, Chela.Graphics.GL2.GetMinmaxParameterPName pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetMinmaxParameteriv((Chela.Graphics.GL2.MinmaxTarget)target, (Chela.Graphics.GL2.GetMinmaxParameterPName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetMultisample(Chela.Graphics.GL2.GetMultisamplePName pname, Int32 index, Single[] val)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* val_ptr = val)
                {
                    Delegates.glGetMultisamplefv((Chela.Graphics.GL2.GetMultisamplePName)pname, (UInt32)index, (Single*)val_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetMultisample(Chela.Graphics.GL2.GetMultisamplePName pname, Int32 index, out Single val)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* val_ptr = &val)
                {
                    Delegates.glGetMultisamplefv((Chela.Graphics.GL2.GetMultisamplePName)pname, (UInt32)index, (Single*)val_ptr);
                    val = *val_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetMultisample(Chela.Graphics.GL2.GetMultisamplePName pname, Int32 index, Single* val)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetMultisamplefv((Chela.Graphics.GL2.GetMultisamplePName)pname, (UInt32)index, (Single*)val);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetMultisample(Chela.Graphics.GL2.GetMultisamplePName pname, UInt32 index, Single[] val)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* val_ptr = val)
                {
                    Delegates.glGetMultisamplefv((Chela.Graphics.GL2.GetMultisamplePName)pname, (UInt32)index, (Single*)val_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetMultisample(Chela.Graphics.GL2.GetMultisamplePName pname, UInt32 index, out Single val)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* val_ptr = &val)
                {
                    Delegates.glGetMultisamplefv((Chela.Graphics.GL2.GetMultisamplePName)pname, (UInt32)index, (Single*)val_ptr);
                    val = *val_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetMultisample(Chela.Graphics.GL2.GetMultisamplePName pname, UInt32 index, Single* val)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetMultisamplefv((Chela.Graphics.GL2.GetMultisamplePName)pname, (UInt32)index, (Single*)val);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetPixelMap(Chela.Graphics.GL2.PixelMap map, Single[] values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* values_ptr = values)
                {
                    Delegates.glGetPixelMapfv((Chela.Graphics.GL2.PixelMap)map, (Single*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetPixelMap(Chela.Graphics.GL2.PixelMap map, out Single values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* values_ptr = &values)
                {
                    Delegates.glGetPixelMapfv((Chela.Graphics.GL2.PixelMap)map, (Single*)values_ptr);
                    values = *values_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetPixelMap(Chela.Graphics.GL2.PixelMap map, Single* values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetPixelMapfv((Chela.Graphics.GL2.PixelMap)map, (Single*)values);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetPixelMap(Chela.Graphics.GL2.PixelMap map, Int32[] values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* values_ptr = values)
                {
                    Delegates.glGetPixelMapuiv((Chela.Graphics.GL2.PixelMap)map, (UInt32*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetPixelMap(Chela.Graphics.GL2.PixelMap map, out Int32 values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* values_ptr = &values)
                {
                    Delegates.glGetPixelMapuiv((Chela.Graphics.GL2.PixelMap)map, (UInt32*)values_ptr);
                    values = *values_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetPixelMap(Chela.Graphics.GL2.PixelMap map, Int32* values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetPixelMapuiv((Chela.Graphics.GL2.PixelMap)map, (UInt32*)values);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetPixelMap(Chela.Graphics.GL2.PixelMap map, UInt32[] values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* values_ptr = values)
                {
                    Delegates.glGetPixelMapuiv((Chela.Graphics.GL2.PixelMap)map, (UInt32*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetPixelMap(Chela.Graphics.GL2.PixelMap map, out UInt32 values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* values_ptr = &values)
                {
                    Delegates.glGetPixelMapuiv((Chela.Graphics.GL2.PixelMap)map, (UInt32*)values_ptr);
                    values = *values_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetPixelMap(Chela.Graphics.GL2.PixelMap map, UInt32* values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetPixelMapuiv((Chela.Graphics.GL2.PixelMap)map, (UInt32*)values);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetPixelMap(Chela.Graphics.GL2.PixelMap map, Int16[] values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* values_ptr = values)
                {
                    Delegates.glGetPixelMapusv((Chela.Graphics.GL2.PixelMap)map, (UInt16*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetPixelMap(Chela.Graphics.GL2.PixelMap map, out Int16 values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* values_ptr = &values)
                {
                    Delegates.glGetPixelMapusv((Chela.Graphics.GL2.PixelMap)map, (UInt16*)values_ptr);
                    values = *values_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetPixelMap(Chela.Graphics.GL2.PixelMap map, Int16* values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetPixelMapusv((Chela.Graphics.GL2.PixelMap)map, (UInt16*)values);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetPixelMap(Chela.Graphics.GL2.PixelMap map, UInt16[] values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt16* values_ptr = values)
                {
                    Delegates.glGetPixelMapusv((Chela.Graphics.GL2.PixelMap)map, (UInt16*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetPixelMap(Chela.Graphics.GL2.PixelMap map, out UInt16 values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt16* values_ptr = &values)
                {
                    Delegates.glGetPixelMapusv((Chela.Graphics.GL2.PixelMap)map, (UInt16*)values_ptr);
                    values = *values_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetPixelMap(Chela.Graphics.GL2.PixelMap map, UInt16* values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetPixelMapusv((Chela.Graphics.GL2.PixelMap)map, (UInt16*)values);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetPointer(Chela.Graphics.GL2.GetPointervPName pname, IntPtr @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glGetPointerv((Chela.Graphics.GL2.GetPointervPName)pname, (IntPtr)@params);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetPointer<T1>(Chela.Graphics.GL2.GetPointervPName pname, T1[] @params)
            where T1 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointerv((Chela.Graphics.GL2.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetPointer<T1>(Chela.Graphics.GL2.GetPointervPName pname, T1[,] @params)
            where T1 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointerv((Chela.Graphics.GL2.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetPointer<T1>(Chela.Graphics.GL2.GetPointervPName pname, T1[,,] @params)
            where T1 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointerv((Chela.Graphics.GL2.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    @params_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetPointer<T1>(Chela.Graphics.GL2.GetPointervPName pname, ref T1 @params)
            where T1 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetPointerv((Chela.Graphics.GL2.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    @params = (T1)@params_ptr.Target;
                }
                finally
                {
                    @params_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetPolygonStipple(Byte[] mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* mask_ptr = mask)
                {
                    Delegates.glGetPolygonStipple((Byte*)mask_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetPolygonStipple(out Byte mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* mask_ptr = &mask)
                {
                    Delegates.glGetPolygonStipple((Byte*)mask_ptr);
                    mask = *mask_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetPolygonStipple(Byte* mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetPolygonStipple((Byte*)mask);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetProgramInfoLog(Int32 program, Int32 bufSize, out Int32 length, StringBuilder infoLog)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    StringHandle infoLog_ptr = StringHandle.Alloc(infoLog);
                    try
                    {
                        Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, infoLog_ptr.Address);
                        length = *length_ptr;
                    }
                    finally
                    {
                        infoLog_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetProgramInfoLog(Int32 program, Int32 bufSize, Int32* length, StringBuilder infoLog)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle infoLog_ptr = StringHandle.Alloc(infoLog);
            try
            {
                Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length, infoLog_ptr.Address);
            }
            finally
            {
                infoLog_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetProgramInfoLog(UInt32 program, Int32 bufSize, out Int32 length, StringBuilder infoLog)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    StringHandle infoLog_ptr = StringHandle.Alloc(infoLog);
                    try
                    {
                        Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, infoLog_ptr.Address);
                        length = *length_ptr;
                    }
                    finally
                    {
                        infoLog_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetProgramInfoLog(UInt32 program, Int32 bufSize, Int32* length, StringBuilder infoLog)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle infoLog_ptr = StringHandle.Alloc(infoLog);
            try
            {
                Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufSize, (Int32*)length, infoLog_ptr.Address);
            }
            finally
            {
                infoLog_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetProgram(Int32 program, Chela.Graphics.GL2.ProgramParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetProgramiv((UInt32)program, (Chela.Graphics.GL2.ProgramParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetProgram(Int32 program, Chela.Graphics.GL2.ProgramParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetProgramiv((UInt32)program, (Chela.Graphics.GL2.ProgramParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetProgram(Int32 program, Chela.Graphics.GL2.ProgramParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetProgramiv((UInt32)program, (Chela.Graphics.GL2.ProgramParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetProgram(UInt32 program, Chela.Graphics.GL2.ProgramParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetProgramiv((UInt32)program, (Chela.Graphics.GL2.ProgramParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetProgram(UInt32 program, Chela.Graphics.GL2.ProgramParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetProgramiv((UInt32)program, (Chela.Graphics.GL2.ProgramParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetProgram(UInt32 program, Chela.Graphics.GL2.ProgramParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetProgramiv((UInt32)program, (Chela.Graphics.GL2.ProgramParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetQuery(Chela.Graphics.GL2.QueryTarget target, Chela.Graphics.GL2.GetQueryParam pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetQueryiv((Chela.Graphics.GL2.QueryTarget)target, (Chela.Graphics.GL2.GetQueryParam)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetQuery(Chela.Graphics.GL2.QueryTarget target, Chela.Graphics.GL2.GetQueryParam pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetQueryiv((Chela.Graphics.GL2.QueryTarget)target, (Chela.Graphics.GL2.GetQueryParam)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetQuery(Chela.Graphics.GL2.QueryTarget target, Chela.Graphics.GL2.GetQueryParam pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetQueryiv((Chela.Graphics.GL2.QueryTarget)target, (Chela.Graphics.GL2.GetQueryParam)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetQueryObject(Int32 id, Chela.Graphics.GL2.GetQueryObjectParam pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetQueryObjectiv((UInt32)id, (Chela.Graphics.GL2.GetQueryObjectParam)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetQueryObject(Int32 id, Chela.Graphics.GL2.GetQueryObjectParam pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetQueryObjectiv((UInt32)id, (Chela.Graphics.GL2.GetQueryObjectParam)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetQueryObject(Int32 id, Chela.Graphics.GL2.GetQueryObjectParam pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetQueryObjectiv((UInt32)id, (Chela.Graphics.GL2.GetQueryObjectParam)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetQueryObject(UInt32 id, Chela.Graphics.GL2.GetQueryObjectParam pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetQueryObjectiv((UInt32)id, (Chela.Graphics.GL2.GetQueryObjectParam)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetQueryObject(UInt32 id, Chela.Graphics.GL2.GetQueryObjectParam pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetQueryObjectiv((UInt32)id, (Chela.Graphics.GL2.GetQueryObjectParam)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetQueryObject(UInt32 id, Chela.Graphics.GL2.GetQueryObjectParam pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetQueryObjectiv((UInt32)id, (Chela.Graphics.GL2.GetQueryObjectParam)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetQueryObject(UInt32 id, Chela.Graphics.GL2.GetQueryObjectParam pname, UInt32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Delegates.glGetQueryObjectuiv((UInt32)id, (Chela.Graphics.GL2.GetQueryObjectParam)pname, (UInt32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetQueryObject(UInt32 id, Chela.Graphics.GL2.GetQueryObjectParam pname, out UInt32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Delegates.glGetQueryObjectuiv((UInt32)id, (Chela.Graphics.GL2.GetQueryObjectParam)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetQueryObject(UInt32 id, Chela.Graphics.GL2.GetQueryObjectParam pname, UInt32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetQueryObjectuiv((UInt32)id, (Chela.Graphics.GL2.GetQueryObjectParam)pname, (UInt32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetRenderbufferParameter(Chela.Graphics.GL2.RenderbufferTarget target, Chela.Graphics.GL2.RenderbufferParameterName pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetRenderbufferParameteriv((Chela.Graphics.GL2.RenderbufferTarget)target, (Chela.Graphics.GL2.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetRenderbufferParameter(Chela.Graphics.GL2.RenderbufferTarget target, Chela.Graphics.GL2.RenderbufferParameterName pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetRenderbufferParameteriv((Chela.Graphics.GL2.RenderbufferTarget)target, (Chela.Graphics.GL2.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetRenderbufferParameter(Chela.Graphics.GL2.RenderbufferTarget target, Chela.Graphics.GL2.RenderbufferParameterName pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetRenderbufferParameteriv((Chela.Graphics.GL2.RenderbufferTarget)target, (Chela.Graphics.GL2.RenderbufferParameterName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetSeparableFilter(Chela.Graphics.GL2.SeparableTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, IntPtr column, IntPtr span)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glGetSeparableFilter((Chela.Graphics.GL2.SeparableTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetSeparableFilter<T5>(Chela.Graphics.GL2.SeparableTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, IntPtr column, T5[] span)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilter((Chela.Graphics.GL2.SeparableTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    span_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetSeparableFilter<T5>(Chela.Graphics.GL2.SeparableTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, IntPtr column, T5[,] span)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilter((Chela.Graphics.GL2.SeparableTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    span_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetSeparableFilter<T5>(Chela.Graphics.GL2.SeparableTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, IntPtr column, T5[,,] span)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilter((Chela.Graphics.GL2.SeparableTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    span_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetSeparableFilter<T5>(Chela.Graphics.GL2.SeparableTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, IntPtr column, ref T5 span)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilter((Chela.Graphics.GL2.SeparableTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
                    span = (T5)span_ptr.Target;
                }
                finally
                {
                    span_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetSeparableFilter<T4,T5>(Chela.Graphics.GL2.SeparableTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, T4[] column, T5[,,] span)
            where T4 : struct
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilter((Chela.Graphics.GL2.SeparableTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetSeparableFilter<T4,T5>(Chela.Graphics.GL2.SeparableTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, T4[,] column, T5[,,] span)
            where T4 : struct
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilter((Chela.Graphics.GL2.SeparableTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetSeparableFilter<T4,T5>(Chela.Graphics.GL2.SeparableTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, T4[,,] column, T5[,,] span)
            where T4 : struct
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilter((Chela.Graphics.GL2.SeparableTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetSeparableFilter<T4,T5>(Chela.Graphics.GL2.SeparableTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, ref T4 column, T5[,,] span)
            where T4 : struct
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilter((Chela.Graphics.GL2.SeparableTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                    column = (T4)column_ptr.Target;
                }
                finally
                {
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetSeparableFilter<T3,T4,T5>(Chela.Graphics.GL2.SeparableTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T3[] row, T4[,,] column, T5[,,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilter((Chela.Graphics.GL2.SeparableTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetSeparableFilter<T3,T4,T5>(Chela.Graphics.GL2.SeparableTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T3[,] row, T4[,,] column, T5[,,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilter((Chela.Graphics.GL2.SeparableTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetSeparableFilter<T3,T4,T5>(Chela.Graphics.GL2.SeparableTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T3[,,] row, T4[,,] column, T5[,,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilter((Chela.Graphics.GL2.SeparableTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetSeparableFilter<T3,T4,T5>(Chela.Graphics.GL2.SeparableTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T3 row, T4[,,] column, T5[,,] span)
            where T3 : struct
            where T4 : struct
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetSeparableFilter((Chela.Graphics.GL2.SeparableTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                    row = (T3)row_ptr.Target;
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                    span_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetShaderInfoLog(Int32 shader, Int32 bufSize, out Int32 length, StringBuilder infoLog)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    StringHandle infoLog_ptr = StringHandle.Alloc(infoLog);
                    try
                    {
                        Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, infoLog_ptr.Address);
                        length = *length_ptr;
                    }
                    finally
                    {
                        infoLog_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetShaderInfoLog(Int32 shader, Int32 bufSize, Int32* length, StringBuilder infoLog)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle infoLog_ptr = StringHandle.Alloc(infoLog);
            try
            {
                Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length, infoLog_ptr.Address);
            }
            finally
            {
                infoLog_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetShaderInfoLog(UInt32 shader, Int32 bufSize, out Int32 length, StringBuilder infoLog)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    StringHandle infoLog_ptr = StringHandle.Alloc(infoLog);
                    try
                    {
                        Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, infoLog_ptr.Address);
                        length = *length_ptr;
                    }
                    finally
                    {
                        infoLog_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetShaderInfoLog(UInt32 shader, Int32 bufSize, Int32* length, StringBuilder infoLog)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle infoLog_ptr = StringHandle.Alloc(infoLog);
            try
            {
                Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufSize, (Int32*)length, infoLog_ptr.Address);
            }
            finally
            {
                infoLog_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetShader(Int32 shader, Chela.Graphics.GL2.ShaderParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetShaderiv((UInt32)shader, (Chela.Graphics.GL2.ShaderParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetShader(Int32 shader, Chela.Graphics.GL2.ShaderParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetShaderiv((UInt32)shader, (Chela.Graphics.GL2.ShaderParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetShader(Int32 shader, Chela.Graphics.GL2.ShaderParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetShaderiv((UInt32)shader, (Chela.Graphics.GL2.ShaderParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetShader(UInt32 shader, Chela.Graphics.GL2.ShaderParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetShaderiv((UInt32)shader, (Chela.Graphics.GL2.ShaderParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetShader(UInt32 shader, Chela.Graphics.GL2.ShaderParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetShaderiv((UInt32)shader, (Chela.Graphics.GL2.ShaderParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetShader(UInt32 shader, Chela.Graphics.GL2.ShaderParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetShaderiv((UInt32)shader, (Chela.Graphics.GL2.ShaderParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetShaderSource(Int32 shader, Int32 bufSize, out Int32 length, StringBuilder source)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    StringHandle source_ptr = StringHandle.Alloc(source);
                    try
                    {
                        Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, source_ptr.Address);
                        length = *length_ptr;
                    }
                    finally
                    {
                        source_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetShaderSource(Int32 shader, Int32 bufSize, Int32* length, StringBuilder source)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle source_ptr = StringHandle.Alloc(source);
            try
            {
                Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length, source_ptr.Address);
            }
            finally
            {
                source_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetShaderSource(UInt32 shader, Int32 bufSize, out Int32 length, StringBuilder source)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    StringHandle source_ptr = StringHandle.Alloc(source);
                    try
                    {
                        Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length_ptr, source_ptr.Address);
                        length = *length_ptr;
                    }
                    finally
                    {
                        source_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetShaderSource(UInt32 shader, Int32 bufSize, Int32* length, StringBuilder source)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle source_ptr = StringHandle.Alloc(source);
            try
            {
                Delegates.glGetShaderSource((UInt32)shader, (Int32)bufSize, (Int32*)length, source_ptr.Address);
            }
            finally
            {
                source_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        System.String GetString(Chela.Graphics.GL2.StringName name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                unsafe { return new string((sbyte*)Delegates.glGetString(name)); }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        System.String GetString(Chela.Graphics.GL2.StringName name, Int32 index)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                unsafe { return new string((sbyte*)Delegates.glGetStringi(name, (UInt32)index)); }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        System.String GetString(Chela.Graphics.GL2.StringName name, UInt32 index)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                unsafe { return new string((sbyte*)Delegates.glGetStringi(name, (UInt32)index)); }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetSync(IntPtr sync, Chela.Graphics.GL2.ArbSync pname, Int32 bufSize, out Int32 length, out Int32 values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* values_ptr = &values)
                {
                    Delegates.glGetSynciv((IntPtr)sync, (Chela.Graphics.GL2.ArbSync)pname, (Int32)bufSize, (Int32*)length_ptr, (Int32*)values_ptr);
                    length = *length_ptr;
                    values = *values_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetSync(IntPtr sync, Chela.Graphics.GL2.ArbSync pname, Int32 bufSize, Int32* length, Int32[] values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            fixed (Int32* values_ptr = values)
            {
                Delegates.glGetSynciv((IntPtr)sync, (Chela.Graphics.GL2.ArbSync)pname, (Int32)bufSize, (Int32*)length, (Int32*)values_ptr);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetSync(IntPtr sync, Chela.Graphics.GL2.ArbSync pname, Int32 bufSize, Int32* length, Int32* values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetSynciv((IntPtr)sync, (Chela.Graphics.GL2.ArbSync)pname, (Int32)bufSize, (Int32*)length, (Int32*)values);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexEnv(Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetTexEnvfv((Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexEnv(Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetTexEnvfv((Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetTexEnv(Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetTexEnvfv((Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexEnv(Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetTexEnviv((Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexEnv(Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetTexEnviv((Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetTexEnv(Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetTexEnviv((Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexGen(Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Double[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Delegates.glGetTexGendv((Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Double*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexGen(Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, out Double @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Delegates.glGetTexGendv((Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetTexGen(Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Double* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetTexGendv((Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Double*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexGen(Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetTexGenfv((Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexGen(Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetTexGenfv((Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetTexGen(Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetTexGenfv((Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexGen(Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetTexGeniv((Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexGen(Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetTexGeniv((Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetTexGen(Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetTexGeniv((Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexImage(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glGetTexImage((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexImage<T4>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T4[] pixels)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetTexImage((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexImage<T4>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T4[,] pixels)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetTexImage((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexImage<T4>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T4[,,] pixels)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetTexImage((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexImage<T4>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T4 pixels)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetTexImage((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T4)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexLevelParameter(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetTexLevelParameterfv((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexLevelParameter(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetTexLevelParameterfv((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetTexLevelParameter(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetTexLevelParameterfv((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexLevelParameter(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetTexLevelParameteriv((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexLevelParameter(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetTexLevelParameteriv((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetTexLevelParameter(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetTexLevelParameteriv((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexParameter(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetTexParameterfv((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexParameter(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetTexParameterfv((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetTexParameter(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetTexParameterfv((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetTexParameterIiv((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetTexParameterIiv((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetTexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetTexParameterIiv((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, UInt32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Delegates.glGetTexParameterIuiv((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (UInt32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, out UInt32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Delegates.glGetTexParameterIuiv((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetTexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, UInt32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetTexParameterIuiv((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (UInt32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexParameter(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetTexParameteriv((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexParameter(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetTexParameteriv((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetTexParameter(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetTexParameteriv((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, out Int32 length, out Int32 size, out Chela.Graphics.GL2.ActiveAttribType type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (Chela.Graphics.GL2.ActiveAttribType* type_ptr = &type)
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (Chela.Graphics.GL2.ActiveAttribType*)type_ptr, name_ptr.Address);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, Int32* length, Int32* size, Chela.Graphics.GL2.ActiveAttribType* type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle name_ptr = StringHandle.Alloc(name);
            try
            {
                Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (Chela.Graphics.GL2.ActiveAttribType*)type, name_ptr.Address);
            }
            finally
            {
                name_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, out Int32 length, out Int32 size, out Chela.Graphics.GL2.ActiveAttribType type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (Chela.Graphics.GL2.ActiveAttribType* type_ptr = &type)
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (Chela.Graphics.GL2.ActiveAttribType*)type_ptr, name_ptr.Address);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, Int32* length, Int32* size, Chela.Graphics.GL2.ActiveAttribType* type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle name_ptr = StringHandle.Alloc(name);
            try
            {
                Delegates.glGetTransformFeedbackVarying((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (Chela.Graphics.GL2.ActiveAttribType*)type, name_ptr.Address);
            }
            finally
            {
                name_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        Int32 GetUniformBlockIndex(Int32 program, String uniformBlockName)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                StringHandle uniformBlockName_ptr = StringHandle.Alloc(uniformBlockName);
                try
                {
                    return Delegates.glGetUniformBlockIndex((UInt32)program, uniformBlockName_ptr.Address);
                }
                finally
                {
                    uniformBlockName_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        Int32 GetUniformBlockIndex(UInt32 program, String uniformBlockName)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                StringHandle uniformBlockName_ptr = StringHandle.Alloc(uniformBlockName);
                try
                {
                    return Delegates.glGetUniformBlockIndex((UInt32)program, uniformBlockName_ptr.Address);
                }
                finally
                {
                    uniformBlockName_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetUniform(Int32 program, Int32 location, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetUniform(Int32 program, Int32 location, out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetUniform(Int32 program, Int32 location, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetUniform(UInt32 program, Int32 location, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetUniform(UInt32 program, Int32 location, out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetUniform(UInt32 program, Int32 location, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetUniformIndices(Int32 program, Int32 uniformCount, String[] uniformNames, Int32[] uniformIndices)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* uniformIndices_ptr = uniformIndices)
                {
                    StringHandle uniformNames_ptr = StringHandle.Alloc(uniformNames);
                    try
                    {
                        Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, uniformNames_ptr.ArrayAddress, (UInt32*)uniformIndices_ptr);
                    }
                    finally
                    {
                        uniformNames_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetUniformIndices(Int32 program, Int32 uniformCount, String[] uniformNames, out Int32 uniformIndices)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* uniformIndices_ptr = &uniformIndices)
                {
                    StringHandle uniformNames_ptr = StringHandle.Alloc(uniformNames);
                    try
                    {
                        Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, uniformNames_ptr.ArrayAddress, (UInt32*)uniformIndices_ptr);
                        uniformIndices = *uniformIndices_ptr;
                    }
                    finally
                    {
                        uniformNames_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetUniformIndices(Int32 program, Int32 uniformCount, String[] uniformNames, Int32* uniformIndices)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle uniformNames_ptr = StringHandle.Alloc(uniformNames);
            try
            {
                Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, uniformNames_ptr.ArrayAddress, (UInt32*)uniformIndices);
            }
            finally
            {
                uniformNames_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetUniformIndices(UInt32 program, Int32 uniformCount, String[] uniformNames, UInt32[] uniformIndices)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* uniformIndices_ptr = uniformIndices)
                {
                    StringHandle uniformNames_ptr = StringHandle.Alloc(uniformNames);
                    try
                    {
                        Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, uniformNames_ptr.ArrayAddress, (UInt32*)uniformIndices_ptr);
                    }
                    finally
                    {
                        uniformNames_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetUniformIndices(UInt32 program, Int32 uniformCount, String[] uniformNames, out UInt32 uniformIndices)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* uniformIndices_ptr = &uniformIndices)
                {
                    StringHandle uniformNames_ptr = StringHandle.Alloc(uniformNames);
                    try
                    {
                        Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, uniformNames_ptr.ArrayAddress, (UInt32*)uniformIndices_ptr);
                        uniformIndices = *uniformIndices_ptr;
                    }
                    finally
                    {
                        uniformNames_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetUniformIndices(UInt32 program, Int32 uniformCount, String[] uniformNames, UInt32* uniformIndices)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle uniformNames_ptr = StringHandle.Alloc(uniformNames);
            try
            {
                Delegates.glGetUniformIndices((UInt32)program, (Int32)uniformCount, uniformNames_ptr.ArrayAddress, (UInt32*)uniformIndices);
            }
            finally
            {
                uniformNames_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetUniform(Int32 program, Int32 location, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetUniform(Int32 program, Int32 location, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetUniform(Int32 program, Int32 location, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetUniform(UInt32 program, Int32 location, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetUniform(UInt32 program, Int32 location, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetUniform(UInt32 program, Int32 location, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        Int32 GetUniformLocation(Int32 program, String name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    return Delegates.glGetUniformLocation((UInt32)program, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        Int32 GetUniformLocation(UInt32 program, String name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    return Delegates.glGetUniformLocation((UInt32)program, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetUniform(UInt32 program, Int32 location, UInt32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Delegates.glGetUniformuiv((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetUniform(UInt32 program, Int32 location, out UInt32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Delegates.glGetUniformuiv((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetUniform(UInt32 program, Int32 location, UInt32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetUniformuiv((UInt32)program, (Int32)location, (UInt32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.VertexAttribParameter pname, Double[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribdv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (Double*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.VertexAttribParameter pname, out Double @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribdv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.VertexAttribParameter pname, Double* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetVertexAttribdv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (Double*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.VertexAttribParameter pname, Double[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribdv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (Double*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.VertexAttribParameter pname, out Double @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribdv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (Double*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.VertexAttribParameter pname, Double* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetVertexAttribdv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (Double*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.VertexAttribParameter pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribfv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.VertexAttribParameter pname, out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribfv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.VertexAttribParameter pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetVertexAttribfv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.VertexAttribParameter pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribfv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.VertexAttribParameter pname, out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribfv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.VertexAttribParameter pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetVertexAttribfv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttribI(Int32 index, Chela.Graphics.GL2.VertexAttribParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribIiv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetVertexAttribI(Int32 index, Chela.Graphics.GL2.VertexAttribParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetVertexAttribIiv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttribI(UInt32 index, Chela.Graphics.GL2.VertexAttribParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribIiv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetVertexAttribI(UInt32 index, Chela.Graphics.GL2.VertexAttribParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetVertexAttribIiv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttribI(UInt32 index, Chela.Graphics.GL2.VertexAttribParameter pname, out UInt32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribIuiv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (UInt32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetVertexAttribI(UInt32 index, Chela.Graphics.GL2.VertexAttribParameter pname, UInt32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetVertexAttribIuiv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (UInt32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.VertexAttribParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribiv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.VertexAttribParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribiv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.VertexAttribParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetVertexAttribiv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.VertexAttribParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribiv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.VertexAttribParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribiv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.VertexAttribParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetVertexAttribiv((UInt32)index, (Chela.Graphics.GL2.VertexAttribParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttribPointer(Int32 index, Chela.Graphics.GL2.VertexAttribPointerParameter pname, IntPtr pointer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glGetVertexAttribPointerv((UInt32)index, (Chela.Graphics.GL2.VertexAttribPointerParameter)pname, (IntPtr)pointer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttribPointer<T2>(Int32 index, Chela.Graphics.GL2.VertexAttribPointerParameter pname, T2[] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (Chela.Graphics.GL2.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttribPointer<T2>(Int32 index, Chela.Graphics.GL2.VertexAttribPointerParameter pname, T2[,] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (Chela.Graphics.GL2.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttribPointer<T2>(Int32 index, Chela.Graphics.GL2.VertexAttribPointerParameter pname, T2[,,] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (Chela.Graphics.GL2.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttribPointer<T2>(Int32 index, Chela.Graphics.GL2.VertexAttribPointerParameter pname, ref T2 pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (Chela.Graphics.GL2.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T2)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttribPointer(UInt32 index, Chela.Graphics.GL2.VertexAttribPointerParameter pname, IntPtr pointer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glGetVertexAttribPointerv((UInt32)index, (Chela.Graphics.GL2.VertexAttribPointerParameter)pname, (IntPtr)pointer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttribPointer<T2>(UInt32 index, Chela.Graphics.GL2.VertexAttribPointerParameter pname, T2[] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (Chela.Graphics.GL2.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttribPointer<T2>(UInt32 index, Chela.Graphics.GL2.VertexAttribPointerParameter pname, T2[,] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (Chela.Graphics.GL2.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttribPointer<T2>(UInt32 index, Chela.Graphics.GL2.VertexAttribPointerParameter pname, T2[,,] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (Chela.Graphics.GL2.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttribPointer<T2>(UInt32 index, Chela.Graphics.GL2.VertexAttribPointerParameter pname, ref T2 pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (Chela.Graphics.GL2.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T2)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Hint(Chela.Graphics.GL2.HintTarget target, Chela.Graphics.GL2.HintMode mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glHint((Chela.Graphics.GL2.HintTarget)target, (Chela.Graphics.GL2.HintMode)mode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Histogram(Chela.Graphics.GL2.HistogramTarget target, Int32 width, Chela.Graphics.GL2.PixelInternalFormat internalformat, bool sink)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glHistogram((Chela.Graphics.GL2.HistogramTarget)target, (Int32)width, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (bool)sink);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Index(Double c)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glIndexd((Double)c);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Index(Double* c)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glIndexdv((Double*)c);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Index(Single c)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glIndexf((Single)c);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Index(Single* c)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glIndexfv((Single*)c);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Index(Int32 c)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glIndexi((Int32)c);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Index(Int32* c)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glIndexiv((Int32*)c);
            #if DEBUG
            }
            #endif
        }

        public static 
        void IndexMask(Int32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glIndexMask((UInt32)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void IndexMask(UInt32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glIndexMask((UInt32)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void IndexPointer(Chela.Graphics.GL2.IndexPointerType type, Int32 stride, IntPtr pointer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glIndexPointer((Chela.Graphics.GL2.IndexPointerType)type, (Int32)stride, (IntPtr)pointer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void IndexPointer<T2>(Chela.Graphics.GL2.IndexPointerType type, Int32 stride, T2[] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glIndexPointer((Chela.Graphics.GL2.IndexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void IndexPointer<T2>(Chela.Graphics.GL2.IndexPointerType type, Int32 stride, T2[,] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glIndexPointer((Chela.Graphics.GL2.IndexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void IndexPointer<T2>(Chela.Graphics.GL2.IndexPointerType type, Int32 stride, T2[,,] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glIndexPointer((Chela.Graphics.GL2.IndexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void IndexPointer<T2>(Chela.Graphics.GL2.IndexPointerType type, Int32 stride, ref T2 pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glIndexPointer((Chela.Graphics.GL2.IndexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T2)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Index(Int16 c)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glIndexs((Int16)c);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Index(Int16* c)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glIndexsv((Int16*)c);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Index(Byte c)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glIndexub((Byte)c);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Index(Byte* c)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glIndexubv((Byte*)c);
            #if DEBUG
            }
            #endif
        }

        public static 
        void InitNames()
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glInitNames();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void InterleavedArrays(Chela.Graphics.GL2.InterleavedArrayFormat format, Int32 stride, IntPtr pointer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glInterleavedArrays((Chela.Graphics.GL2.InterleavedArrayFormat)format, (Int32)stride, (IntPtr)pointer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void InterleavedArrays<T2>(Chela.Graphics.GL2.InterleavedArrayFormat format, Int32 stride, T2[] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glInterleavedArrays((Chela.Graphics.GL2.InterleavedArrayFormat)format, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void InterleavedArrays<T2>(Chela.Graphics.GL2.InterleavedArrayFormat format, Int32 stride, T2[,] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glInterleavedArrays((Chela.Graphics.GL2.InterleavedArrayFormat)format, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void InterleavedArrays<T2>(Chela.Graphics.GL2.InterleavedArrayFormat format, Int32 stride, T2[,,] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glInterleavedArrays((Chela.Graphics.GL2.InterleavedArrayFormat)format, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void InterleavedArrays<T2>(Chela.Graphics.GL2.InterleavedArrayFormat format, Int32 stride, ref T2 pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glInterleavedArrays((Chela.Graphics.GL2.InterleavedArrayFormat)format, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T2)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsBuffer(Int32 buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsBuffer((UInt32)buffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsBuffer(UInt32 buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsBuffer((UInt32)buffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsEnabled(Chela.Graphics.GL2.EnableCap cap)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsEnabled((Chela.Graphics.GL2.EnableCap)cap);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsEnabled(Chela.Graphics.GL2.IndexedEnableCap target, Int32 index)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsEnabledi((Chela.Graphics.GL2.IndexedEnableCap)target, (UInt32)index);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsEnabled(Chela.Graphics.GL2.IndexedEnableCap target, UInt32 index)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsEnabledi((Chela.Graphics.GL2.IndexedEnableCap)target, (UInt32)index);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsFramebuffer(Int32 framebuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsFramebuffer((UInt32)framebuffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsFramebuffer(UInt32 framebuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsFramebuffer((UInt32)framebuffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsList(Int32 list)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsList((UInt32)list);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsList(UInt32 list)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsList((UInt32)list);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsProgram(Int32 program)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsProgram((UInt32)program);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsProgram(UInt32 program)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsProgram((UInt32)program);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsQuery(Int32 id)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsQuery((UInt32)id);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsQuery(UInt32 id)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsQuery((UInt32)id);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsRenderbuffer(Int32 renderbuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsRenderbuffer((UInt32)renderbuffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsRenderbuffer(UInt32 renderbuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsRenderbuffer((UInt32)renderbuffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsShader(Int32 shader)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsShader((UInt32)shader);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsShader(UInt32 shader)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsShader((UInt32)shader);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsSync(IntPtr sync)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsSync((IntPtr)sync);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsTexture(Int32 texture)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsTexture((UInt32)texture);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsTexture(UInt32 texture)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsTexture((UInt32)texture);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsVertexArray(Int32 array)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsVertexArray((UInt32)array);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsVertexArray(UInt32 array)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsVertexArray((UInt32)array);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Light(Chela.Graphics.GL2.LightName light, Chela.Graphics.GL2.LightParameter pname, Single param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glLightf((Chela.Graphics.GL2.LightName)light, (Chela.Graphics.GL2.LightParameter)pname, (Single)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Light(Chela.Graphics.GL2.LightName light, Chela.Graphics.GL2.LightParameter pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glLightfv((Chela.Graphics.GL2.LightName)light, (Chela.Graphics.GL2.LightParameter)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Light(Chela.Graphics.GL2.LightName light, Chela.Graphics.GL2.LightParameter pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glLightfv((Chela.Graphics.GL2.LightName)light, (Chela.Graphics.GL2.LightParameter)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Light(Chela.Graphics.GL2.LightName light, Chela.Graphics.GL2.LightParameter pname, Int32 param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glLighti((Chela.Graphics.GL2.LightName)light, (Chela.Graphics.GL2.LightParameter)pname, (Int32)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Light(Chela.Graphics.GL2.LightName light, Chela.Graphics.GL2.LightParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glLightiv((Chela.Graphics.GL2.LightName)light, (Chela.Graphics.GL2.LightParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Light(Chela.Graphics.GL2.LightName light, Chela.Graphics.GL2.LightParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glLightiv((Chela.Graphics.GL2.LightName)light, (Chela.Graphics.GL2.LightParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void LightModel(Chela.Graphics.GL2.LightModelParameter pname, Single param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glLightModelf((Chela.Graphics.GL2.LightModelParameter)pname, (Single)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void LightModel(Chela.Graphics.GL2.LightModelParameter pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glLightModelfv((Chela.Graphics.GL2.LightModelParameter)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void LightModel(Chela.Graphics.GL2.LightModelParameter pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glLightModelfv((Chela.Graphics.GL2.LightModelParameter)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void LightModel(Chela.Graphics.GL2.LightModelParameter pname, Int32 param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glLightModeli((Chela.Graphics.GL2.LightModelParameter)pname, (Int32)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void LightModel(Chela.Graphics.GL2.LightModelParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glLightModeliv((Chela.Graphics.GL2.LightModelParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void LightModel(Chela.Graphics.GL2.LightModelParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glLightModeliv((Chela.Graphics.GL2.LightModelParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void LineStipple(Int32 factor, Int16 pattern)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glLineStipple((Int32)factor, (UInt16)pattern);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void LineStipple(Int32 factor, UInt16 pattern)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glLineStipple((Int32)factor, (UInt16)pattern);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void LineWidth(Single width)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glLineWidth((Single)width);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void LinkProgram(Int32 program)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glLinkProgram((UInt32)program);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void LinkProgram(UInt32 program)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glLinkProgram((UInt32)program);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ListBase(Int32 @base)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glListBase((UInt32)@base);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ListBase(UInt32 @base)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glListBase((UInt32)@base);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void LoadIdentity()
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glLoadIdentity();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void LoadMatrix(Double[] m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* m_ptr = m)
                {
                    Delegates.glLoadMatrixd((Double*)m_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void LoadMatrix(ref Double m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* m_ptr = &m)
                {
                    Delegates.glLoadMatrixd((Double*)m_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void LoadMatrix(Double* m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glLoadMatrixd((Double*)m);
            #if DEBUG
            }
            #endif
        }

        public static 
        void LoadMatrix(Single[] m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* m_ptr = m)
                {
                    Delegates.glLoadMatrixf((Single*)m_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void LoadMatrix(ref Single m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* m_ptr = &m)
                {
                    Delegates.glLoadMatrixf((Single*)m_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void LoadMatrix(Single* m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glLoadMatrixf((Single*)m);
            #if DEBUG
            }
            #endif
        }

        public static 
        void LoadName(Int32 name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glLoadName((UInt32)name);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void LoadName(UInt32 name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glLoadName((UInt32)name);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void LoadTransposeMatrix(Double[] m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* m_ptr = m)
                {
                    Delegates.glLoadTransposeMatrixd((Double*)m_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void LoadTransposeMatrix(ref Double m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* m_ptr = &m)
                {
                    Delegates.glLoadTransposeMatrixd((Double*)m_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void LoadTransposeMatrix(Double* m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glLoadTransposeMatrixd((Double*)m);
            #if DEBUG
            }
            #endif
        }

        public static 
        void LoadTransposeMatrix(Single[] m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* m_ptr = m)
                {
                    Delegates.glLoadTransposeMatrixf((Single*)m_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void LoadTransposeMatrix(ref Single m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* m_ptr = &m)
                {
                    Delegates.glLoadTransposeMatrixf((Single*)m_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void LoadTransposeMatrix(Single* m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glLoadTransposeMatrixf((Single*)m);
            #if DEBUG
            }
            #endif
        }

        public static 
        void LogicOp(Chela.Graphics.GL2.LogicOp opcode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glLogicOp((Chela.Graphics.GL2.LogicOp)opcode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Map1(Chela.Graphics.GL2.MapTarget target, Double u1, Double u2, Int32 stride, Int32 order, Double[] points)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* points_ptr = points)
                {
                    Delegates.glMap1d((Chela.Graphics.GL2.MapTarget)target, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Map1(Chela.Graphics.GL2.MapTarget target, Double u1, Double u2, Int32 stride, Int32 order, ref Double points)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* points_ptr = &points)
                {
                    Delegates.glMap1d((Chela.Graphics.GL2.MapTarget)target, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Map1(Chela.Graphics.GL2.MapTarget target, Double u1, Double u2, Int32 stride, Int32 order, Double* points)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMap1d((Chela.Graphics.GL2.MapTarget)target, (Double)u1, (Double)u2, (Int32)stride, (Int32)order, (Double*)points);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Map1(Chela.Graphics.GL2.MapTarget target, Single u1, Single u2, Int32 stride, Int32 order, Single[] points)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* points_ptr = points)
                {
                    Delegates.glMap1f((Chela.Graphics.GL2.MapTarget)target, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Map1(Chela.Graphics.GL2.MapTarget target, Single u1, Single u2, Int32 stride, Int32 order, ref Single points)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* points_ptr = &points)
                {
                    Delegates.glMap1f((Chela.Graphics.GL2.MapTarget)target, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Map1(Chela.Graphics.GL2.MapTarget target, Single u1, Single u2, Int32 stride, Int32 order, Single* points)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMap1f((Chela.Graphics.GL2.MapTarget)target, (Single)u1, (Single)u2, (Int32)stride, (Int32)order, (Single*)points);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Map2(Chela.Graphics.GL2.MapTarget target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double[] points)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* points_ptr = points)
                {
                    Delegates.glMap2d((Chela.Graphics.GL2.MapTarget)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Map2(Chela.Graphics.GL2.MapTarget target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, ref Double points)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* points_ptr = &points)
                {
                    Delegates.glMap2d((Chela.Graphics.GL2.MapTarget)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Map2(Chela.Graphics.GL2.MapTarget target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double* points)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMap2d((Chela.Graphics.GL2.MapTarget)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double*)points);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Map2(Chela.Graphics.GL2.MapTarget target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single[] points)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* points_ptr = points)
                {
                    Delegates.glMap2f((Chela.Graphics.GL2.MapTarget)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Map2(Chela.Graphics.GL2.MapTarget target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, ref Single points)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* points_ptr = &points)
                {
                    Delegates.glMap2f((Chela.Graphics.GL2.MapTarget)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Map2(Chela.Graphics.GL2.MapTarget target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single* points)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMap2f((Chela.Graphics.GL2.MapTarget)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single*)points);
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe System.IntPtr MapBuffer(Chela.Graphics.GL2.BufferTarget target, Chela.Graphics.GL2.BufferAccess access)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            return Delegates.glMapBuffer((Chela.Graphics.GL2.BufferTarget)target, (Chela.Graphics.GL2.BufferAccess)access);
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe System.IntPtr MapBufferRange(Chela.Graphics.GL2.BufferTarget target, IntPtr offset, IntPtr length, Chela.Graphics.GL2.BufferAccessMask access)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            return Delegates.glMapBufferRange((Chela.Graphics.GL2.BufferTarget)target, (IntPtr)offset, (IntPtr)length, (Chela.Graphics.GL2.BufferAccessMask)access);
            #if DEBUG
            }
            #endif
        }

        public static 
        void MapGrid1(Int32 un, Double u1, Double u2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMapGrid1d((Int32)un, (Double)u1, (Double)u2);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MapGrid1(Int32 un, Single u1, Single u2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMapGrid1f((Int32)un, (Single)u1, (Single)u2);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MapGrid2(Int32 un, Double u1, Double u2, Int32 vn, Double v1, Double v2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMapGrid2d((Int32)un, (Double)u1, (Double)u2, (Int32)vn, (Double)v1, (Double)v2);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MapGrid2(Int32 un, Single u1, Single u2, Int32 vn, Single v1, Single v2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMapGrid2f((Int32)un, (Single)u1, (Single)u2, (Int32)vn, (Single)v1, (Single)v2);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Material(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, Single param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMaterialf((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Single)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Material(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glMaterialfv((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Material(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMaterialfv((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Material(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, Int32 param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMateriali((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Int32)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Material(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glMaterialiv((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Material(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMaterialiv((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void MatrixMode(Chela.Graphics.GL2.MatrixMode mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMatrixMode((Chela.Graphics.GL2.MatrixMode)mode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Minmax(Chela.Graphics.GL2.MinmaxTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, bool sink)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMinmax((Chela.Graphics.GL2.MinmaxTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (bool)sink);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MinSampleShading(Single value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMinSampleShading((Single)value);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiDrawArrays(Chela.Graphics.GL2.BeginMode mode, Int32[] first, Int32[] count, Int32 primcount)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* first_ptr = first)
                fixed (Int32* count_ptr = count)
                {
                    Delegates.glMultiDrawArrays((Chela.Graphics.GL2.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiDrawArrays(Chela.Graphics.GL2.BeginMode mode, out Int32 first, out Int32 count, Int32 primcount)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* first_ptr = &first)
                fixed (Int32* count_ptr = &count)
                {
                    Delegates.glMultiDrawArrays((Chela.Graphics.GL2.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                    first = *first_ptr;
                    count = *count_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiDrawArrays(Chela.Graphics.GL2.BeginMode mode, Int32* first, Int32* count, Int32 primcount)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMultiDrawArrays((Chela.Graphics.GL2.BeginMode)mode, (Int32*)first, (Int32*)count, (Int32)primcount);
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiDrawElements(Chela.Graphics.GL2.BeginMode mode, Int32[] count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices, Int32 primcount)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = count)
                {
                    Delegates.glMultiDrawElements((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, Int32[] count, Chela.Graphics.GL2.DrawElementsType type, T3[] indices, Int32 primcount)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, Int32[] count, Chela.Graphics.GL2.DrawElementsType type, T3[,] indices, Int32 primcount)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, Int32[] count, Chela.Graphics.GL2.DrawElementsType type, T3[,,] indices, Int32 primcount)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, Int32[] count, Chela.Graphics.GL2.DrawElementsType type, ref T3 indices, Int32 primcount)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        indices = (T3)indices_ptr.Target;
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiDrawElements(Chela.Graphics.GL2.BeginMode mode, ref Int32 count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices, Int32 primcount)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                {
                    Delegates.glMultiDrawElements((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, ref Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[] indices, Int32 primcount)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, ref Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[,] indices, Int32 primcount)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, ref Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[,,] indices, Int32 primcount)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, ref Int32 count, Chela.Graphics.GL2.DrawElementsType type, ref T3 indices, Int32 primcount)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElements((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        indices = (T3)indices_ptr.Target;
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiDrawElements(Chela.Graphics.GL2.BeginMode mode, Int32* count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices, Int32 primcount)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMultiDrawElements((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, Int32* count, Chela.Graphics.GL2.DrawElementsType type, T3[] indices, Int32 primcount)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, Int32* count, Chela.Graphics.GL2.DrawElementsType type, T3[,] indices, Int32 primcount)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, Int32* count, Chela.Graphics.GL2.DrawElementsType type, T3[,,] indices, Int32 primcount)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, Int32* count, Chela.Graphics.GL2.DrawElementsType type, ref T3 indices, Int32 primcount)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                indices = (T3)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiDrawElementsBaseVertex(Chela.Graphics.GL2.BeginMode mode, Int32[] count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices, Int32 primcount, Int32[] basevertex)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = count)
                fixed (Int32* basevertex_ptr = basevertex)
                {
                    Delegates.glMultiDrawElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices, (Int32)primcount, (Int32*)basevertex_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiDrawElementsBaseVertex<T3>(Chela.Graphics.GL2.BeginMode mode, Int32[] count, Chela.Graphics.GL2.DrawElementsType type, T3[] indices, Int32 primcount, Int32[] basevertex)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = count)
                fixed (Int32* basevertex_ptr = basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiDrawElementsBaseVertex<T3>(Chela.Graphics.GL2.BeginMode mode, Int32[] count, Chela.Graphics.GL2.DrawElementsType type, T3[,] indices, Int32 primcount, Int32[] basevertex)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = count)
                fixed (Int32* basevertex_ptr = basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiDrawElementsBaseVertex<T3>(Chela.Graphics.GL2.BeginMode mode, Int32[] count, Chela.Graphics.GL2.DrawElementsType type, T3[,,] indices, Int32 primcount, Int32[] basevertex)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = count)
                fixed (Int32* basevertex_ptr = basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiDrawElementsBaseVertex<T3>(Chela.Graphics.GL2.BeginMode mode, Int32[] count, Chela.Graphics.GL2.DrawElementsType type, ref T3 indices, Int32 primcount, Int32[] basevertex)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = count)
                fixed (Int32* basevertex_ptr = basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                        indices = (T3)indices_ptr.Target;
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiDrawElementsBaseVertex(Chela.Graphics.GL2.BeginMode mode, ref Int32 count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices, Int32 primcount, ref Int32 basevertex)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (Int32* basevertex_ptr = &basevertex)
                {
                    Delegates.glMultiDrawElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices, (Int32)primcount, (Int32*)basevertex_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiDrawElementsBaseVertex<T3>(Chela.Graphics.GL2.BeginMode mode, ref Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[] indices, Int32 primcount, ref Int32 basevertex)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (Int32* basevertex_ptr = &basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiDrawElementsBaseVertex<T3>(Chela.Graphics.GL2.BeginMode mode, ref Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[,] indices, Int32 primcount, ref Int32 basevertex)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (Int32* basevertex_ptr = &basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiDrawElementsBaseVertex<T3>(Chela.Graphics.GL2.BeginMode mode, ref Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[,,] indices, Int32 primcount, ref Int32 basevertex)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (Int32* basevertex_ptr = &basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiDrawElementsBaseVertex<T3>(Chela.Graphics.GL2.BeginMode mode, ref Int32 count, Chela.Graphics.GL2.DrawElementsType type, ref T3 indices, Int32 primcount, ref Int32 basevertex)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (Int32* basevertex_ptr = &basevertex)
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiDrawElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex_ptr);
                        indices = (T3)indices_ptr.Target;
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiDrawElementsBaseVertex(Chela.Graphics.GL2.BeginMode mode, Int32* count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices, Int32 primcount, Int32* basevertex)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMultiDrawElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices, (Int32)primcount, (Int32*)basevertex);
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiDrawElementsBaseVertex<T3>(Chela.Graphics.GL2.BeginMode mode, Int32* count, Chela.Graphics.GL2.DrawElementsType type, T3[] indices, Int32 primcount, Int32* basevertex)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiDrawElementsBaseVertex<T3>(Chela.Graphics.GL2.BeginMode mode, Int32* count, Chela.Graphics.GL2.DrawElementsType type, T3[,] indices, Int32 primcount, Int32* basevertex)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiDrawElementsBaseVertex<T3>(Chela.Graphics.GL2.BeginMode mode, Int32* count, Chela.Graphics.GL2.DrawElementsType type, T3[,,] indices, Int32 primcount, Int32* basevertex)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex);
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiDrawElementsBaseVertex<T3>(Chela.Graphics.GL2.BeginMode mode, Int32* count, Chela.Graphics.GL2.DrawElementsType type, ref T3 indices, Int32 primcount, Int32* basevertex)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsBaseVertex((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32*)basevertex);
                indices = (T3)indices_ptr.Target;
            }
            finally
            {
                indices_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord1(Chela.Graphics.GL2.TextureUnit target, Double s)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMultiTexCoord1d((Chela.Graphics.GL2.TextureUnit)target, (Double)s);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiTexCoord1(Chela.Graphics.GL2.TextureUnit target, Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMultiTexCoord1dv((Chela.Graphics.GL2.TextureUnit)target, (Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord1(Chela.Graphics.GL2.TextureUnit target, Single s)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMultiTexCoord1f((Chela.Graphics.GL2.TextureUnit)target, (Single)s);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiTexCoord1(Chela.Graphics.GL2.TextureUnit target, Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMultiTexCoord1fv((Chela.Graphics.GL2.TextureUnit)target, (Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord1(Chela.Graphics.GL2.TextureUnit target, Int32 s)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMultiTexCoord1i((Chela.Graphics.GL2.TextureUnit)target, (Int32)s);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiTexCoord1(Chela.Graphics.GL2.TextureUnit target, Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMultiTexCoord1iv((Chela.Graphics.GL2.TextureUnit)target, (Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord1(Chela.Graphics.GL2.TextureUnit target, Int16 s)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMultiTexCoord1s((Chela.Graphics.GL2.TextureUnit)target, (Int16)s);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiTexCoord1(Chela.Graphics.GL2.TextureUnit target, Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMultiTexCoord1sv((Chela.Graphics.GL2.TextureUnit)target, (Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Double s, Double t)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMultiTexCoord2d((Chela.Graphics.GL2.TextureUnit)target, (Double)s, (Double)t);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glMultiTexCoord2dv((Chela.Graphics.GL2.TextureUnit)target, (Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord2dv((Chela.Graphics.GL2.TextureUnit)target, (Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMultiTexCoord2dv((Chela.Graphics.GL2.TextureUnit)target, (Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Single s, Single t)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMultiTexCoord2f((Chela.Graphics.GL2.TextureUnit)target, (Single)s, (Single)t);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glMultiTexCoord2fv((Chela.Graphics.GL2.TextureUnit)target, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord2fv((Chela.Graphics.GL2.TextureUnit)target, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMultiTexCoord2fv((Chela.Graphics.GL2.TextureUnit)target, (Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Int32 s, Int32 t)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMultiTexCoord2i((Chela.Graphics.GL2.TextureUnit)target, (Int32)s, (Int32)t);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glMultiTexCoord2iv((Chela.Graphics.GL2.TextureUnit)target, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord2iv((Chela.Graphics.GL2.TextureUnit)target, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMultiTexCoord2iv((Chela.Graphics.GL2.TextureUnit)target, (Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Int16 s, Int16 t)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMultiTexCoord2s((Chela.Graphics.GL2.TextureUnit)target, (Int16)s, (Int16)t);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glMultiTexCoord2sv((Chela.Graphics.GL2.TextureUnit)target, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord2sv((Chela.Graphics.GL2.TextureUnit)target, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiTexCoord2(Chela.Graphics.GL2.TextureUnit target, Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMultiTexCoord2sv((Chela.Graphics.GL2.TextureUnit)target, (Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Double s, Double t, Double r)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMultiTexCoord3d((Chela.Graphics.GL2.TextureUnit)target, (Double)s, (Double)t, (Double)r);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glMultiTexCoord3dv((Chela.Graphics.GL2.TextureUnit)target, (Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord3dv((Chela.Graphics.GL2.TextureUnit)target, (Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMultiTexCoord3dv((Chela.Graphics.GL2.TextureUnit)target, (Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Single s, Single t, Single r)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMultiTexCoord3f((Chela.Graphics.GL2.TextureUnit)target, (Single)s, (Single)t, (Single)r);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glMultiTexCoord3fv((Chela.Graphics.GL2.TextureUnit)target, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord3fv((Chela.Graphics.GL2.TextureUnit)target, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMultiTexCoord3fv((Chela.Graphics.GL2.TextureUnit)target, (Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Int32 s, Int32 t, Int32 r)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMultiTexCoord3i((Chela.Graphics.GL2.TextureUnit)target, (Int32)s, (Int32)t, (Int32)r);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glMultiTexCoord3iv((Chela.Graphics.GL2.TextureUnit)target, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord3iv((Chela.Graphics.GL2.TextureUnit)target, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMultiTexCoord3iv((Chela.Graphics.GL2.TextureUnit)target, (Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Int16 s, Int16 t, Int16 r)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMultiTexCoord3s((Chela.Graphics.GL2.TextureUnit)target, (Int16)s, (Int16)t, (Int16)r);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glMultiTexCoord3sv((Chela.Graphics.GL2.TextureUnit)target, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord3sv((Chela.Graphics.GL2.TextureUnit)target, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiTexCoord3(Chela.Graphics.GL2.TextureUnit target, Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMultiTexCoord3sv((Chela.Graphics.GL2.TextureUnit)target, (Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Double s, Double t, Double r, Double q)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMultiTexCoord4d((Chela.Graphics.GL2.TextureUnit)target, (Double)s, (Double)t, (Double)r, (Double)q);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glMultiTexCoord4dv((Chela.Graphics.GL2.TextureUnit)target, (Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord4dv((Chela.Graphics.GL2.TextureUnit)target, (Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMultiTexCoord4dv((Chela.Graphics.GL2.TextureUnit)target, (Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Single s, Single t, Single r, Single q)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMultiTexCoord4f((Chela.Graphics.GL2.TextureUnit)target, (Single)s, (Single)t, (Single)r, (Single)q);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glMultiTexCoord4fv((Chela.Graphics.GL2.TextureUnit)target, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord4fv((Chela.Graphics.GL2.TextureUnit)target, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMultiTexCoord4fv((Chela.Graphics.GL2.TextureUnit)target, (Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Int32 s, Int32 t, Int32 r, Int32 q)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMultiTexCoord4i((Chela.Graphics.GL2.TextureUnit)target, (Int32)s, (Int32)t, (Int32)r, (Int32)q);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glMultiTexCoord4iv((Chela.Graphics.GL2.TextureUnit)target, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord4iv((Chela.Graphics.GL2.TextureUnit)target, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMultiTexCoord4iv((Chela.Graphics.GL2.TextureUnit)target, (Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Int16 s, Int16 t, Int16 r, Int16 q)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glMultiTexCoord4s((Chela.Graphics.GL2.TextureUnit)target, (Int16)s, (Int16)t, (Int16)r, (Int16)q);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glMultiTexCoord4sv((Chela.Graphics.GL2.TextureUnit)target, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glMultiTexCoord4sv((Chela.Graphics.GL2.TextureUnit)target, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultiTexCoord4(Chela.Graphics.GL2.TextureUnit target, Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMultiTexCoord4sv((Chela.Graphics.GL2.TextureUnit)target, (Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultMatrix(Double[] m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* m_ptr = m)
                {
                    Delegates.glMultMatrixd((Double*)m_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultMatrix(ref Double m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* m_ptr = &m)
                {
                    Delegates.glMultMatrixd((Double*)m_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultMatrix(Double* m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMultMatrixd((Double*)m);
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultMatrix(Single[] m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* m_ptr = m)
                {
                    Delegates.glMultMatrixf((Single*)m_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultMatrix(ref Single m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* m_ptr = &m)
                {
                    Delegates.glMultMatrixf((Single*)m_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultMatrix(Single* m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMultMatrixf((Single*)m);
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultTransposeMatrix(Double[] m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* m_ptr = m)
                {
                    Delegates.glMultTransposeMatrixd((Double*)m_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultTransposeMatrix(ref Double m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* m_ptr = &m)
                {
                    Delegates.glMultTransposeMatrixd((Double*)m_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultTransposeMatrix(Double* m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMultTransposeMatrixd((Double*)m);
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultTransposeMatrix(Single[] m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* m_ptr = m)
                {
                    Delegates.glMultTransposeMatrixf((Single*)m_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void MultTransposeMatrix(ref Single m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* m_ptr = &m)
                {
                    Delegates.glMultTransposeMatrixf((Single*)m_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void MultTransposeMatrix(Single* m)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glMultTransposeMatrixf((Single*)m);
            #if DEBUG
            }
            #endif
        }

        public static 
        void NewList(Int32 list, Chela.Graphics.GL2.ListMode mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glNewList((UInt32)list, (Chela.Graphics.GL2.ListMode)mode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void NewList(UInt32 list, Chela.Graphics.GL2.ListMode mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glNewList((UInt32)list, (Chela.Graphics.GL2.ListMode)mode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Normal3(Byte nx, Byte ny, Byte nz)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glNormal3b((SByte)nx, (SByte)ny, (SByte)nz);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Normal3(SByte nx, SByte ny, SByte nz)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glNormal3b((SByte)nx, (SByte)ny, (SByte)nz);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Normal3(Byte[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glNormal3bv((SByte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Normal3(ref Byte v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glNormal3bv((SByte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Normal3(Byte* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glNormal3bv((SByte*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Normal3(SByte[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Delegates.glNormal3bv((SByte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Normal3(ref SByte v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Delegates.glNormal3bv((SByte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Normal3(SByte* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glNormal3bv((SByte*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Normal3(Double nx, Double ny, Double nz)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glNormal3d((Double)nx, (Double)ny, (Double)nz);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Normal3(Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glNormal3dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Normal3(ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glNormal3dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Normal3(Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glNormal3dv((Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Normal3(Single nx, Single ny, Single nz)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glNormal3f((Single)nx, (Single)ny, (Single)nz);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Normal3(Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glNormal3fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Normal3(ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glNormal3fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Normal3(Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glNormal3fv((Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Normal3(Int32 nx, Int32 ny, Int32 nz)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glNormal3i((Int32)nx, (Int32)ny, (Int32)nz);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Normal3(Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glNormal3iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Normal3(ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glNormal3iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Normal3(Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glNormal3iv((Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Normal3(Int16 nx, Int16 ny, Int16 nz)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glNormal3s((Int16)nx, (Int16)ny, (Int16)nz);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Normal3(Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glNormal3sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Normal3(ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glNormal3sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Normal3(Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glNormal3sv((Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void NormalPointer(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, IntPtr pointer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glNormalPointer((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (IntPtr)pointer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void NormalPointer<T2>(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, T2[] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glNormalPointer((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void NormalPointer<T2>(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, T2[,] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glNormalPointer((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void NormalPointer<T2>(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, T2[,,] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glNormalPointer((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void NormalPointer<T2>(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, ref T2 pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glNormalPointer((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T2)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Ortho(Double left, Double right, Double bottom, Double top, Double zNear, Double zFar)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glOrtho((Double)left, (Double)right, (Double)bottom, (Double)top, (Double)zNear, (Double)zFar);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PassThrough(Single token)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPassThrough((Single)token);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PixelMap(Chela.Graphics.GL2.PixelMap map, Int32 mapsize, Single[] values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* values_ptr = values)
                {
                    Delegates.glPixelMapfv((Chela.Graphics.GL2.PixelMap)map, (Int32)mapsize, (Single*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PixelMap(Chela.Graphics.GL2.PixelMap map, Int32 mapsize, ref Single values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* values_ptr = &values)
                {
                    Delegates.glPixelMapfv((Chela.Graphics.GL2.PixelMap)map, (Int32)mapsize, (Single*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void PixelMap(Chela.Graphics.GL2.PixelMap map, Int32 mapsize, Single* values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glPixelMapfv((Chela.Graphics.GL2.PixelMap)map, (Int32)mapsize, (Single*)values);
            #if DEBUG
            }
            #endif
        }

        public static 
        void PixelMap(Chela.Graphics.GL2.PixelMap map, Int32 mapsize, Int32[] values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* values_ptr = values)
                {
                    Delegates.glPixelMapuiv((Chela.Graphics.GL2.PixelMap)map, (Int32)mapsize, (UInt32*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PixelMap(Chela.Graphics.GL2.PixelMap map, Int32 mapsize, ref Int32 values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* values_ptr = &values)
                {
                    Delegates.glPixelMapuiv((Chela.Graphics.GL2.PixelMap)map, (Int32)mapsize, (UInt32*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void PixelMap(Chela.Graphics.GL2.PixelMap map, Int32 mapsize, Int32* values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glPixelMapuiv((Chela.Graphics.GL2.PixelMap)map, (Int32)mapsize, (UInt32*)values);
            #if DEBUG
            }
            #endif
        }

        public static 
        void PixelMap(Chela.Graphics.GL2.PixelMap map, Int32 mapsize, UInt32[] values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* values_ptr = values)
                {
                    Delegates.glPixelMapuiv((Chela.Graphics.GL2.PixelMap)map, (Int32)mapsize, (UInt32*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PixelMap(Chela.Graphics.GL2.PixelMap map, Int32 mapsize, ref UInt32 values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* values_ptr = &values)
                {
                    Delegates.glPixelMapuiv((Chela.Graphics.GL2.PixelMap)map, (Int32)mapsize, (UInt32*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void PixelMap(Chela.Graphics.GL2.PixelMap map, Int32 mapsize, UInt32* values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glPixelMapuiv((Chela.Graphics.GL2.PixelMap)map, (Int32)mapsize, (UInt32*)values);
            #if DEBUG
            }
            #endif
        }

        public static 
        void PixelMap(Chela.Graphics.GL2.PixelMap map, Int32 mapsize, Int16[] values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* values_ptr = values)
                {
                    Delegates.glPixelMapusv((Chela.Graphics.GL2.PixelMap)map, (Int32)mapsize, (UInt16*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PixelMap(Chela.Graphics.GL2.PixelMap map, Int32 mapsize, ref Int16 values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* values_ptr = &values)
                {
                    Delegates.glPixelMapusv((Chela.Graphics.GL2.PixelMap)map, (Int32)mapsize, (UInt16*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void PixelMap(Chela.Graphics.GL2.PixelMap map, Int32 mapsize, Int16* values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glPixelMapusv((Chela.Graphics.GL2.PixelMap)map, (Int32)mapsize, (UInt16*)values);
            #if DEBUG
            }
            #endif
        }

        public static 
        void PixelMap(Chela.Graphics.GL2.PixelMap map, Int32 mapsize, UInt16[] values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt16* values_ptr = values)
                {
                    Delegates.glPixelMapusv((Chela.Graphics.GL2.PixelMap)map, (Int32)mapsize, (UInt16*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PixelMap(Chela.Graphics.GL2.PixelMap map, Int32 mapsize, ref UInt16 values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt16* values_ptr = &values)
                {
                    Delegates.glPixelMapusv((Chela.Graphics.GL2.PixelMap)map, (Int32)mapsize, (UInt16*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void PixelMap(Chela.Graphics.GL2.PixelMap map, Int32 mapsize, UInt16* values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glPixelMapusv((Chela.Graphics.GL2.PixelMap)map, (Int32)mapsize, (UInt16*)values);
            #if DEBUG
            }
            #endif
        }

        public static 
        void PixelStore(Chela.Graphics.GL2.PixelStoreParameter pname, Single param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPixelStoref((Chela.Graphics.GL2.PixelStoreParameter)pname, (Single)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PixelStore(Chela.Graphics.GL2.PixelStoreParameter pname, Int32 param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPixelStorei((Chela.Graphics.GL2.PixelStoreParameter)pname, (Int32)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PixelTransfer(Chela.Graphics.GL2.PixelTransferParameter pname, Single param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPixelTransferf((Chela.Graphics.GL2.PixelTransferParameter)pname, (Single)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PixelTransfer(Chela.Graphics.GL2.PixelTransferParameter pname, Int32 param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPixelTransferi((Chela.Graphics.GL2.PixelTransferParameter)pname, (Int32)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PixelZoom(Single xfactor, Single yfactor)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPixelZoom((Single)xfactor, (Single)yfactor);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PointParameter(Chela.Graphics.GL2.PointParameterName pname, Single param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPointParameterf((Chela.Graphics.GL2.PointParameterName)pname, (Single)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PointParameter(Chela.Graphics.GL2.PointParameterName pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glPointParameterfv((Chela.Graphics.GL2.PointParameterName)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void PointParameter(Chela.Graphics.GL2.PointParameterName pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glPointParameterfv((Chela.Graphics.GL2.PointParameterName)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void PointParameter(Chela.Graphics.GL2.PointParameterName pname, Int32 param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPointParameteri((Chela.Graphics.GL2.PointParameterName)pname, (Int32)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PointParameter(Chela.Graphics.GL2.PointParameterName pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glPointParameteriv((Chela.Graphics.GL2.PointParameterName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void PointParameter(Chela.Graphics.GL2.PointParameterName pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glPointParameteriv((Chela.Graphics.GL2.PointParameterName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void PointSize(Single size)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPointSize((Single)size);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PolygonMode(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.PolygonMode mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPolygonMode((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.PolygonMode)mode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PolygonOffset(Single factor, Single units)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPolygonOffset((Single)factor, (Single)units);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PolygonStipple(Byte[] mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* mask_ptr = mask)
                {
                    Delegates.glPolygonStipple((Byte*)mask_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PolygonStipple(ref Byte mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* mask_ptr = &mask)
                {
                    Delegates.glPolygonStipple((Byte*)mask_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void PolygonStipple(Byte* mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glPolygonStipple((Byte*)mask);
            #if DEBUG
            }
            #endif
        }

        public static 
        void PopAttrib()
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPopAttrib();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PopClientAttrib()
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPopClientAttrib();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PopMatrix()
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPopMatrix();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PopName()
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPopName();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PrimitiveRestartIndex(Int32 index)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPrimitiveRestartIndex((UInt32)index);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PrimitiveRestartIndex(UInt32 index)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPrimitiveRestartIndex((UInt32)index);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PrioritizeTextures(Int32 n, Int32[] textures, Single[] priorities)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* textures_ptr = textures)
                fixed (Single* priorities_ptr = priorities)
                {
                    Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PrioritizeTextures(Int32 n, ref Int32 textures, ref Single priorities)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* textures_ptr = &textures)
                fixed (Single* priorities_ptr = &priorities)
                {
                    Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void PrioritizeTextures(Int32 n, Int32* textures, Single* priorities)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures, (Single*)priorities);
            #if DEBUG
            }
            #endif
        }

        public static 
        void PrioritizeTextures(Int32 n, UInt32[] textures, Single[] priorities)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* textures_ptr = textures)
                fixed (Single* priorities_ptr = priorities)
                {
                    Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PrioritizeTextures(Int32 n, ref UInt32 textures, ref Single priorities)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* textures_ptr = &textures)
                fixed (Single* priorities_ptr = &priorities)
                {
                    Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void PrioritizeTextures(Int32 n, UInt32* textures, Single* priorities)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glPrioritizeTextures((Int32)n, (UInt32*)textures, (Single*)priorities);
            #if DEBUG
            }
            #endif
        }

        public static 
        void ProgramParameter(Int32 program, Chela.Graphics.GL2.Version32 pname, Int32 value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glProgramParameteri((UInt32)program, (Chela.Graphics.GL2.Version32)pname, (Int32)value);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ProgramParameter(UInt32 program, Chela.Graphics.GL2.Version32 pname, Int32 value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glProgramParameteri((UInt32)program, (Chela.Graphics.GL2.Version32)pname, (Int32)value);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ProvokingVertex(Chela.Graphics.GL2.ProvokingVertexMode mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glProvokingVertex((Chela.Graphics.GL2.ProvokingVertexMode)mode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PushAttrib(Chela.Graphics.GL2.AttribMask mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPushAttrib((Chela.Graphics.GL2.AttribMask)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PushClientAttrib(Chela.Graphics.GL2.ClientAttribMask mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPushClientAttrib((Chela.Graphics.GL2.ClientAttribMask)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PushMatrix()
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPushMatrix();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PushName(Int32 name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPushName((UInt32)name);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PushName(UInt32 name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPushName((UInt32)name);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos2(Double x, Double y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glRasterPos2d((Double)x, (Double)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos2(Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glRasterPos2dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos2(ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glRasterPos2dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void RasterPos2(Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glRasterPos2dv((Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos2(Single x, Single y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glRasterPos2f((Single)x, (Single)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos2(Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glRasterPos2fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos2(ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glRasterPos2fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void RasterPos2(Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glRasterPos2fv((Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos2(Int32 x, Int32 y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glRasterPos2i((Int32)x, (Int32)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos2(Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glRasterPos2iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos2(ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glRasterPos2iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void RasterPos2(Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glRasterPos2iv((Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos2(Int16 x, Int16 y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glRasterPos2s((Int16)x, (Int16)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos2(Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glRasterPos2sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos2(ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glRasterPos2sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void RasterPos2(Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glRasterPos2sv((Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos3(Double x, Double y, Double z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glRasterPos3d((Double)x, (Double)y, (Double)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos3(Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glRasterPos3dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos3(ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glRasterPos3dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void RasterPos3(Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glRasterPos3dv((Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos3(Single x, Single y, Single z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glRasterPos3f((Single)x, (Single)y, (Single)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos3(Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glRasterPos3fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos3(ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glRasterPos3fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void RasterPos3(Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glRasterPos3fv((Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos3(Int32 x, Int32 y, Int32 z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glRasterPos3i((Int32)x, (Int32)y, (Int32)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos3(Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glRasterPos3iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos3(ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glRasterPos3iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void RasterPos3(Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glRasterPos3iv((Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos3(Int16 x, Int16 y, Int16 z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glRasterPos3s((Int16)x, (Int16)y, (Int16)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos3(Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glRasterPos3sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos3(ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glRasterPos3sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void RasterPos3(Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glRasterPos3sv((Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos4(Double x, Double y, Double z, Double w)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glRasterPos4d((Double)x, (Double)y, (Double)z, (Double)w);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos4(Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glRasterPos4dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos4(ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glRasterPos4dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void RasterPos4(Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glRasterPos4dv((Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos4(Single x, Single y, Single z, Single w)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glRasterPos4f((Single)x, (Single)y, (Single)z, (Single)w);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos4(Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glRasterPos4fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos4(ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glRasterPos4fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void RasterPos4(Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glRasterPos4fv((Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos4(Int32 x, Int32 y, Int32 z, Int32 w)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glRasterPos4i((Int32)x, (Int32)y, (Int32)z, (Int32)w);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos4(Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glRasterPos4iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos4(ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glRasterPos4iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void RasterPos4(Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glRasterPos4iv((Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos4(Int16 x, Int16 y, Int16 z, Int16 w)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glRasterPos4s((Int16)x, (Int16)y, (Int16)z, (Int16)w);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos4(Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glRasterPos4sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RasterPos4(ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glRasterPos4sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void RasterPos4(Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glRasterPos4sv((Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void ReadBuffer(Chela.Graphics.GL2.ReadBufferMode mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glReadBuffer((Chela.Graphics.GL2.ReadBufferMode)mode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T6[] pixels)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T6[,] pixels)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T6[,,] pixels)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T6 pixels)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T6)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Rect(Double x1, Double y1, Double x2, Double y2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glRectd((Double)x1, (Double)y1, (Double)x2, (Double)y2);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Rect(Double[] v1, Double[] v2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v1_ptr = v1)
                fixed (Double* v2_ptr = v2)
                {
                    Delegates.glRectdv((Double*)v1_ptr, (Double*)v2_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Rect(ref Double v1, ref Double v2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v1_ptr = &v1)
                fixed (Double* v2_ptr = &v2)
                {
                    Delegates.glRectdv((Double*)v1_ptr, (Double*)v2_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Rect(Double* v1, Double* v2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glRectdv((Double*)v1, (Double*)v2);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Rect(Single x1, Single y1, Single x2, Single y2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glRectf((Single)x1, (Single)y1, (Single)x2, (Single)y2);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Rect(Single[] v1, Single[] v2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v1_ptr = v1)
                fixed (Single* v2_ptr = v2)
                {
                    Delegates.glRectfv((Single*)v1_ptr, (Single*)v2_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Rect(ref Single v1, ref Single v2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v1_ptr = &v1)
                fixed (Single* v2_ptr = &v2)
                {
                    Delegates.glRectfv((Single*)v1_ptr, (Single*)v2_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Rect(Single* v1, Single* v2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glRectfv((Single*)v1, (Single*)v2);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Rect(Int32 x1, Int32 y1, Int32 x2, Int32 y2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glRecti((Int32)x1, (Int32)y1, (Int32)x2, (Int32)y2);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Rect(Int32[] v1, Int32[] v2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v1_ptr = v1)
                fixed (Int32* v2_ptr = v2)
                {
                    Delegates.glRectiv((Int32*)v1_ptr, (Int32*)v2_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Rect(ref Int32 v1, ref Int32 v2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v1_ptr = &v1)
                fixed (Int32* v2_ptr = &v2)
                {
                    Delegates.glRectiv((Int32*)v1_ptr, (Int32*)v2_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Rect(Int32* v1, Int32* v2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glRectiv((Int32*)v1, (Int32*)v2);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Rects(Int16 x1, Int16 y1, Int16 x2, Int16 y2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glRects((Int16)x1, (Int16)y1, (Int16)x2, (Int16)y2);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Rect(Int16[] v1, Int16[] v2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v1_ptr = v1)
                fixed (Int16* v2_ptr = v2)
                {
                    Delegates.glRectsv((Int16*)v1_ptr, (Int16*)v2_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Rect(ref Int16 v1, ref Int16 v2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v1_ptr = &v1)
                fixed (Int16* v2_ptr = &v2)
                {
                    Delegates.glRectsv((Int16*)v1_ptr, (Int16*)v2_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Rect(Int16* v1, Int16* v2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glRectsv((Int16*)v1, (Int16*)v2);
            #if DEBUG
            }
            #endif
        }

        public static 
        void RenderbufferStorage(Chela.Graphics.GL2.RenderbufferTarget target, Chela.Graphics.GL2.RenderbufferStorage internalformat, Int32 width, Int32 height)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glRenderbufferStorage((Chela.Graphics.GL2.RenderbufferTarget)target, (Chela.Graphics.GL2.RenderbufferStorage)internalformat, (Int32)width, (Int32)height);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RenderbufferStorageMultisample(Chela.Graphics.GL2.RenderbufferTarget target, Int32 samples, Chela.Graphics.GL2.RenderbufferStorage internalformat, Int32 width, Int32 height)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glRenderbufferStorageMultisample((Chela.Graphics.GL2.RenderbufferTarget)target, (Int32)samples, (Chela.Graphics.GL2.RenderbufferStorage)internalformat, (Int32)width, (Int32)height);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        Int32 RenderMode(Chela.Graphics.GL2.RenderingMode mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glRenderMode((Chela.Graphics.GL2.RenderingMode)mode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ResetHistogram(Chela.Graphics.GL2.HistogramTarget target)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glResetHistogram((Chela.Graphics.GL2.HistogramTarget)target);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ResetMinmax(Chela.Graphics.GL2.MinmaxTarget target)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glResetMinmax((Chela.Graphics.GL2.MinmaxTarget)target);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Rotate(Double angle, Double x, Double y, Double z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glRotated((Double)angle, (Double)x, (Double)y, (Double)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Rotate(Single angle, Single x, Single y, Single z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glRotatef((Single)angle, (Single)x, (Single)y, (Single)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SampleCoverage(Single value, bool invert)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glSampleCoverage((Single)value, (bool)invert);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SampleMask(Int32 index, Int32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glSampleMaski((UInt32)index, (UInt32)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SampleMask(UInt32 index, UInt32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glSampleMaski((UInt32)index, (UInt32)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Scale(Double x, Double y, Double z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glScaled((Double)x, (Double)y, (Double)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Scale(Single x, Single y, Single z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glScalef((Single)x, (Single)y, (Single)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Scissor(Int32 x, Int32 y, Int32 width, Int32 height)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glScissor((Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(SByte red, SByte green, SByte blue)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glSecondaryColor3b((SByte)red, (SByte)green, (SByte)blue);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(SByte[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Delegates.glSecondaryColor3bv((SByte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(ref SByte v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3bv((SByte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void SecondaryColor3(SByte* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glSecondaryColor3bv((SByte*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(Double red, Double green, Double blue)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glSecondaryColor3d((Double)red, (Double)green, (Double)blue);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glSecondaryColor3dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void SecondaryColor3(Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glSecondaryColor3dv((Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(Single red, Single green, Single blue)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glSecondaryColor3f((Single)red, (Single)green, (Single)blue);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glSecondaryColor3fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void SecondaryColor3(Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glSecondaryColor3fv((Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(Int32 red, Int32 green, Int32 blue)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glSecondaryColor3i((Int32)red, (Int32)green, (Int32)blue);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glSecondaryColor3iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void SecondaryColor3(Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glSecondaryColor3iv((Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(Int16 red, Int16 green, Int16 blue)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glSecondaryColor3s((Int16)red, (Int16)green, (Int16)blue);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glSecondaryColor3sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void SecondaryColor3(Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glSecondaryColor3sv((Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(Byte red, Byte green, Byte blue)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glSecondaryColor3ub((Byte)red, (Byte)green, (Byte)blue);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(Byte[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glSecondaryColor3ubv((Byte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(ref Byte v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3ubv((Byte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void SecondaryColor3(Byte* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glSecondaryColor3ubv((Byte*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(UInt32 red, UInt32 green, UInt32 blue)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glSecondaryColor3ui((UInt32)red, (UInt32)green, (UInt32)blue);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(UInt32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glSecondaryColor3uiv((UInt32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(ref UInt32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3uiv((UInt32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void SecondaryColor3(UInt32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glSecondaryColor3uiv((UInt32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(UInt16 red, UInt16 green, UInt16 blue)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glSecondaryColor3us((UInt16)red, (UInt16)green, (UInt16)blue);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(UInt16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Delegates.glSecondaryColor3usv((UInt16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColor3(ref UInt16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Delegates.glSecondaryColor3usv((UInt16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void SecondaryColor3(UInt16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glSecondaryColor3usv((UInt16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColorPointer(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, IntPtr pointer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glSecondaryColorPointer((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (IntPtr)pointer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColorPointer<T3>(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, T3[] pointer)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glSecondaryColorPointer((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColorPointer<T3>(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, T3[,] pointer)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glSecondaryColorPointer((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColorPointer<T3>(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, T3[,,] pointer)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glSecondaryColorPointer((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SecondaryColorPointer<T3>(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, ref T3 pointer)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glSecondaryColorPointer((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T3)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SelectBuffer(Int32 size, Int32[] buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* buffer_ptr = buffer)
                {
                    Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SelectBuffer(Int32 size, out Int32 buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* buffer_ptr = &buffer)
                {
                    Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
                    buffer = *buffer_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void SelectBuffer(Int32 size, Int32* buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer);
            #if DEBUG
            }
            #endif
        }

        public static 
        void SelectBuffer(Int32 size, UInt32[] buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* buffer_ptr = buffer)
                {
                    Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SelectBuffer(Int32 size, out UInt32 buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* buffer_ptr = &buffer)
                {
                    Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer_ptr);
                    buffer = *buffer_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void SelectBuffer(Int32 size, UInt32* buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glSelectBuffer((Int32)size, (UInt32*)buffer);
            #if DEBUG
            }
            #endif
        }

        public static 
        void SeparableFilter2D(Chela.Graphics.GL2.SeparableTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, IntPtr column)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glSeparableFilter2D((Chela.Graphics.GL2.SeparableTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SeparableFilter2D<T7>(Chela.Graphics.GL2.SeparableTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, T7[] column)
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2D((Chela.Graphics.GL2.SeparableTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    column_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SeparableFilter2D<T7>(Chela.Graphics.GL2.SeparableTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, T7[,] column)
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2D((Chela.Graphics.GL2.SeparableTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    column_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SeparableFilter2D<T7>(Chela.Graphics.GL2.SeparableTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, T7[,,] column)
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2D((Chela.Graphics.GL2.SeparableTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    column_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SeparableFilter2D<T7>(Chela.Graphics.GL2.SeparableTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, ref T7 column)
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2D((Chela.Graphics.GL2.SeparableTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
                    column = (T7)column_ptr.Target;
                }
                finally
                {
                    column_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SeparableFilter2D<T6,T7>(Chela.Graphics.GL2.SeparableTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T6[] row, T7[,,] column)
            where T6 : struct
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2D((Chela.Graphics.GL2.SeparableTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SeparableFilter2D<T6,T7>(Chela.Graphics.GL2.SeparableTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T6[,] row, T7[,,] column)
            where T6 : struct
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2D((Chela.Graphics.GL2.SeparableTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SeparableFilter2D<T6,T7>(Chela.Graphics.GL2.SeparableTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T6[,,] row, T7[,,] column)
            where T6 : struct
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2D((Chela.Graphics.GL2.SeparableTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SeparableFilter2D<T6,T7>(Chela.Graphics.GL2.SeparableTarget target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T6 row, T7[,,] column)
            where T6 : struct
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                try
                {
                    Delegates.glSeparableFilter2D((Chela.Graphics.GL2.SeparableTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
                    row = (T6)row_ptr.Target;
                }
                finally
                {
                    row_ptr.Free();
                    column_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShadeModel(Chela.Graphics.GL2.ShadingModel mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glShadeModel((Chela.Graphics.GL2.ShadingModel)mode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderSource(Int32 shader, Int32 count, String[] @string, ref Int32 length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    StringHandle @string_ptr = StringHandle.Alloc(@string);
                    try
                    {
                        Delegates.glShaderSource((UInt32)shader, (Int32)count, @string_ptr.ArrayAddress, (Int32*)length_ptr);
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void ShaderSource(Int32 shader, Int32 count, String[] @string, Int32* length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle @string_ptr = StringHandle.Alloc(@string);
            try
            {
                Delegates.glShaderSource((UInt32)shader, (Int32)count, @string_ptr.ArrayAddress, (Int32*)length);
            }
            finally
            {
                @string_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderSource(UInt32 shader, Int32 count, String[] @string, ref Int32 length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    StringHandle @string_ptr = StringHandle.Alloc(@string);
                    try
                    {
                        Delegates.glShaderSource((UInt32)shader, (Int32)count, @string_ptr.ArrayAddress, (Int32*)length_ptr);
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void ShaderSource(UInt32 shader, Int32 count, String[] @string, Int32* length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle @string_ptr = StringHandle.Alloc(@string);
            try
            {
                Delegates.glShaderSource((UInt32)shader, (Int32)count, @string_ptr.ArrayAddress, (Int32*)length);
            }
            finally
            {
                @string_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void StencilFunc(Chela.Graphics.GL2.StencilFunction func, Int32 @ref, Int32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glStencilFunc((Chela.Graphics.GL2.StencilFunction)func, (Int32)@ref, (UInt32)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void StencilFunc(Chela.Graphics.GL2.StencilFunction func, Int32 @ref, UInt32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glStencilFunc((Chela.Graphics.GL2.StencilFunction)func, (Int32)@ref, (UInt32)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void StencilFuncSeparate(Chela.Graphics.GL2.StencilFace face, Chela.Graphics.GL2.StencilFunction func, Int32 @ref, Int32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glStencilFuncSeparate((Chela.Graphics.GL2.StencilFace)face, (Chela.Graphics.GL2.StencilFunction)func, (Int32)@ref, (UInt32)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void StencilFuncSeparate(Chela.Graphics.GL2.StencilFace face, Chela.Graphics.GL2.StencilFunction func, Int32 @ref, UInt32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glStencilFuncSeparate((Chela.Graphics.GL2.StencilFace)face, (Chela.Graphics.GL2.StencilFunction)func, (Int32)@ref, (UInt32)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void StencilMask(Int32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glStencilMask((UInt32)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void StencilMask(UInt32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glStencilMask((UInt32)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void StencilMaskSeparate(Chela.Graphics.GL2.StencilFace face, Int32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glStencilMaskSeparate((Chela.Graphics.GL2.StencilFace)face, (UInt32)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void StencilMaskSeparate(Chela.Graphics.GL2.StencilFace face, UInt32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glStencilMaskSeparate((Chela.Graphics.GL2.StencilFace)face, (UInt32)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void StencilOp(Chela.Graphics.GL2.StencilOp fail, Chela.Graphics.GL2.StencilOp zfail, Chela.Graphics.GL2.StencilOp zpass)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glStencilOp((Chela.Graphics.GL2.StencilOp)fail, (Chela.Graphics.GL2.StencilOp)zfail, (Chela.Graphics.GL2.StencilOp)zpass);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void StencilOpSeparate(Chela.Graphics.GL2.StencilFace face, Chela.Graphics.GL2.StencilOp sfail, Chela.Graphics.GL2.StencilOp dpfail, Chela.Graphics.GL2.StencilOp dppass)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glStencilOpSeparate((Chela.Graphics.GL2.StencilFace)face, (Chela.Graphics.GL2.StencilOp)sfail, (Chela.Graphics.GL2.StencilOp)dpfail, (Chela.Graphics.GL2.StencilOp)dppass);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexBuffer(Chela.Graphics.GL2.TextureBufferTarget target, Chela.Graphics.GL2.SizedInternalFormat internalformat, Int32 buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexBuffer((Chela.Graphics.GL2.TextureBufferTarget)target, (Chela.Graphics.GL2.SizedInternalFormat)internalformat, (UInt32)buffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexBuffer(Chela.Graphics.GL2.TextureBufferTarget target, Chela.Graphics.GL2.SizedInternalFormat internalformat, UInt32 buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexBuffer((Chela.Graphics.GL2.TextureBufferTarget)target, (Chela.Graphics.GL2.SizedInternalFormat)internalformat, (UInt32)buffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord1(Double s)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexCoord1d((Double)s);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexCoord1(Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexCoord1dv((Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord1(Single s)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexCoord1f((Single)s);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexCoord1(Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexCoord1fv((Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord1(Int32 s)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexCoord1i((Int32)s);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexCoord1(Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexCoord1iv((Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord1(Int16 s)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexCoord1s((Int16)s);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexCoord1(Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexCoord1sv((Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord2(Double s, Double t)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexCoord2d((Double)s, (Double)t);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord2(Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glTexCoord2dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord2(ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glTexCoord2dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexCoord2(Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexCoord2dv((Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord2(Single s, Single t)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexCoord2f((Single)s, (Single)t);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord2(Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glTexCoord2fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord2(ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glTexCoord2fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexCoord2(Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexCoord2fv((Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord2(Int32 s, Int32 t)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexCoord2i((Int32)s, (Int32)t);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord2(Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glTexCoord2iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord2(ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glTexCoord2iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexCoord2(Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexCoord2iv((Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord2(Int16 s, Int16 t)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexCoord2s((Int16)s, (Int16)t);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord2(Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glTexCoord2sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord2(ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glTexCoord2sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexCoord2(Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexCoord2sv((Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord3(Double s, Double t, Double r)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexCoord3d((Double)s, (Double)t, (Double)r);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord3(Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glTexCoord3dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord3(ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glTexCoord3dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexCoord3(Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexCoord3dv((Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord3(Single s, Single t, Single r)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexCoord3f((Single)s, (Single)t, (Single)r);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord3(Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glTexCoord3fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord3(ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glTexCoord3fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexCoord3(Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexCoord3fv((Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord3(Int32 s, Int32 t, Int32 r)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexCoord3i((Int32)s, (Int32)t, (Int32)r);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord3(Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glTexCoord3iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord3(ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glTexCoord3iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexCoord3(Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexCoord3iv((Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord3(Int16 s, Int16 t, Int16 r)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexCoord3s((Int16)s, (Int16)t, (Int16)r);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord3(Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glTexCoord3sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord3(ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glTexCoord3sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexCoord3(Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexCoord3sv((Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord4(Double s, Double t, Double r, Double q)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexCoord4d((Double)s, (Double)t, (Double)r, (Double)q);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord4(Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glTexCoord4dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord4(ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glTexCoord4dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexCoord4(Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexCoord4dv((Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord4(Single s, Single t, Single r, Single q)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexCoord4f((Single)s, (Single)t, (Single)r, (Single)q);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord4(Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glTexCoord4fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord4(ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glTexCoord4fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexCoord4(Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexCoord4fv((Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord4(Int32 s, Int32 t, Int32 r, Int32 q)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexCoord4i((Int32)s, (Int32)t, (Int32)r, (Int32)q);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord4(Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glTexCoord4iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord4(ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glTexCoord4iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexCoord4(Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexCoord4iv((Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord4(Int16 s, Int16 t, Int16 r, Int16 q)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexCoord4s((Int16)s, (Int16)t, (Int16)r, (Int16)q);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord4(Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glTexCoord4sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoord4(ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glTexCoord4sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexCoord4(Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexCoord4sv((Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoordPointer(Int32 size, Chela.Graphics.GL2.TexCoordPointerType type, Int32 stride, IntPtr pointer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexCoordPointer((Int32)size, (Chela.Graphics.GL2.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoordPointer<T3>(Int32 size, Chela.Graphics.GL2.TexCoordPointerType type, Int32 stride, T3[] pointer)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexCoordPointer((Int32)size, (Chela.Graphics.GL2.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoordPointer<T3>(Int32 size, Chela.Graphics.GL2.TexCoordPointerType type, Int32 stride, T3[,] pointer)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexCoordPointer((Int32)size, (Chela.Graphics.GL2.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoordPointer<T3>(Int32 size, Chela.Graphics.GL2.TexCoordPointerType type, Int32 stride, T3[,,] pointer)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexCoordPointer((Int32)size, (Chela.Graphics.GL2.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexCoordPointer<T3>(Int32 size, Chela.Graphics.GL2.TexCoordPointerType type, Int32 stride, ref T3 pointer)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexCoordPointer((Int32)size, (Chela.Graphics.GL2.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T3)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexEnv(Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, Single param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexEnvf((Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Single)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexEnv(Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glTexEnvfv((Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexEnv(Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexEnvfv((Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexEnv(Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, Int32 param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexEnvi((Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Int32)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexEnv(Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glTexEnviv((Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexEnv(Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexEnviv((Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexGend(Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Double param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexGend((Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Double)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexGen(Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Double[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* @params_ptr = @params)
                {
                    Delegates.glTexGendv((Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Double*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexGen(Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, ref Double @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* @params_ptr = &@params)
                {
                    Delegates.glTexGendv((Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Double*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexGen(Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Double* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexGendv((Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Double*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexGen(Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Single param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexGenf((Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Single)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexGen(Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glTexGenfv((Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexGen(Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexGenfv((Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexGen(Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Int32 param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexGeni((Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Int32)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexGen(Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glTexGeniv((Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexGen(Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexGeniv((Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexImage1D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexImage1D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexImage1D<T7>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T7[] pixels)
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage1D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexImage1D<T7>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T7[,] pixels)
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage1D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexImage1D<T7>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T7[,,] pixels)
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage1D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexImage1D<T7>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T7 pixels)
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage1D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T7)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexImage2D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexImage2D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexImage2D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T8[] pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage2D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexImage2D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T8[,] pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage2D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexImage2D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T8[,,] pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage2D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexImage2D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T8 pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage2D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T8)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexImage2DMultisample(Chela.Graphics.GL2.TextureTargetMultisample target, Int32 samples, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, bool fixedsamplelocations)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexImage2DMultisample((Chela.Graphics.GL2.TextureTargetMultisample)target, (Int32)samples, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (bool)fixedsamplelocations);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexImage3D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexImage3D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexImage3D<T9>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[] pixels)
            where T9 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage3D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexImage3D<T9>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[,] pixels)
            where T9 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage3D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexImage3D<T9>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[,,] pixels)
            where T9 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage3D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexImage3D<T9>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T9 pixels)
            where T9 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage3D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T9)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexImage3DMultisample(Chela.Graphics.GL2.TextureTargetMultisample target, Int32 samples, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, bool fixedsamplelocations)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexImage3DMultisample((Chela.Graphics.GL2.TextureTargetMultisample)target, (Int32)samples, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (bool)fixedsamplelocations);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexParameter(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Single param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexParameterf((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Single)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexParameter(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glTexParameterfv((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexParameter(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexParameterfv((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexParameter(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Int32 param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexParameteri((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glTexParameterIiv((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, ref Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glTexParameterIiv((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexParameterIiv((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, UInt32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* @params_ptr = @params)
                {
                    Delegates.glTexParameterIuiv((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (UInt32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, ref UInt32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* @params_ptr = &@params)
                {
                    Delegates.glTexParameterIuiv((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (UInt32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, UInt32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexParameterIuiv((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (UInt32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexParameter(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glTexParameteriv((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexParameter(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexParameteriv((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexSubImage1D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexSubImage1D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexSubImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T6[] pixels)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage1D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexSubImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T6[,] pixels)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage1D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexSubImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T6[,,] pixels)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage1D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexSubImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T6 pixels)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage1D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T6)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexSubImage2D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexSubImage2D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexSubImage2D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T8[] pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage2D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexSubImage2D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T8[,] pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage2D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexSubImage2D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T8[,,] pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage2D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexSubImage2D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T8 pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage2D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T8)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexSubImage3D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexSubImage3D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexSubImage3D<T10>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T10[] pixels)
            where T10 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage3D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexSubImage3D<T10>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T10[,] pixels)
            where T10 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage3D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexSubImage3D<T10>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T10[,,] pixels)
            where T10 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage3D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexSubImage3D<T10>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T10 pixels)
            where T10 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage3D((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T10)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TransformFeedbackVaryings(Int32 program, Int32 count, String[] varyings, Chela.Graphics.GL2.TransformFeedbackMode bufferMode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                StringHandle varyings_ptr = StringHandle.Alloc(varyings);
                try
                {
                    Delegates.glTransformFeedbackVaryings((UInt32)program, (Int32)count, varyings_ptr.ArrayAddress, (Chela.Graphics.GL2.TransformFeedbackMode)bufferMode);
                }
                finally
                {
                    varyings_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TransformFeedbackVaryings(UInt32 program, Int32 count, String[] varyings, Chela.Graphics.GL2.TransformFeedbackMode bufferMode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                StringHandle varyings_ptr = StringHandle.Alloc(varyings);
                try
                {
                    Delegates.glTransformFeedbackVaryings((UInt32)program, (Int32)count, varyings_ptr.ArrayAddress, (Chela.Graphics.GL2.TransformFeedbackMode)bufferMode);
                }
                finally
                {
                    varyings_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Translate(Double x, Double y, Double z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTranslated((Double)x, (Double)y, (Double)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Translate(Single x, Single y, Single z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTranslatef((Single)x, (Single)y, (Single)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform1(Int32 location, Single v0)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUniform1f((Int32)location, (Single)v0);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform1(Int32 location, Int32 count, Single[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform1(Int32 location, Int32 count, ref Single value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Uniform1(Int32 location, Int32 count, Single* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform1(Int32 location, Int32 v0)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUniform1i((Int32)location, (Int32)v0);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform1(Int32 location, Int32 count, Int32[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform1(Int32 location, Int32 count, ref Int32 value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Uniform1(Int32 location, Int32 count, Int32* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform1(Int32 location, UInt32 v0)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUniform1ui((Int32)location, (UInt32)v0);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform1(Int32 location, Int32 count, UInt32[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* value_ptr = value)
                {
                    Delegates.glUniform1uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform1(Int32 location, Int32 count, ref UInt32 value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* value_ptr = &value)
                {
                    Delegates.glUniform1uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Uniform1(Int32 location, Int32 count, UInt32* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniform1uiv((Int32)location, (Int32)count, (UInt32*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform2(Int32 location, Single v0, Single v1)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUniform2f((Int32)location, (Single)v0, (Single)v1);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform2(Int32 location, Int32 count, Single[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform2(Int32 location, Int32 count, ref Single value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Uniform2(Int32 location, Int32 count, Single* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform2(Int32 location, Int32 v0, Int32 v1)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUniform2i((Int32)location, (Int32)v0, (Int32)v1);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform2(Int32 location, Int32 count, Int32[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Delegates.glUniform2iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Uniform2(Int32 location, Int32 count, Int32* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniform2iv((Int32)location, (Int32)count, (Int32*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform2(Int32 location, UInt32 v0, UInt32 v1)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUniform2ui((Int32)location, (UInt32)v0, (UInt32)v1);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform2(Int32 location, Int32 count, UInt32[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* value_ptr = value)
                {
                    Delegates.glUniform2uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform2(Int32 location, Int32 count, ref UInt32 value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* value_ptr = &value)
                {
                    Delegates.glUniform2uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Uniform2(Int32 location, Int32 count, UInt32* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniform2uiv((Int32)location, (Int32)count, (UInt32*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform3(Int32 location, Single v0, Single v1, Single v2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUniform3f((Int32)location, (Single)v0, (Single)v1, (Single)v2);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform3(Int32 location, Int32 count, Single[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform3(Int32 location, Int32 count, ref Single value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Uniform3(Int32 location, Int32 count, Single* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform3(Int32 location, Int32 v0, Int32 v1, Int32 v2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUniform3i((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform3(Int32 location, Int32 count, Int32[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform3(Int32 location, Int32 count, ref Int32 value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Uniform3(Int32 location, Int32 count, Int32* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform3(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUniform3ui((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform3(Int32 location, Int32 count, UInt32[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* value_ptr = value)
                {
                    Delegates.glUniform3uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform3(Int32 location, Int32 count, ref UInt32 value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* value_ptr = &value)
                {
                    Delegates.glUniform3uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Uniform3(Int32 location, Int32 count, UInt32* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniform3uiv((Int32)location, (Int32)count, (UInt32*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform4(Int32 location, Single v0, Single v1, Single v2, Single v3)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUniform4f((Int32)location, (Single)v0, (Single)v1, (Single)v2, (Single)v3);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform4(Int32 location, Int32 count, Single[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform4(Int32 location, Int32 count, ref Single value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Uniform4(Int32 location, Int32 count, Single* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform4(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUniform4i((Int32)location, (Int32)v0, (Int32)v1, (Int32)v2, (Int32)v3);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform4(Int32 location, Int32 count, Int32[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* value_ptr = value)
                {
                    Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform4(Int32 location, Int32 count, ref Int32 value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* value_ptr = &value)
                {
                    Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Uniform4(Int32 location, Int32 count, Int32* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform4(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUniform4ui((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2, (UInt32)v3);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform4(Int32 location, Int32 count, UInt32[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* value_ptr = value)
                {
                    Delegates.glUniform4uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform4(Int32 location, Int32 count, ref UInt32 value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* value_ptr = &value)
                {
                    Delegates.glUniform4uiv((Int32)location, (Int32)count, (UInt32*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Uniform4(Int32 location, Int32 count, UInt32* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniform4uiv((Int32)location, (Int32)count, (UInt32*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformBlockBinding(Int32 program, Int32 uniformBlockIndex, Int32 uniformBlockBinding)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUniformBlockBinding((UInt32)program, (UInt32)uniformBlockIndex, (UInt32)uniformBlockBinding);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformBlockBinding(UInt32 program, UInt32 uniformBlockIndex, UInt32 uniformBlockBinding)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUniformBlockBinding((UInt32)program, (UInt32)uniformBlockIndex, (UInt32)uniformBlockBinding);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix2(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix2x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix2x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void UniformMatrix2x3(Int32 location, Int32 count, bool transpose, Single* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniformMatrix2x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix2x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix2x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void UniformMatrix2x4(Int32 location, Int32 count, bool transpose, Single* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniformMatrix2x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix3(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix3x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix3x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void UniformMatrix3x2(Int32 location, Int32 count, bool transpose, Single* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniformMatrix3x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix3x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix3x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void UniformMatrix3x4(Int32 location, Int32 count, bool transpose, Single* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniformMatrix3x4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix4(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix4x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix4x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void UniformMatrix4x2(Int32 location, Int32 count, bool transpose, Single* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniformMatrix4x2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix4x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix4x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void UniformMatrix4x3(Int32 location, Int32 count, bool transpose, Single* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniformMatrix4x3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        bool UnmapBuffer(Chela.Graphics.GL2.BufferTarget target)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glUnmapBuffer((Chela.Graphics.GL2.BufferTarget)target);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void UseProgram(Int32 program)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUseProgram((UInt32)program);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void UseProgram(UInt32 program)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUseProgram((UInt32)program);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ValidateProgram(Int32 program)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glValidateProgram((UInt32)program);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ValidateProgram(UInt32 program)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glValidateProgram((UInt32)program);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex2(Double x, Double y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertex2d((Double)x, (Double)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex2(Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertex2dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex2(ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertex2dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Vertex2(Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertex2dv((Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex2(Single x, Single y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertex2f((Single)x, (Single)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex2(Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertex2fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex2(ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertex2fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Vertex2(Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertex2fv((Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex2(Int32 x, Int32 y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertex2i((Int32)x, (Int32)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex2(Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertex2iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex2(ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertex2iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Vertex2(Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertex2iv((Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex2(Int16 x, Int16 y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertex2s((Int16)x, (Int16)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex2(Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertex2sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex2(ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertex2sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Vertex2(Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertex2sv((Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex3(Double x, Double y, Double z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertex3d((Double)x, (Double)y, (Double)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex3(Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertex3dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex3(ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertex3dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Vertex3(Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertex3dv((Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex3(Single x, Single y, Single z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertex3f((Single)x, (Single)y, (Single)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex3(Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertex3fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex3(ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertex3fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Vertex3(Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertex3fv((Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex3(Int32 x, Int32 y, Int32 z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertex3i((Int32)x, (Int32)y, (Int32)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex3(Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertex3iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex3(ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertex3iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Vertex3(Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertex3iv((Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex3(Int16 x, Int16 y, Int16 z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertex3s((Int16)x, (Int16)y, (Int16)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex3(Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertex3sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex3(ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertex3sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Vertex3(Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertex3sv((Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex4(Double x, Double y, Double z, Double w)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertex4d((Double)x, (Double)y, (Double)z, (Double)w);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex4(Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertex4dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex4(ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertex4dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Vertex4(Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertex4dv((Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex4(Single x, Single y, Single z, Single w)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertex4f((Single)x, (Single)y, (Single)z, (Single)w);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex4(Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertex4fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex4(ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertex4fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Vertex4(Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertex4fv((Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex4(Int32 x, Int32 y, Int32 z, Int32 w)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertex4i((Int32)x, (Int32)y, (Int32)z, (Int32)w);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex4(Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertex4iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex4(ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertex4iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Vertex4(Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertex4iv((Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex4(Int16 x, Int16 y, Int16 z, Int16 w)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertex4s((Int16)x, (Int16)y, (Int16)z, (Int16)w);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex4(Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertex4sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Vertex4(ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertex4sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Vertex4(Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertex4sv((Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib1(Int32 index, Double x)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib1d((UInt32)index, (Double)x);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib1(UInt32 index, Double x)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib1d((UInt32)index, (Double)x);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib1(Int32 index, Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib1dv((UInt32)index, (Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib1(UInt32 index, Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib1dv((UInt32)index, (Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib1(Int32 index, Single x)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib1f((UInt32)index, (Single)x);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib1(UInt32 index, Single x)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib1f((UInt32)index, (Single)x);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib1(Int32 index, Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib1fv((UInt32)index, (Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib1(UInt32 index, Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib1fv((UInt32)index, (Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib1(Int32 index, Int16 x)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib1s((UInt32)index, (Int16)x);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib1(UInt32 index, Int16 x)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib1s((UInt32)index, (Int16)x);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib1(Int32 index, Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib1sv((UInt32)index, (Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib1(UInt32 index, Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib1sv((UInt32)index, (Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(Int32 index, Double x, Double y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib2d((UInt32)index, (Double)x, (Double)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(UInt32 index, Double x, Double y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib2d((UInt32)index, (Double)x, (Double)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(Int32 index, Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(Int32 index, ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib2(Int32 index, Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(UInt32 index, Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(UInt32 index, ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib2(UInt32 index, Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib2dv((UInt32)index, (Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(Int32 index, Single x, Single y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib2f((UInt32)index, (Single)x, (Single)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(UInt32 index, Single x, Single y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib2f((UInt32)index, (Single)x, (Single)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(Int32 index, Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(Int32 index, ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib2(Int32 index, Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(UInt32 index, Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(UInt32 index, ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib2(UInt32 index, Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib2fv((UInt32)index, (Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(Int32 index, Int16 x, Int16 y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib2s((UInt32)index, (Int16)x, (Int16)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(UInt32 index, Int16 x, Int16 y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib2s((UInt32)index, (Int16)x, (Int16)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(Int32 index, Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(Int32 index, ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib2(Int32 index, Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(UInt32 index, Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(UInt32 index, ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib2(UInt32 index, Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib2sv((UInt32)index, (Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(Int32 index, Double x, Double y, Double z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib3d((UInt32)index, (Double)x, (Double)y, (Double)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(UInt32 index, Double x, Double y, Double z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib3d((UInt32)index, (Double)x, (Double)y, (Double)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(Int32 index, Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(Int32 index, ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib3(Int32 index, Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(UInt32 index, Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(UInt32 index, ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib3(UInt32 index, Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib3dv((UInt32)index, (Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(Int32 index, Single x, Single y, Single z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib3f((UInt32)index, (Single)x, (Single)y, (Single)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(UInt32 index, Single x, Single y, Single z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib3f((UInt32)index, (Single)x, (Single)y, (Single)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(Int32 index, Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(Int32 index, ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib3(Int32 index, Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(UInt32 index, Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(UInt32 index, ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib3(UInt32 index, Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib3fv((UInt32)index, (Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(Int32 index, Int16 x, Int16 y, Int16 z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib3s((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(UInt32 index, Int16 x, Int16 y, Int16 z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib3s((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(Int32 index, Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(Int32 index, ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib3(Int32 index, Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(UInt32 index, Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(UInt32 index, ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib3(UInt32 index, Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib3sv((UInt32)index, (Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(UInt32 index, SByte[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Delegates.glVertexAttrib4bv((UInt32)index, (SByte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(UInt32 index, ref SByte v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4bv((UInt32)index, (SByte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4(UInt32 index, SByte* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4bv((UInt32)index, (SByte*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(Int32 index, Double x, Double y, Double z, Double w)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib4d((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(UInt32 index, Double x, Double y, Double z, Double w)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib4d((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(Int32 index, Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(Int32 index, ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4(Int32 index, Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(UInt32 index, Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(UInt32 index, ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4(UInt32 index, Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4dv((UInt32)index, (Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(Int32 index, Single x, Single y, Single z, Single w)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib4f((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(UInt32 index, Single x, Single y, Single z, Single w)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib4f((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(Int32 index, Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(Int32 index, ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4(Int32 index, Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(UInt32 index, Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(UInt32 index, ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4(UInt32 index, Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4fv((UInt32)index, (Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(Int32 index, Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(Int32 index, ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4(Int32 index, Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(UInt32 index, Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(UInt32 index, ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4(UInt32 index, Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4iv((UInt32)index, (Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4N(UInt32 index, SByte[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nbv((UInt32)index, (SByte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4N(UInt32 index, ref SByte v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nbv((UInt32)index, (SByte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4N(UInt32 index, SByte* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4Nbv((UInt32)index, (SByte*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4N(Int32 index, Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4N(Int32 index, ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4N(Int32 index, Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4N(UInt32 index, Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4N(UInt32 index, ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4N(UInt32 index, Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4Niv((UInt32)index, (Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4N(Int32 index, Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4N(Int32 index, ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4N(Int32 index, Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4N(UInt32 index, Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4N(UInt32 index, ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4N(UInt32 index, Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4Nsv((UInt32)index, (Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4N(Int32 index, Byte x, Byte y, Byte z, Byte w)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib4Nub((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4N(UInt32 index, Byte x, Byte y, Byte z, Byte w)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib4Nub((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4N(Int32 index, Byte[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4N(Int32 index, ref Byte v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4N(Int32 index, Byte* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4N(UInt32 index, Byte[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4N(UInt32 index, ref Byte v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4N(UInt32 index, Byte* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4Nubv((UInt32)index, (Byte*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4N(UInt32 index, UInt32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4N(UInt32 index, ref UInt32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4N(UInt32 index, UInt32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4Nuiv((UInt32)index, (UInt32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4N(UInt32 index, UInt16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Delegates.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4N(UInt32 index, ref UInt16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4N(UInt32 index, UInt16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4Nusv((UInt32)index, (UInt16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(Int32 index, Int16 x, Int16 y, Int16 z, Int16 w)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib4s((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(UInt32 index, Int16 x, Int16 y, Int16 z, Int16 w)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib4s((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(Int32 index, Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(Int32 index, ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4(Int32 index, Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(UInt32 index, Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(UInt32 index, ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4(UInt32 index, Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4sv((UInt32)index, (Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(Int32 index, Byte[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(Int32 index, ref Byte v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4(Int32 index, Byte* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(UInt32 index, Byte[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(UInt32 index, ref Byte v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4(UInt32 index, Byte* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4ubv((UInt32)index, (Byte*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(UInt32 index, UInt32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glVertexAttrib4uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(UInt32 index, ref UInt32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4(UInt32 index, UInt32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4uiv((UInt32)index, (UInt32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(UInt32 index, UInt16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Delegates.glVertexAttrib4usv((UInt32)index, (UInt16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(UInt32 index, ref UInt16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Delegates.glVertexAttrib4usv((UInt32)index, (UInt16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4(UInt32 index, UInt16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4usv((UInt32)index, (UInt16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI1(Int32 index, Int32 x)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttribI1i((UInt32)index, (Int32)x);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI1(UInt32 index, Int32 x)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttribI1i((UInt32)index, (Int32)x);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttribI1(Int32 index, Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttribI1iv((UInt32)index, (Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttribI1(UInt32 index, Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttribI1iv((UInt32)index, (Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI1(UInt32 index, UInt32 x)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttribI1ui((UInt32)index, (UInt32)x);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttribI1(UInt32 index, UInt32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttribI1uiv((UInt32)index, (UInt32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI2(Int32 index, Int32 x, Int32 y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttribI2i((UInt32)index, (Int32)x, (Int32)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI2(UInt32 index, Int32 x, Int32 y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttribI2i((UInt32)index, (Int32)x, (Int32)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI2(Int32 index, Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI2(Int32 index, ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttribI2(Int32 index, Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI2(UInt32 index, Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI2(UInt32 index, ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttribI2(UInt32 index, Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttribI2iv((UInt32)index, (Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI2(UInt32 index, UInt32 x, UInt32 y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttribI2ui((UInt32)index, (UInt32)x, (UInt32)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI2(UInt32 index, UInt32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glVertexAttribI2uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI2(UInt32 index, ref UInt32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI2uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttribI2(UInt32 index, UInt32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttribI2uiv((UInt32)index, (UInt32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI3(Int32 index, Int32 x, Int32 y, Int32 z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttribI3i((UInt32)index, (Int32)x, (Int32)y, (Int32)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI3(UInt32 index, Int32 x, Int32 y, Int32 z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttribI3i((UInt32)index, (Int32)x, (Int32)y, (Int32)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI3(Int32 index, Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI3(Int32 index, ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttribI3(Int32 index, Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI3(UInt32 index, Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI3(UInt32 index, ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttribI3(UInt32 index, Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttribI3iv((UInt32)index, (Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI3(UInt32 index, UInt32 x, UInt32 y, UInt32 z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttribI3ui((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI3(UInt32 index, UInt32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glVertexAttribI3uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI3(UInt32 index, ref UInt32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI3uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttribI3(UInt32 index, UInt32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttribI3uiv((UInt32)index, (UInt32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI4(UInt32 index, SByte[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (SByte* v_ptr = v)
                {
                    Delegates.glVertexAttribI4bv((UInt32)index, (SByte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI4(UInt32 index, ref SByte v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (SByte* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4bv((UInt32)index, (SByte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttribI4(UInt32 index, SByte* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttribI4bv((UInt32)index, (SByte*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI4(Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttribI4i((UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI4(UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttribI4i((UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI4(Int32 index, Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI4(Int32 index, ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttribI4(Int32 index, Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI4(UInt32 index, Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI4(UInt32 index, ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttribI4(UInt32 index, Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttribI4iv((UInt32)index, (Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI4(Int32 index, Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI4(Int32 index, ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttribI4(Int32 index, Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI4(UInt32 index, Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI4(UInt32 index, ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttribI4(UInt32 index, Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttribI4sv((UInt32)index, (Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI4(Int32 index, Byte[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI4(Int32 index, ref Byte v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttribI4(Int32 index, Byte* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI4(UInt32 index, Byte[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* v_ptr = v)
                {
                    Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI4(UInt32 index, ref Byte v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Byte* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttribI4(UInt32 index, Byte* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttribI4ubv((UInt32)index, (Byte*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI4(UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttribI4ui((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI4(UInt32 index, UInt32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* v_ptr = v)
                {
                    Delegates.glVertexAttribI4uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI4(UInt32 index, ref UInt32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4uiv((UInt32)index, (UInt32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttribI4(UInt32 index, UInt32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttribI4uiv((UInt32)index, (UInt32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI4(UInt32 index, UInt16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt16* v_ptr = v)
                {
                    Delegates.glVertexAttribI4usv((UInt32)index, (UInt16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribI4(UInt32 index, ref UInt16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt16* v_ptr = &v)
                {
                    Delegates.glVertexAttribI4usv((UInt32)index, (UInt16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttribI4(UInt32 index, UInt16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttribI4usv((UInt32)index, (UInt16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribIPointer(Int32 index, Int32 size, Chela.Graphics.GL2.VertexAttribIPointerType type, Int32 stride, IntPtr pointer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribIPointer<T4>(Int32 index, Int32 size, Chela.Graphics.GL2.VertexAttribIPointerType type, Int32 stride, T4[] pointer)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribIPointer<T4>(Int32 index, Int32 size, Chela.Graphics.GL2.VertexAttribIPointerType type, Int32 stride, T4[,] pointer)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribIPointer<T4>(Int32 index, Int32 size, Chela.Graphics.GL2.VertexAttribIPointerType type, Int32 stride, T4[,,] pointer)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribIPointer<T4>(Int32 index, Int32 size, Chela.Graphics.GL2.VertexAttribIPointerType type, Int32 stride, ref T4 pointer)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T4)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribIPointer(UInt32 index, Int32 size, Chela.Graphics.GL2.VertexAttribIPointerType type, Int32 stride, IntPtr pointer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribIPointer<T4>(UInt32 index, Int32 size, Chela.Graphics.GL2.VertexAttribIPointerType type, Int32 stride, T4[] pointer)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribIPointer<T4>(UInt32 index, Int32 size, Chela.Graphics.GL2.VertexAttribIPointerType type, Int32 stride, T4[,] pointer)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribIPointer<T4>(UInt32 index, Int32 size, Chela.Graphics.GL2.VertexAttribIPointerType type, Int32 stride, T4[,,] pointer)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribIPointer<T4>(UInt32 index, Int32 size, Chela.Graphics.GL2.VertexAttribIPointerType type, Int32 stride, ref T4 pointer)
            where T4 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribIPointer((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribIPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T4)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribPointer(Int32 index, Int32 size, Chela.Graphics.GL2.VertexAttribPointerType type, bool normalized, Int32 stride, IntPtr pointer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribPointer<T5>(Int32 index, Int32 size, Chela.Graphics.GL2.VertexAttribPointerType type, bool normalized, Int32 stride, T5[] pointer)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribPointer<T5>(Int32 index, Int32 size, Chela.Graphics.GL2.VertexAttribPointerType type, bool normalized, Int32 stride, T5[,] pointer)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribPointer<T5>(Int32 index, Int32 size, Chela.Graphics.GL2.VertexAttribPointerType type, bool normalized, Int32 stride, T5[,,] pointer)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribPointer<T5>(Int32 index, Int32 size, Chela.Graphics.GL2.VertexAttribPointerType type, bool normalized, Int32 stride, ref T5 pointer)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T5)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribPointer(UInt32 index, Int32 size, Chela.Graphics.GL2.VertexAttribPointerType type, bool normalized, Int32 stride, IntPtr pointer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribPointer<T5>(UInt32 index, Int32 size, Chela.Graphics.GL2.VertexAttribPointerType type, bool normalized, Int32 stride, T5[] pointer)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribPointer<T5>(UInt32 index, Int32 size, Chela.Graphics.GL2.VertexAttribPointerType type, bool normalized, Int32 stride, T5[,] pointer)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribPointer<T5>(UInt32 index, Int32 size, Chela.Graphics.GL2.VertexAttribPointerType type, bool normalized, Int32 stride, T5[,,] pointer)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribPointer<T5>(UInt32 index, Int32 size, Chela.Graphics.GL2.VertexAttribPointerType type, bool normalized, Int32 stride, ref T5 pointer)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)index, (Int32)size, (Chela.Graphics.GL2.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T5)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexPointer(Int32 size, Chela.Graphics.GL2.VertexPointerType type, Int32 stride, IntPtr pointer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexPointer((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (Int32)stride, (IntPtr)pointer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexPointer<T3>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, Int32 stride, T3[] pointer)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexPointer((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexPointer<T3>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, Int32 stride, T3[,] pointer)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexPointer((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexPointer<T3>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, Int32 stride, T3[,,] pointer)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexPointer((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexPointer<T3>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, Int32 stride, ref T3 pointer)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexPointer((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T3)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Viewport(Int32 x, Int32 y, Int32 width, Int32 height)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glViewport((Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void WaitSync(IntPtr sync, Int32 flags, Int64 timeout)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glWaitSync((IntPtr)sync, (UInt32)flags, (UInt64)timeout);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void WaitSync(IntPtr sync, UInt32 flags, UInt64 timeout)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glWaitSync((IntPtr)sync, (UInt32)flags, (UInt64)timeout);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos2(Double x, Double y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glWindowPos2d((Double)x, (Double)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos2(Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glWindowPos2dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos2(ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glWindowPos2dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void WindowPos2(Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glWindowPos2dv((Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos2(Single x, Single y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glWindowPos2f((Single)x, (Single)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos2(Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glWindowPos2fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos2(ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glWindowPos2fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void WindowPos2(Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glWindowPos2fv((Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos2(Int32 x, Int32 y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glWindowPos2i((Int32)x, (Int32)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos2(Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glWindowPos2iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos2(ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glWindowPos2iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void WindowPos2(Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glWindowPos2iv((Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos2(Int16 x, Int16 y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glWindowPos2s((Int16)x, (Int16)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos2(Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glWindowPos2sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos2(ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glWindowPos2sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void WindowPos2(Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glWindowPos2sv((Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos3(Double x, Double y, Double z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glWindowPos3d((Double)x, (Double)y, (Double)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos3(Double[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = v)
                {
                    Delegates.glWindowPos3dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos3(ref Double v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Double* v_ptr = &v)
                {
                    Delegates.glWindowPos3dv((Double*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void WindowPos3(Double* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glWindowPos3dv((Double*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos3(Single x, Single y, Single z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glWindowPos3f((Single)x, (Single)y, (Single)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos3(Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glWindowPos3fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos3(ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glWindowPos3fv((Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void WindowPos3(Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glWindowPos3fv((Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos3(Int32 x, Int32 y, Int32 z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glWindowPos3i((Int32)x, (Int32)y, (Int32)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos3(Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glWindowPos3iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos3(ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glWindowPos3iv((Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void WindowPos3(Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glWindowPos3iv((Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos3(Int16 x, Int16 y, Int16 z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glWindowPos3s((Int16)x, (Int16)y, (Int16)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos3(Int16[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = v)
                {
                    Delegates.glWindowPos3sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void WindowPos3(ref Int16 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int16* v_ptr = &v)
                {
                    Delegates.glWindowPos3sv((Int16*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void WindowPos3(Int16* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glWindowPos3sv((Int16*)v);
            #if DEBUG
            }
            #endif
        }

        public static partial class Ext
        {
            public static 
            void ActiveStencilFace(Chela.Graphics.GL2.ExtStencilTwoSide face)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glActiveStencilFaceEXT((Chela.Graphics.GL2.ExtStencilTwoSide)face);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ApplyTexture(Chela.Graphics.GL2.ExtLightTexture mode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glApplyTextureEXT((Chela.Graphics.GL2.ExtLightTexture)mode);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool AreTexturesResident(Int32 n, Int32[] textures, bool[] residences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* textures_ptr = textures)
                    fixed (bool* residences_ptr = residences)
                    {
                        return Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool AreTexturesResident(Int32 n, ref Int32 textures, out bool residences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* textures_ptr = &textures)
                    fixed (bool* residences_ptr = &residences)
                    {
                        bool retval = Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                        residences = *residences_ptr;
                        return retval;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe bool AreTexturesResident(Int32 n, Int32* textures, bool* residences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                return Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures, (bool*)residences);
                #if DEBUG
                }
                #endif
            }

            public static 
            bool AreTexturesResident(Int32 n, UInt32[] textures, bool[] residences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* textures_ptr = textures)
                    fixed (bool* residences_ptr = residences)
                    {
                        return Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool AreTexturesResident(Int32 n, ref UInt32 textures, out bool residences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* textures_ptr = &textures)
                    fixed (bool* residences_ptr = &residences)
                    {
                        bool retval = Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures_ptr, (bool*)residences_ptr);
                        residences = *residences_ptr;
                        return retval;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe bool AreTexturesResident(Int32 n, UInt32* textures, bool* residences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                return Delegates.glAreTexturesResidentEXT((Int32)n, (UInt32*)textures, (bool*)residences);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ArrayElement(Int32 i)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glArrayElementEXT((Int32)i);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BeginTransformFeedback(Chela.Graphics.GL2.ExtTransformFeedback primitiveMode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBeginTransformFeedbackEXT((Chela.Graphics.GL2.ExtTransformFeedback)primitiveMode);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BeginVertexShader()
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBeginVertexShaderEXT();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindBufferBase(Chela.Graphics.GL2.ExtTransformFeedback target, Int32 index, Int32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindBufferBaseEXT((Chela.Graphics.GL2.ExtTransformFeedback)target, (UInt32)index, (UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindBufferBase(Chela.Graphics.GL2.ExtTransformFeedback target, UInt32 index, UInt32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindBufferBaseEXT((Chela.Graphics.GL2.ExtTransformFeedback)target, (UInt32)index, (UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindBufferOffset(Chela.Graphics.GL2.ExtTransformFeedback target, Int32 index, Int32 buffer, IntPtr offset)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindBufferOffsetEXT((Chela.Graphics.GL2.ExtTransformFeedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindBufferOffset(Chela.Graphics.GL2.ExtTransformFeedback target, UInt32 index, UInt32 buffer, IntPtr offset)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindBufferOffsetEXT((Chela.Graphics.GL2.ExtTransformFeedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindBufferRange(Chela.Graphics.GL2.ExtTransformFeedback target, Int32 index, Int32 buffer, IntPtr offset, IntPtr size)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindBufferRangeEXT((Chela.Graphics.GL2.ExtTransformFeedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindBufferRange(Chela.Graphics.GL2.ExtTransformFeedback target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindBufferRangeEXT((Chela.Graphics.GL2.ExtTransformFeedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindFragDataLocation(Int32 program, Int32 color, String name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        Delegates.glBindFragDataLocationEXT((UInt32)program, (UInt32)color, name_ptr.Address);
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindFragDataLocation(UInt32 program, UInt32 color, String name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        Delegates.glBindFragDataLocationEXT((UInt32)program, (UInt32)color, name_ptr.Address);
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindFramebuffer(Chela.Graphics.GL2.FramebufferTarget target, Int32 framebuffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindFramebufferEXT((Chela.Graphics.GL2.FramebufferTarget)target, (UInt32)framebuffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindFramebuffer(Chela.Graphics.GL2.FramebufferTarget target, UInt32 framebuffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindFramebufferEXT((Chela.Graphics.GL2.FramebufferTarget)target, (UInt32)framebuffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 BindLightParameter(Chela.Graphics.GL2.LightName light, Chela.Graphics.GL2.LightParameter value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glBindLightParameterEXT((Chela.Graphics.GL2.LightName)light, (Chela.Graphics.GL2.LightParameter)value);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 BindMaterialParameter(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glBindMaterialParameterEXT((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)value);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindMultiTexture(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 texture)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindMultiTextureEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (UInt32)texture);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindMultiTexture(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, UInt32 texture)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindMultiTextureEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (UInt32)texture);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 BindParameter(Chela.Graphics.GL2.ExtVertexShader value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glBindParameterEXT((Chela.Graphics.GL2.ExtVertexShader)value);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindRenderbuffer(Chela.Graphics.GL2.RenderbufferTarget target, Int32 renderbuffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindRenderbufferEXT((Chela.Graphics.GL2.RenderbufferTarget)target, (UInt32)renderbuffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindRenderbuffer(Chela.Graphics.GL2.RenderbufferTarget target, UInt32 renderbuffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindRenderbufferEXT((Chela.Graphics.GL2.RenderbufferTarget)target, (UInt32)renderbuffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 BindTexGenParameter(Chela.Graphics.GL2.TextureUnit unit, Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glBindTexGenParameterEXT((Chela.Graphics.GL2.TextureUnit)unit, (Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)value);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindTexture(Chela.Graphics.GL2.TextureTarget target, Int32 texture)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindTextureEXT((Chela.Graphics.GL2.TextureTarget)target, (UInt32)texture);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindTexture(Chela.Graphics.GL2.TextureTarget target, UInt32 texture)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindTextureEXT((Chela.Graphics.GL2.TextureTarget)target, (UInt32)texture);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 BindTextureUnitParameter(Chela.Graphics.GL2.TextureUnit unit, Chela.Graphics.GL2.ExtVertexShader value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glBindTextureUnitParameterEXT((Chela.Graphics.GL2.TextureUnit)unit, (Chela.Graphics.GL2.ExtVertexShader)value);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindVertexShader(Int32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindVertexShaderEXT((UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindVertexShader(UInt32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindVertexShaderEXT((UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Binormal3(Byte bx, Byte by, Byte bz)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBinormal3bEXT((SByte)bx, (SByte)by, (SByte)bz);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Binormal3(SByte bx, SByte by, SByte bz)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBinormal3bEXT((SByte)bx, (SByte)by, (SByte)bz);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Binormal3(Byte[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glBinormal3bvEXT((SByte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Binormal3(ref Byte v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glBinormal3bvEXT((SByte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Binormal3(Byte* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glBinormal3bvEXT((SByte*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Binormal3(SByte[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (SByte* v_ptr = v)
                    {
                        Delegates.glBinormal3bvEXT((SByte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Binormal3(ref SByte v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (SByte* v_ptr = &v)
                    {
                        Delegates.glBinormal3bvEXT((SByte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Binormal3(SByte* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glBinormal3bvEXT((SByte*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Binormal3(Double bx, Double by, Double bz)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBinormal3dEXT((Double)bx, (Double)by, (Double)bz);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Binormal3(Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glBinormal3dvEXT((Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Binormal3(ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glBinormal3dvEXT((Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Binormal3(Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glBinormal3dvEXT((Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Binormal3(Single bx, Single by, Single bz)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBinormal3fEXT((Single)bx, (Single)by, (Single)bz);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Binormal3(Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glBinormal3fvEXT((Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Binormal3(ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glBinormal3fvEXT((Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Binormal3(Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glBinormal3fvEXT((Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Binormal3(Int32 bx, Int32 by, Int32 bz)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBinormal3iEXT((Int32)bx, (Int32)by, (Int32)bz);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Binormal3(Int32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glBinormal3ivEXT((Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Binormal3(ref Int32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glBinormal3ivEXT((Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Binormal3(Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glBinormal3ivEXT((Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Binormal3(Int16 bx, Int16 by, Int16 bz)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBinormal3sEXT((Int16)bx, (Int16)by, (Int16)bz);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Binormal3(Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glBinormal3svEXT((Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Binormal3(ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glBinormal3svEXT((Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Binormal3(Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glBinormal3svEXT((Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void BinormalPointer(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBinormalPointerEXT((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BinormalPointer<T2>(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, T2[] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glBinormalPointerEXT((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BinormalPointer<T2>(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, T2[,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glBinormalPointerEXT((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BinormalPointer<T2>(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, T2[,,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glBinormalPointerEXT((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BinormalPointer<T2>(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, ref T2 pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glBinormalPointerEXT((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T2)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BlendColor(Single red, Single green, Single blue, Single alpha)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBlendColorEXT((Single)red, (Single)green, (Single)blue, (Single)alpha);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BlendEquation(Chela.Graphics.GL2.ExtBlendMinmax mode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBlendEquationEXT((Chela.Graphics.GL2.ExtBlendMinmax)mode);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BlendEquationSeparate(Chela.Graphics.GL2.ExtBlendEquationSeparate modeRGB, Chela.Graphics.GL2.ExtBlendEquationSeparate modeAlpha)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBlendEquationSeparateEXT((Chela.Graphics.GL2.ExtBlendEquationSeparate)modeRGB, (Chela.Graphics.GL2.ExtBlendEquationSeparate)modeAlpha);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BlendFuncSeparate(Chela.Graphics.GL2.ExtBlendFuncSeparate sfactorRGB, Chela.Graphics.GL2.ExtBlendFuncSeparate dfactorRGB, Chela.Graphics.GL2.ExtBlendFuncSeparate sfactorAlpha, Chela.Graphics.GL2.ExtBlendFuncSeparate dfactorAlpha)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBlendFuncSeparateEXT((Chela.Graphics.GL2.ExtBlendFuncSeparate)sfactorRGB, (Chela.Graphics.GL2.ExtBlendFuncSeparate)dfactorRGB, (Chela.Graphics.GL2.ExtBlendFuncSeparate)sfactorAlpha, (Chela.Graphics.GL2.ExtBlendFuncSeparate)dfactorAlpha);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BlitFramebuffer(Int32 srcX0, Int32 srcY0, Int32 srcX1, Int32 srcY1, Int32 dstX0, Int32 dstY0, Int32 dstX1, Int32 dstY1, Chela.Graphics.GL2.ClearBufferMask mask, Chela.Graphics.GL2.ExtFramebufferBlit filter)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBlitFramebufferEXT((Int32)srcX0, (Int32)srcY0, (Int32)srcX1, (Int32)srcY1, (Int32)dstX0, (Int32)dstY0, (Int32)dstX1, (Int32)dstY1, (Chela.Graphics.GL2.ClearBufferMask)mask, (Chela.Graphics.GL2.ExtFramebufferBlit)filter);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Chela.Graphics.GL2.FramebufferErrorCode CheckFramebufferStatus(Chela.Graphics.GL2.FramebufferTarget target)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glCheckFramebufferStatusEXT((Chela.Graphics.GL2.FramebufferTarget)target);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Chela.Graphics.GL2.ExtDirectStateAccess CheckNamedFramebufferStatus(Int32 framebuffer, Chela.Graphics.GL2.FramebufferTarget target)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glCheckNamedFramebufferStatusEXT((UInt32)framebuffer, (Chela.Graphics.GL2.FramebufferTarget)target);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Chela.Graphics.GL2.ExtDirectStateAccess CheckNamedFramebufferStatus(UInt32 framebuffer, Chela.Graphics.GL2.FramebufferTarget target)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glCheckNamedFramebufferStatusEXT((UInt32)framebuffer, (Chela.Graphics.GL2.FramebufferTarget)target);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ClearColorI(Int32 red, Int32 green, Int32 blue, Int32 alpha)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glClearColorIiEXT((Int32)red, (Int32)green, (Int32)blue, (Int32)alpha);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ClearColorI(UInt32 red, UInt32 green, UInt32 blue, UInt32 alpha)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glClearColorIuiEXT((UInt32)red, (UInt32)green, (UInt32)blue, (UInt32)alpha);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ClientAttribDefault(Chela.Graphics.GL2.ClientAttribMask mask)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glClientAttribDefaultEXT((Chela.Graphics.GL2.ClientAttribMask)mask);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorMaskIndexed(Int32 index, bool r, bool g, bool b, bool a)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glColorMaskIndexedEXT((UInt32)index, (bool)r, (bool)g, (bool)b, (bool)a);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorMaskIndexed(UInt32 index, bool r, bool g, bool b, bool a)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glColorMaskIndexedEXT((UInt32)index, (bool)r, (bool)g, (bool)b, (bool)a);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorPointer(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, Int32 count, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glColorPointerEXT((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorPointer<T4>(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, Int32 count, T4[] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorPointerEXT((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorPointer<T4>(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, Int32 count, T4[,] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorPointerEXT((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorPointer<T4>(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, Int32 count, T4[,,] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorPointerEXT((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorPointer<T4>(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, Int32 count, ref T4 pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorPointerEXT((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T4)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorSubTable(Chela.Graphics.GL2.ColorTableTarget target, Int32 start, Int32 count, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glColorSubTableEXT((Chela.Graphics.GL2.ColorTableTarget)target, (Int32)start, (Int32)count, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorSubTable<T5>(Chela.Graphics.GL2.ColorTableTarget target, Int32 start, Int32 count, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[] data)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorSubTableEXT((Chela.Graphics.GL2.ColorTableTarget)target, (Int32)start, (Int32)count, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorSubTable<T5>(Chela.Graphics.GL2.ColorTableTarget target, Int32 start, Int32 count, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[,] data)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorSubTableEXT((Chela.Graphics.GL2.ColorTableTarget)target, (Int32)start, (Int32)count, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorSubTable<T5>(Chela.Graphics.GL2.ColorTableTarget target, Int32 start, Int32 count, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[,,] data)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorSubTableEXT((Chela.Graphics.GL2.ColorTableTarget)target, (Int32)start, (Int32)count, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorSubTable<T5>(Chela.Graphics.GL2.ColorTableTarget target, Int32 start, Int32 count, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T5 data)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorSubTableEXT((Chela.Graphics.GL2.ColorTableTarget)target, (Int32)start, (Int32)count, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T5)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorTable(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.PixelInternalFormat internalFormat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr table)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glColorTableEXT((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalFormat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorTable<T5>(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.PixelInternalFormat internalFormat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[] table)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorTableEXT((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalFormat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        table_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorTable<T5>(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.PixelInternalFormat internalFormat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[,] table)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorTableEXT((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalFormat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        table_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorTable<T5>(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.PixelInternalFormat internalFormat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[,,] table)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorTableEXT((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalFormat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        table_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorTable<T5>(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.PixelInternalFormat internalFormat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T5 table)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorTableEXT((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.PixelInternalFormat)internalFormat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                        table = (T5)table_ptr.Target;
                    }
                    finally
                    {
                        table_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexImage1D(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr bits)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedMultiTexImage1DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexImage1D<T7>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Int32 imageSize, T7[] bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexImage1DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexImage1D<T7>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Int32 imageSize, T7[,] bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexImage1DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexImage1D<T7>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Int32 imageSize, T7[,,] bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexImage1DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexImage1D<T7>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Int32 imageSize, ref T7 bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexImage1DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                        bits = (T7)bits_ptr.Target;
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexImage2D(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr bits)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedMultiTexImage2DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexImage2D<T8>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, T8[] bits)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexImage2DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexImage2D<T8>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, T8[,] bits)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexImage2DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexImage2D<T8>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, T8[,,] bits)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexImage2DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexImage2D<T8>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, ref T8 bits)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexImage2DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                        bits = (T8)bits_ptr.Target;
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexImage3D(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr bits)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedMultiTexImage3DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexImage3D<T9>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, T9[] bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexImage3DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexImage3D<T9>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, T9[,] bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexImage3DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexImage3D<T9>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, T9[,,] bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexImage3DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexImage3D<T9>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, ref T9 bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexImage3DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                        bits = (T9)bits_ptr.Target;
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexSubImage1D(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedMultiTexSubImage1DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexSubImage1D<T7>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T7[] bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexSubImage1DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexSubImage1D<T7>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T7[,] bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexSubImage1DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexSubImage1D<T7>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T7[,,] bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexSubImage1DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexSubImage1D<T7>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, ref T7 bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexSubImage1DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                        bits = (T7)bits_ptr.Target;
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexSubImage2D(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedMultiTexSubImage2DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexSubImage2D<T9>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T9[] bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexSubImage2DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexSubImage2D<T9>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T9[,] bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexSubImage2DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexSubImage2D<T9>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T9[,,] bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexSubImage2DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexSubImage2D<T9>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, ref T9 bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexSubImage2DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                        bits = (T9)bits_ptr.Target;
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexSubImage3D(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedMultiTexSubImage3DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexSubImage3D<T11>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T11[] bits)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexSubImage3DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexSubImage3D<T11>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T11[,] bits)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexSubImage3DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexSubImage3D<T11>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T11[,,] bits)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexSubImage3DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedMultiTexSubImage3D<T11>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, ref T11 bits)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedMultiTexSubImage3DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                        bits = (T11)bits_ptr.Target;
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage1D(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr bits)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage1D<T7>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Int32 imageSize, T7[] bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage1D<T7>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Int32 imageSize, T7[,] bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage1D<T7>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Int32 imageSize, T7[,,] bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage1D<T7>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Int32 imageSize, ref T7 bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                        bits = (T7)bits_ptr.Target;
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage1D(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Int32 imageSize, IntPtr bits)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage1D<T7>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Int32 imageSize, T7[] bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage1D<T7>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Int32 imageSize, T7[,] bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage1D<T7>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Int32 imageSize, T7[,,] bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage1D<T7>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Int32 imageSize, ref T7 bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                        bits = (T7)bits_ptr.Target;
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage2D(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr bits)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage2D<T8>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, T8[] bits)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage2D<T8>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, T8[,] bits)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage2D<T8>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, T8[,,] bits)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage2D<T8>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, ref T8 bits)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                        bits = (T8)bits_ptr.Target;
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage2D(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr bits)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage2D<T8>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, T8[] bits)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage2D<T8>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, T8[,] bits)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage2D<T8>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, T8[,,] bits)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage2D<T8>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, ref T8 bits)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                        bits = (T8)bits_ptr.Target;
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage3D(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr bits)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage3D<T9>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, T9[] bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage3D<T9>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, T9[,] bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage3D<T9>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, T9[,,] bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage3D<T9>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, ref T9 bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                        bits = (T9)bits_ptr.Target;
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage3D(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr bits)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage3D<T9>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, T9[] bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage3D<T9>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, T9[,] bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage3D<T9>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, T9[,,] bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureImage3D<T9>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, ref T9 bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                        bits = (T9)bits_ptr.Target;
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage1D(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage1D<T7>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T7[] bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage1D<T7>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T7[,] bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage1D<T7>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T7[,,] bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage1D<T7>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, ref T7 bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                        bits = (T7)bits_ptr.Target;
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage1D(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage1D<T7>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T7[] bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage1D<T7>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T7[,] bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage1D<T7>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T7[,,] bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage1D<T7>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, ref T7 bits)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                        bits = (T7)bits_ptr.Target;
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage2D(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage2D<T9>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T9[] bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage2D<T9>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T9[,] bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage2D<T9>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T9[,,] bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage2D<T9>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, ref T9 bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                        bits = (T9)bits_ptr.Target;
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage2D(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage2D<T9>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T9[] bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage2D<T9>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T9[,] bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage2D<T9>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T9[,,] bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage2D<T9>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, ref T9 bits)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                        bits = (T9)bits_ptr.Target;
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage3D(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage3D<T11>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T11[] bits)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage3D<T11>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T11[,] bits)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage3D<T11>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T11[,,] bits)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage3D<T11>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, ref T11 bits)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                        bits = (T11)bits_ptr.Target;
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage3D(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, IntPtr bits)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage3D<T11>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T11[] bits)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage3D<T11>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T11[,] bits)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage3D<T11>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, T11[,,] bits)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTextureSubImage3D<T11>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Int32 imageSize, ref T11 bits)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle bits_ptr = GCHandle.Alloc(bits, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTextureSubImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Int32)imageSize, (IntPtr)bits_ptr.AddrOfPinnedObject());
                        bits = (T11)bits_ptr.Target;
                    }
                    finally
                    {
                        bits_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ConvolutionFilter1D(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr image)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glConvolutionFilter1DEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ConvolutionFilter1D<T5>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[] image)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glConvolutionFilter1DEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        image_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ConvolutionFilter1D<T5>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[,] image)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glConvolutionFilter1DEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        image_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ConvolutionFilter1D<T5>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[,,] image)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glConvolutionFilter1DEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        image_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ConvolutionFilter1D<T5>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T5 image)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glConvolutionFilter1DEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                        image = (T5)image_ptr.Target;
                    }
                    finally
                    {
                        image_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ConvolutionFilter2D(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr image)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glConvolutionFilter2DEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ConvolutionFilter2D<T6>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T6[] image)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glConvolutionFilter2DEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        image_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ConvolutionFilter2D<T6>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T6[,] image)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glConvolutionFilter2DEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        image_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ConvolutionFilter2D<T6>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T6[,,] image)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glConvolutionFilter2DEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        image_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ConvolutionFilter2D<T6>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T6 image)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glConvolutionFilter2DEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                        image = (T6)image_ptr.Target;
                    }
                    finally
                    {
                        image_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ConvolutionParameter(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.ExtConvolution pname, Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glConvolutionParameterfEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.ExtConvolution)pname, (Single)@params);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ConvolutionParameter(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.ExtConvolution pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glConvolutionParameterfvEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.ExtConvolution)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ConvolutionParameter(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.ExtConvolution pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glConvolutionParameterfvEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.ExtConvolution)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ConvolutionParameter(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.ExtConvolution pname, Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glConvolutionParameteriEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.ExtConvolution)pname, (Int32)@params);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ConvolutionParameter(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.ExtConvolution pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glConvolutionParameterivEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.ExtConvolution)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ConvolutionParameter(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.ExtConvolution pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glConvolutionParameterivEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.ExtConvolution)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyColorSubTable(Chela.Graphics.GL2.ColorTableTarget target, Int32 start, Int32 x, Int32 y, Int32 width)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyColorSubTableEXT((Chela.Graphics.GL2.ColorTableTarget)target, (Int32)start, (Int32)x, (Int32)y, (Int32)width);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyConvolutionFilter1D(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyConvolutionFilter1DEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyConvolutionFilter2D(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyConvolutionFilter2DEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyMultiTexImage1D(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyMultiTexImage1DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyMultiTexImage2D(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyMultiTexImage2DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyMultiTexSubImage1D(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyMultiTexSubImage1DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyMultiTexSubImage2D(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyMultiTexSubImage2DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyMultiTexSubImage3D(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyMultiTexSubImage3DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyTexImage1D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyTexImage1DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyTexImage2D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyTexImage2DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyTexSubImage1D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyTexSubImage1DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyTexSubImage2D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyTexSubImage2DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyTexSubImage3D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyTexSubImage3DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyTextureImage1D(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyTextureImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyTextureImage1D(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 x, Int32 y, Int32 width, Int32 border)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyTextureImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)border);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyTextureImage2D(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyTextureImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyTextureImage2D(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyTextureImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyTextureSubImage1D(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyTextureSubImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyTextureSubImage1D(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 x, Int32 y, Int32 width)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyTextureSubImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)x, (Int32)y, (Int32)width);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyTextureSubImage2D(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyTextureSubImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyTextureSubImage2D(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyTextureSubImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyTextureSubImage3D(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyTextureSubImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyTextureSubImage3D(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyTextureSubImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CullParameter(Chela.Graphics.GL2.ExtCullVertex pname, Double[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glCullParameterdvEXT((Chela.Graphics.GL2.ExtCullVertex)pname, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CullParameter(Chela.Graphics.GL2.ExtCullVertex pname, out Double @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glCullParameterdvEXT((Chela.Graphics.GL2.ExtCullVertex)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void CullParameter(Chela.Graphics.GL2.ExtCullVertex pname, Double* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glCullParameterdvEXT((Chela.Graphics.GL2.ExtCullVertex)pname, (Double*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void CullParameter(Chela.Graphics.GL2.ExtCullVertex pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glCullParameterfvEXT((Chela.Graphics.GL2.ExtCullVertex)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CullParameter(Chela.Graphics.GL2.ExtCullVertex pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glCullParameterfvEXT((Chela.Graphics.GL2.ExtCullVertex)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void CullParameter(Chela.Graphics.GL2.ExtCullVertex pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glCullParameterfvEXT((Chela.Graphics.GL2.ExtCullVertex)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteFramebuffers(Int32 n, Int32[] framebuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* framebuffers_ptr = framebuffers)
                    {
                        Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteFramebuffers(Int32 n, ref Int32 framebuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* framebuffers_ptr = &framebuffers)
                    {
                        Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteFramebuffers(Int32 n, Int32* framebuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteFramebuffers(Int32 n, UInt32[] framebuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* framebuffers_ptr = framebuffers)
                    {
                        Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteFramebuffers(Int32 n, ref UInt32 framebuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* framebuffers_ptr = &framebuffers)
                    {
                        Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteFramebuffers(Int32 n, UInt32* framebuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteFramebuffersEXT((Int32)n, (UInt32*)framebuffers);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteRenderbuffers(Int32 n, Int32[] renderbuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* renderbuffers_ptr = renderbuffers)
                    {
                        Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteRenderbuffers(Int32 n, ref Int32 renderbuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* renderbuffers_ptr = &renderbuffers)
                    {
                        Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteRenderbuffers(Int32 n, Int32* renderbuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteRenderbuffers(Int32 n, UInt32[] renderbuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* renderbuffers_ptr = renderbuffers)
                    {
                        Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteRenderbuffers(Int32 n, ref UInt32 renderbuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* renderbuffers_ptr = &renderbuffers)
                    {
                        Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteRenderbuffers(Int32 n, UInt32* renderbuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteTextures(Int32 n, Int32[] textures)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* textures_ptr = textures)
                    {
                        Delegates.glDeleteTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteTextures(Int32 n, ref Int32 textures)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* textures_ptr = &textures)
                    {
                        Delegates.glDeleteTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteTextures(Int32 n, Int32* textures)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteTexturesEXT((Int32)n, (UInt32*)textures);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteTextures(Int32 n, UInt32[] textures)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* textures_ptr = textures)
                    {
                        Delegates.glDeleteTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteTextures(Int32 n, ref UInt32 textures)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* textures_ptr = &textures)
                    {
                        Delegates.glDeleteTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteTextures(Int32 n, UInt32* textures)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteTexturesEXT((Int32)n, (UInt32*)textures);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteVertexShader(Int32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDeleteVertexShaderEXT((UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteVertexShader(UInt32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDeleteVertexShaderEXT((UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DepthBounds(Double zmin, Double zmax)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDepthBoundsEXT((Double)zmin, (Double)zmax);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DisableClientStateIndexed(Chela.Graphics.GL2.EnableCap array, Int32 index)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDisableClientStateIndexedEXT((Chela.Graphics.GL2.EnableCap)array, (UInt32)index);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DisableClientStateIndexed(Chela.Graphics.GL2.EnableCap array, UInt32 index)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDisableClientStateIndexedEXT((Chela.Graphics.GL2.EnableCap)array, (UInt32)index);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DisableIndexed(Chela.Graphics.GL2.ExtDrawBuffers2 target, Int32 index)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDisableIndexedEXT((Chela.Graphics.GL2.ExtDrawBuffers2)target, (UInt32)index);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DisableIndexed(Chela.Graphics.GL2.ExtDrawBuffers2 target, UInt32 index)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDisableIndexedEXT((Chela.Graphics.GL2.ExtDrawBuffers2)target, (UInt32)index);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DisableVariantClientState(Int32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDisableVariantClientStateEXT((UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DisableVariantClientState(UInt32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDisableVariantClientStateEXT((UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawArrays(Chela.Graphics.GL2.BeginMode mode, Int32 first, Int32 count)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDrawArraysEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32)first, (Int32)count);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawArraysInstanced(Chela.Graphics.GL2.BeginMode mode, Int32 start, Int32 count, Int32 primcount)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDrawArraysInstancedEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32)start, (Int32)count, (Int32)primcount);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawElementsInstanced(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices, Int32 primcount)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDrawElementsInstancedEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawElementsInstanced<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[] indices, Int32 primcount)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawElementsInstancedEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawElementsInstanced<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[,] indices, Int32 primcount)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawElementsInstancedEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawElementsInstanced<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[,,] indices, Int32 primcount)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawElementsInstancedEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawElementsInstanced<T3>(Chela.Graphics.GL2.BeginMode mode, Int32 count, Chela.Graphics.GL2.DrawElementsType type, ref T3 indices, Int32 primcount)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawElementsInstancedEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        indices = (T3)indices_ptr.Target;
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawRangeElements(Chela.Graphics.GL2.BeginMode mode, Int32 start, Int32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDrawRangeElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawRangeElements<T5>(Chela.Graphics.GL2.BeginMode mode, Int32 start, Int32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T5[] indices)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawRangeElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawRangeElements<T5>(Chela.Graphics.GL2.BeginMode mode, Int32 start, Int32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T5[,] indices)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawRangeElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawRangeElements<T5>(Chela.Graphics.GL2.BeginMode mode, Int32 start, Int32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T5[,,] indices)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawRangeElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawRangeElements<T5>(Chela.Graphics.GL2.BeginMode mode, Int32 start, Int32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, ref T5 indices)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawRangeElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                        indices = (T5)indices_ptr.Target;
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawRangeElements(Chela.Graphics.GL2.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDrawRangeElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawRangeElements<T5>(Chela.Graphics.GL2.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T5[] indices)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawRangeElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawRangeElements<T5>(Chela.Graphics.GL2.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T5[,] indices)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawRangeElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawRangeElements<T5>(Chela.Graphics.GL2.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, T5[,,] indices)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawRangeElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawRangeElements<T5>(Chela.Graphics.GL2.BeginMode mode, UInt32 start, UInt32 end, Int32 count, Chela.Graphics.GL2.DrawElementsType type, ref T5 indices)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glDrawRangeElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (UInt32)start, (UInt32)end, (Int32)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                        indices = (T5)indices_ptr.Target;
                    }
                    finally
                    {
                        indices_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EdgeFlagPointer(Int32 stride, Int32 count, bool[] pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (bool* pointer_ptr = pointer)
                    {
                        Delegates.glEdgeFlagPointerEXT((Int32)stride, (Int32)count, (bool*)pointer_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EdgeFlagPointer(Int32 stride, Int32 count, ref bool pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (bool* pointer_ptr = &pointer)
                    {
                        Delegates.glEdgeFlagPointerEXT((Int32)stride, (Int32)count, (bool*)pointer_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void EdgeFlagPointer(Int32 stride, Int32 count, bool* pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glEdgeFlagPointerEXT((Int32)stride, (Int32)count, (bool*)pointer);
                #if DEBUG
                }
                #endif
            }

            public static 
            void EnableClientStateIndexed(Chela.Graphics.GL2.EnableCap array, Int32 index)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEnableClientStateIndexedEXT((Chela.Graphics.GL2.EnableCap)array, (UInt32)index);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EnableClientStateIndexed(Chela.Graphics.GL2.EnableCap array, UInt32 index)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEnableClientStateIndexedEXT((Chela.Graphics.GL2.EnableCap)array, (UInt32)index);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EnableIndexed(Chela.Graphics.GL2.ExtDrawBuffers2 target, Int32 index)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEnableIndexedEXT((Chela.Graphics.GL2.ExtDrawBuffers2)target, (UInt32)index);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EnableIndexed(Chela.Graphics.GL2.ExtDrawBuffers2 target, UInt32 index)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEnableIndexedEXT((Chela.Graphics.GL2.ExtDrawBuffers2)target, (UInt32)index);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EnableVariantClientState(Int32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEnableVariantClientStateEXT((UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EnableVariantClientState(UInt32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEnableVariantClientStateEXT((UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EndTransformFeedback()
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEndTransformFeedbackEXT();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EndVertexShader()
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEndVertexShaderEXT();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ExtractComponent(Int32 res, Int32 src, Int32 num)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glExtractComponentEXT((UInt32)res, (UInt32)src, (UInt32)num);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ExtractComponent(UInt32 res, UInt32 src, UInt32 num)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glExtractComponentEXT((UInt32)res, (UInt32)src, (UInt32)num);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FogCoord(Double coord)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFogCoorddEXT((Double)coord);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void FogCoord(Double* coord)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glFogCoorddvEXT((Double*)coord);
                #if DEBUG
                }
                #endif
            }

            public static 
            void FogCoord(Single coord)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFogCoordfEXT((Single)coord);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void FogCoord(Single* coord)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glFogCoordfvEXT((Single*)coord);
                #if DEBUG
                }
                #endif
            }

            public static 
            void FogCoordPointer(Chela.Graphics.GL2.ExtFogCoord type, Int32 stride, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFogCoordPointerEXT((Chela.Graphics.GL2.ExtFogCoord)type, (Int32)stride, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FogCoordPointer<T2>(Chela.Graphics.GL2.ExtFogCoord type, Int32 stride, T2[] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glFogCoordPointerEXT((Chela.Graphics.GL2.ExtFogCoord)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FogCoordPointer<T2>(Chela.Graphics.GL2.ExtFogCoord type, Int32 stride, T2[,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glFogCoordPointerEXT((Chela.Graphics.GL2.ExtFogCoord)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FogCoordPointer<T2>(Chela.Graphics.GL2.ExtFogCoord type, Int32 stride, T2[,,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glFogCoordPointerEXT((Chela.Graphics.GL2.ExtFogCoord)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FogCoordPointer<T2>(Chela.Graphics.GL2.ExtFogCoord type, Int32 stride, ref T2 pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glFogCoordPointerEXT((Chela.Graphics.GL2.ExtFogCoord)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T2)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferDrawBuffer(Int32 framebuffer, Chela.Graphics.GL2.DrawBufferMode mode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferDrawBufferEXT((UInt32)framebuffer, (Chela.Graphics.GL2.DrawBufferMode)mode);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferDrawBuffer(UInt32 framebuffer, Chela.Graphics.GL2.DrawBufferMode mode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferDrawBufferEXT((UInt32)framebuffer, (Chela.Graphics.GL2.DrawBufferMode)mode);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferDrawBuffers(Int32 framebuffer, Int32 n, Chela.Graphics.GL2.DrawBufferMode[] bufs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.GL2.DrawBufferMode* bufs_ptr = bufs)
                    {
                        Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (Chela.Graphics.GL2.DrawBufferMode*)bufs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferDrawBuffers(Int32 framebuffer, Int32 n, ref Chela.Graphics.GL2.DrawBufferMode bufs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.GL2.DrawBufferMode* bufs_ptr = &bufs)
                    {
                        Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (Chela.Graphics.GL2.DrawBufferMode*)bufs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void FramebufferDrawBuffers(Int32 framebuffer, Int32 n, Chela.Graphics.GL2.DrawBufferMode* bufs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (Chela.Graphics.GL2.DrawBufferMode*)bufs);
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferDrawBuffers(UInt32 framebuffer, Int32 n, Chela.Graphics.GL2.DrawBufferMode[] bufs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.GL2.DrawBufferMode* bufs_ptr = bufs)
                    {
                        Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (Chela.Graphics.GL2.DrawBufferMode*)bufs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferDrawBuffers(UInt32 framebuffer, Int32 n, ref Chela.Graphics.GL2.DrawBufferMode bufs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.GL2.DrawBufferMode* bufs_ptr = &bufs)
                    {
                        Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (Chela.Graphics.GL2.DrawBufferMode*)bufs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void FramebufferDrawBuffers(UInt32 framebuffer, Int32 n, Chela.Graphics.GL2.DrawBufferMode* bufs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glFramebufferDrawBuffersEXT((UInt32)framebuffer, (Int32)n, (Chela.Graphics.GL2.DrawBufferMode*)bufs);
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferReadBuffer(Int32 framebuffer, Chela.Graphics.GL2.ReadBufferMode mode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferReadBufferEXT((UInt32)framebuffer, (Chela.Graphics.GL2.ReadBufferMode)mode);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferReadBuffer(UInt32 framebuffer, Chela.Graphics.GL2.ReadBufferMode mode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferReadBufferEXT((UInt32)framebuffer, (Chela.Graphics.GL2.ReadBufferMode)mode);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferRenderbuffer(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.RenderbufferTarget renderbuffertarget, Int32 renderbuffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferRenderbufferEXT((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferRenderbuffer(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.RenderbufferTarget renderbuffertarget, UInt32 renderbuffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferRenderbufferEXT((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferTexture1D(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.TextureTarget textarget, Int32 texture, Int32 level)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferTexture1DEXT((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.TextureTarget)textarget, (UInt32)texture, (Int32)level);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferTexture1D(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.TextureTarget textarget, UInt32 texture, Int32 level)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferTexture1DEXT((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.TextureTarget)textarget, (UInt32)texture, (Int32)level);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferTexture2D(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.TextureTarget textarget, Int32 texture, Int32 level)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferTexture2DEXT((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.TextureTarget)textarget, (UInt32)texture, (Int32)level);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferTexture2D(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.TextureTarget textarget, UInt32 texture, Int32 level)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferTexture2DEXT((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.TextureTarget)textarget, (UInt32)texture, (Int32)level);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferTexture3D(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.TextureTarget textarget, Int32 texture, Int32 level, Int32 zoffset)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferTexture3DEXT((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferTexture3D(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.TextureTarget textarget, UInt32 texture, Int32 level, Int32 zoffset)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferTexture3DEXT((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferTexture(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Int32 texture, Int32 level)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferTextureEXT((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferTexture(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, UInt32 texture, Int32 level)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferTextureEXT((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferTextureFace(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Int32 texture, Int32 level, Chela.Graphics.GL2.TextureTarget face)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferTextureFaceEXT((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Chela.Graphics.GL2.TextureTarget)face);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferTextureFace(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, UInt32 texture, Int32 level, Chela.Graphics.GL2.TextureTarget face)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferTextureFaceEXT((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Chela.Graphics.GL2.TextureTarget)face);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferTextureLayer(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Int32 texture, Int32 level, Int32 layer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferTextureLayerEXT((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferTextureLayer(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, UInt32 texture, Int32 level, Int32 layer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferTextureLayerEXT((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenerateMipmap(Chela.Graphics.GL2.GenerateMipmapTarget target)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGenerateMipmapEXT((Chela.Graphics.GL2.GenerateMipmapTarget)target);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenerateMultiTexMipmap(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGenerateMultiTexMipmapEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenerateTextureMipmap(Int32 texture, Chela.Graphics.GL2.TextureTarget target)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGenerateTextureMipmapEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenerateTextureMipmap(UInt32 texture, Chela.Graphics.GL2.TextureTarget target)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGenerateTextureMipmapEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenFramebuffers(Int32 n, Int32[] framebuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* framebuffers_ptr = framebuffers)
                    {
                        Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenFramebuffers(Int32 n, out Int32 framebuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* framebuffers_ptr = &framebuffers)
                    {
                        Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                        framebuffers = *framebuffers_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenFramebuffers(Int32 n, Int32* framebuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenFramebuffers(Int32 n, UInt32[] framebuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* framebuffers_ptr = framebuffers)
                    {
                        Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenFramebuffers(Int32 n, out UInt32 framebuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* framebuffers_ptr = &framebuffers)
                    {
                        Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers_ptr);
                        framebuffers = *framebuffers_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenFramebuffers(Int32 n, UInt32* framebuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenFramebuffersEXT((Int32)n, (UInt32*)framebuffers);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenRenderbuffers(Int32 n, Int32[] renderbuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* renderbuffers_ptr = renderbuffers)
                    {
                        Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenRenderbuffers(Int32 n, out Int32 renderbuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* renderbuffers_ptr = &renderbuffers)
                    {
                        Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                        renderbuffers = *renderbuffers_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenRenderbuffers(Int32 n, Int32* renderbuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenRenderbuffers(Int32 n, UInt32[] renderbuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* renderbuffers_ptr = renderbuffers)
                    {
                        Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenRenderbuffers(Int32 n, out UInt32 renderbuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* renderbuffers_ptr = &renderbuffers)
                    {
                        Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers_ptr);
                        renderbuffers = *renderbuffers_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenRenderbuffers(Int32 n, UInt32* renderbuffers)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenRenderbuffersEXT((Int32)n, (UInt32*)renderbuffers);
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 GenSymbol(Chela.Graphics.GL2.ExtVertexShader datatype, Chela.Graphics.GL2.ExtVertexShader storagetype, Chela.Graphics.GL2.ExtVertexShader range, Int32 components)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glGenSymbolsEXT((Chela.Graphics.GL2.ExtVertexShader)datatype, (Chela.Graphics.GL2.ExtVertexShader)storagetype, (Chela.Graphics.GL2.ExtVertexShader)range, (UInt32)components);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 GenSymbol(Chela.Graphics.GL2.ExtVertexShader datatype, Chela.Graphics.GL2.ExtVertexShader storagetype, Chela.Graphics.GL2.ExtVertexShader range, UInt32 components)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glGenSymbolsEXT((Chela.Graphics.GL2.ExtVertexShader)datatype, (Chela.Graphics.GL2.ExtVertexShader)storagetype, (Chela.Graphics.GL2.ExtVertexShader)range, (UInt32)components);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenTextures(Int32 n, Int32[] textures)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* textures_ptr = textures)
                    {
                        Delegates.glGenTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenTextures(Int32 n, out Int32 textures)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* textures_ptr = &textures)
                    {
                        Delegates.glGenTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                        textures = *textures_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenTextures(Int32 n, Int32* textures)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenTexturesEXT((Int32)n, (UInt32*)textures);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenTextures(Int32 n, UInt32[] textures)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* textures_ptr = textures)
                    {
                        Delegates.glGenTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenTextures(Int32 n, out UInt32 textures)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* textures_ptr = &textures)
                    {
                        Delegates.glGenTexturesEXT((Int32)n, (UInt32*)textures_ptr);
                        textures = *textures_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenTextures(Int32 n, UInt32* textures)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenTexturesEXT((Int32)n, (UInt32*)textures);
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 GenVertexShaders(Int32 range)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glGenVertexShadersEXT((UInt32)range);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 GenVertexShaders(UInt32 range)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glGenVertexShadersEXT((UInt32)range);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetBooleanIndexed(Chela.Graphics.GL2.ExtDrawBuffers2 target, Int32 index, bool[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetBooleanIndexedvEXT((Chela.Graphics.GL2.ExtDrawBuffers2)target, (UInt32)index, (bool*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetBooleanIndexed(Chela.Graphics.GL2.ExtDrawBuffers2 target, Int32 index, out bool data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetBooleanIndexedvEXT((Chela.Graphics.GL2.ExtDrawBuffers2)target, (UInt32)index, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetBooleanIndexed(Chela.Graphics.GL2.ExtDrawBuffers2 target, Int32 index, bool* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetBooleanIndexedvEXT((Chela.Graphics.GL2.ExtDrawBuffers2)target, (UInt32)index, (bool*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetBooleanIndexed(Chela.Graphics.GL2.ExtDrawBuffers2 target, UInt32 index, bool[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetBooleanIndexedvEXT((Chela.Graphics.GL2.ExtDrawBuffers2)target, (UInt32)index, (bool*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetBooleanIndexed(Chela.Graphics.GL2.ExtDrawBuffers2 target, UInt32 index, out bool data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetBooleanIndexedvEXT((Chela.Graphics.GL2.ExtDrawBuffers2)target, (UInt32)index, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetBooleanIndexed(Chela.Graphics.GL2.ExtDrawBuffers2 target, UInt32 index, bool* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetBooleanIndexedvEXT((Chela.Graphics.GL2.ExtDrawBuffers2)target, (UInt32)index, (bool*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetColorTable(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetColorTableEXT((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetColorTable<T3>(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T3[] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetColorTableEXT((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetColorTable<T3>(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T3[,] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetColorTableEXT((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetColorTable<T3>(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T3[,,] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetColorTableEXT((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetColorTable<T3>(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T3 data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetColorTableEXT((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T3)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetColorTableParameter(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.GetColorTableParameterPName pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetColorTableParameterfvEXT((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.GetColorTableParameterPName)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetColorTableParameter(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.GetColorTableParameterPName pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetColorTableParameterfvEXT((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.GetColorTableParameterPName)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetColorTableParameter(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.GetColorTableParameterPName pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetColorTableParameterfvEXT((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.GetColorTableParameterPName)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetColorTableParameter(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.GetColorTableParameterPName pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetColorTableParameterivEXT((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.GetColorTableParameterPName)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetColorTableParameter(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.GetColorTableParameterPName pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetColorTableParameterivEXT((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.GetColorTableParameterPName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetColorTableParameter(Chela.Graphics.GL2.ColorTableTarget target, Chela.Graphics.GL2.GetColorTableParameterPName pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetColorTableParameterivEXT((Chela.Graphics.GL2.ColorTableTarget)target, (Chela.Graphics.GL2.GetColorTableParameterPName)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCompressedMultiTexImage(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 lod, IntPtr img)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetCompressedMultiTexImageEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)lod, (IntPtr)img);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCompressedMultiTexImage<T3>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 lod, T3[] img)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetCompressedMultiTexImageEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        img_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCompressedMultiTexImage<T3>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 lod, T3[,] img)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetCompressedMultiTexImageEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        img_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCompressedMultiTexImage<T3>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 lod, T3[,,] img)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetCompressedMultiTexImageEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        img_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCompressedMultiTexImage<T3>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 lod, ref T3 img)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetCompressedMultiTexImageEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                        img = (T3)img_ptr.Target;
                    }
                    finally
                    {
                        img_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCompressedTextureImage(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 lod, IntPtr img)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)lod, (IntPtr)img);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCompressedTextureImage<T3>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 lod, T3[] img)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        img_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCompressedTextureImage<T3>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 lod, T3[,] img)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        img_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCompressedTextureImage<T3>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 lod, T3[,,] img)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        img_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCompressedTextureImage<T3>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 lod, ref T3 img)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                        img = (T3)img_ptr.Target;
                    }
                    finally
                    {
                        img_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCompressedTextureImage(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 lod, IntPtr img)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)lod, (IntPtr)img);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCompressedTextureImage<T3>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 lod, T3[] img)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        img_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCompressedTextureImage<T3>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 lod, T3[,] img)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        img_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCompressedTextureImage<T3>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 lod, T3[,,] img)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        img_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCompressedTextureImage<T3>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 lod, ref T3 img)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle img_ptr = GCHandle.Alloc(img, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetCompressedTextureImageEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)lod, (IntPtr)img_ptr.AddrOfPinnedObject());
                        img = (T3)img_ptr.Target;
                    }
                    finally
                    {
                        img_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetConvolutionFilter(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr image)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetConvolutionFilterEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetConvolutionFilter<T3>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T3[] image)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetConvolutionFilterEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        image_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetConvolutionFilter<T3>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T3[,] image)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetConvolutionFilterEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        image_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetConvolutionFilter<T3>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T3[,,] image)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetConvolutionFilterEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        image_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetConvolutionFilter<T3>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T3 image)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle image_ptr = GCHandle.Alloc(image, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetConvolutionFilterEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)image_ptr.AddrOfPinnedObject());
                        image = (T3)image_ptr.Target;
                    }
                    finally
                    {
                        image_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetConvolutionParameter(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.ExtConvolution pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetConvolutionParameterfvEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.ExtConvolution)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetConvolutionParameter(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.ExtConvolution pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetConvolutionParameterfvEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.ExtConvolution)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetConvolutionParameter(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.ExtConvolution pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetConvolutionParameterfvEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.ExtConvolution)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetConvolutionParameter(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.ExtConvolution pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetConvolutionParameterivEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.ExtConvolution)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetConvolutionParameter(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.ExtConvolution pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetConvolutionParameterivEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.ExtConvolution)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetConvolutionParameter(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.ExtConvolution pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetConvolutionParameterivEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.ExtConvolution)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetDoubleIndexed(Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Double[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* data_ptr = data)
                    {
                        Delegates.glGetDoubleIndexedvEXT((Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Double*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetDoubleIndexed(Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, out Double data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* data_ptr = &data)
                    {
                        Delegates.glGetDoubleIndexedvEXT((Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Double*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetDoubleIndexed(Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Double* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetDoubleIndexedvEXT((Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Double*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetDoubleIndexed(Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Double[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* data_ptr = data)
                    {
                        Delegates.glGetDoubleIndexedvEXT((Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Double*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetDoubleIndexed(Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, out Double data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* data_ptr = &data)
                    {
                        Delegates.glGetDoubleIndexedvEXT((Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Double*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetDoubleIndexed(Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Double* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetDoubleIndexedvEXT((Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Double*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFloatIndexed(Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Single[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetFloatIndexedvEXT((Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Single*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFloatIndexed(Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, out Single data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetFloatIndexedvEXT((Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetFloatIndexed(Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Single* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetFloatIndexedvEXT((Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Single*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFloatIndexed(Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Single[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetFloatIndexedvEXT((Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Single*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFloatIndexed(Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, out Single data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetFloatIndexedvEXT((Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetFloatIndexed(Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Single* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetFloatIndexedvEXT((Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Single*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 GetFragDataLocation(Int32 program, String name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        return Delegates.glGetFragDataLocationEXT((UInt32)program, name_ptr.Address);
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 GetFragDataLocation(UInt32 program, String name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        return Delegates.glGetFragDataLocationEXT((UInt32)program, name_ptr.Address);
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFramebufferAttachmentParameter(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.FramebufferParameterName pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFramebufferAttachmentParameterivEXT((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.FramebufferParameterName)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFramebufferAttachmentParameter(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.FramebufferParameterName pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFramebufferAttachmentParameterivEXT((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.FramebufferParameterName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetFramebufferAttachmentParameter(Chela.Graphics.GL2.FramebufferTarget target, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.FramebufferParameterName pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetFramebufferAttachmentParameterivEXT((Chela.Graphics.GL2.FramebufferTarget)target, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.FramebufferParameterName)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFramebufferParameter(Int32 framebuffer, Chela.Graphics.GL2.ExtDirectStateAccess pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFramebufferParameter(Int32 framebuffer, Chela.Graphics.GL2.ExtDirectStateAccess pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetFramebufferParameter(Int32 framebuffer, Chela.Graphics.GL2.ExtDirectStateAccess pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFramebufferParameter(UInt32 framebuffer, Chela.Graphics.GL2.ExtDirectStateAccess pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFramebufferParameter(UInt32 framebuffer, Chela.Graphics.GL2.ExtDirectStateAccess pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetFramebufferParameter(UInt32 framebuffer, Chela.Graphics.GL2.ExtDirectStateAccess pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetFramebufferParameterivEXT((UInt32)framebuffer, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetHistogram(Chela.Graphics.GL2.ExtHistogram target, bool reset, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr values)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetHistogramEXT((Chela.Graphics.GL2.ExtHistogram)target, (bool)reset, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)values);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetHistogram<T4>(Chela.Graphics.GL2.ExtHistogram target, bool reset, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T4[] values)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetHistogramEXT((Chela.Graphics.GL2.ExtHistogram)target, (bool)reset, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        values_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetHistogram<T4>(Chela.Graphics.GL2.ExtHistogram target, bool reset, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T4[,] values)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetHistogramEXT((Chela.Graphics.GL2.ExtHistogram)target, (bool)reset, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        values_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetHistogram<T4>(Chela.Graphics.GL2.ExtHistogram target, bool reset, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T4[,,] values)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetHistogramEXT((Chela.Graphics.GL2.ExtHistogram)target, (bool)reset, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        values_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetHistogram<T4>(Chela.Graphics.GL2.ExtHistogram target, bool reset, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T4 values)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetHistogramEXT((Chela.Graphics.GL2.ExtHistogram)target, (bool)reset, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                        values = (T4)values_ptr.Target;
                    }
                    finally
                    {
                        values_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetHistogramParameter(Chela.Graphics.GL2.ExtHistogram target, Chela.Graphics.GL2.ExtHistogram pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetHistogramParameterfvEXT((Chela.Graphics.GL2.ExtHistogram)target, (Chela.Graphics.GL2.ExtHistogram)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetHistogramParameter(Chela.Graphics.GL2.ExtHistogram target, Chela.Graphics.GL2.ExtHistogram pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetHistogramParameterfvEXT((Chela.Graphics.GL2.ExtHistogram)target, (Chela.Graphics.GL2.ExtHistogram)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetHistogramParameter(Chela.Graphics.GL2.ExtHistogram target, Chela.Graphics.GL2.ExtHistogram pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetHistogramParameterfvEXT((Chela.Graphics.GL2.ExtHistogram)target, (Chela.Graphics.GL2.ExtHistogram)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetHistogramParameter(Chela.Graphics.GL2.ExtHistogram target, Chela.Graphics.GL2.ExtHistogram pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetHistogramParameterivEXT((Chela.Graphics.GL2.ExtHistogram)target, (Chela.Graphics.GL2.ExtHistogram)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetHistogramParameter(Chela.Graphics.GL2.ExtHistogram target, Chela.Graphics.GL2.ExtHistogram pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetHistogramParameterivEXT((Chela.Graphics.GL2.ExtHistogram)target, (Chela.Graphics.GL2.ExtHistogram)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetHistogramParameter(Chela.Graphics.GL2.ExtHistogram target, Chela.Graphics.GL2.ExtHistogram pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetHistogramParameterivEXT((Chela.Graphics.GL2.ExtHistogram)target, (Chela.Graphics.GL2.ExtHistogram)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetIntegerIndexed(Chela.Graphics.GL2.ExtDrawBuffers2 target, Int32 index, Int32[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetIntegerIndexedvEXT((Chela.Graphics.GL2.ExtDrawBuffers2)target, (UInt32)index, (Int32*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetIntegerIndexed(Chela.Graphics.GL2.ExtDrawBuffers2 target, Int32 index, out Int32 data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetIntegerIndexedvEXT((Chela.Graphics.GL2.ExtDrawBuffers2)target, (UInt32)index, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetIntegerIndexed(Chela.Graphics.GL2.ExtDrawBuffers2 target, Int32 index, Int32* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetIntegerIndexedvEXT((Chela.Graphics.GL2.ExtDrawBuffers2)target, (UInt32)index, (Int32*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetIntegerIndexed(Chela.Graphics.GL2.ExtDrawBuffers2 target, UInt32 index, Int32[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetIntegerIndexedvEXT((Chela.Graphics.GL2.ExtDrawBuffers2)target, (UInt32)index, (Int32*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetIntegerIndexed(Chela.Graphics.GL2.ExtDrawBuffers2 target, UInt32 index, out Int32 data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetIntegerIndexedvEXT((Chela.Graphics.GL2.ExtDrawBuffers2)target, (UInt32)index, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetIntegerIndexed(Chela.Graphics.GL2.ExtDrawBuffers2 target, UInt32 index, Int32* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetIntegerIndexedvEXT((Chela.Graphics.GL2.ExtDrawBuffers2)target, (UInt32)index, (Int32*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetInvariantBoolean(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, bool[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetInvariantBooleanvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (bool*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetInvariantBoolean(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, out bool data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetInvariantBooleanvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetInvariantBoolean(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, bool* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetInvariantBooleanvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (bool*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetInvariantBoolean(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, bool[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetInvariantBooleanvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (bool*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetInvariantBoolean(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, out bool data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetInvariantBooleanvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetInvariantBoolean(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, bool* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetInvariantBooleanvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (bool*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetInvariantFloat(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, Single[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetInvariantFloatvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Single*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetInvariantFloat(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, out Single data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetInvariantFloatvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetInvariantFloat(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, Single* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetInvariantFloatvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Single*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetInvariantFloat(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, Single[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetInvariantFloatvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Single*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetInvariantFloat(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, out Single data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetInvariantFloatvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetInvariantFloat(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, Single* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetInvariantFloatvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Single*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetInvariantInteger(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, Int32[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetInvariantIntegervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Int32*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetInvariantInteger(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, out Int32 data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetInvariantIntegervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetInvariantInteger(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, Int32* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetInvariantIntegervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Int32*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetInvariantInteger(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, Int32[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetInvariantIntegervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Int32*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetInvariantInteger(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, out Int32 data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetInvariantIntegervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetInvariantInteger(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, Int32* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetInvariantIntegervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Int32*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetLocalConstantBoolean(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, bool[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (bool*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetLocalConstantBoolean(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, out bool data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetLocalConstantBoolean(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, bool* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (bool*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetLocalConstantBoolean(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, bool[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (bool*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetLocalConstantBoolean(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, out bool data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetLocalConstantBoolean(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, bool* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetLocalConstantBooleanvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (bool*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetLocalConstantFloat(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, Single[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Single*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetLocalConstantFloat(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, out Single data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetLocalConstantFloat(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, Single* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Single*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetLocalConstantFloat(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, Single[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Single*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetLocalConstantFloat(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, out Single data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetLocalConstantFloat(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, Single* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetLocalConstantFloatvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Single*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetLocalConstantInteger(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, Int32[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Int32*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetLocalConstantInteger(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, out Int32 data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetLocalConstantInteger(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, Int32* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Int32*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetLocalConstantInteger(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, Int32[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Int32*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetLocalConstantInteger(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, out Int32 data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetLocalConstantInteger(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, Int32* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetLocalConstantIntegervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Int32*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMinmax(Chela.Graphics.GL2.ExtHistogram target, bool reset, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr values)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetMinmaxEXT((Chela.Graphics.GL2.ExtHistogram)target, (bool)reset, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)values);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMinmax<T4>(Chela.Graphics.GL2.ExtHistogram target, bool reset, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T4[] values)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetMinmaxEXT((Chela.Graphics.GL2.ExtHistogram)target, (bool)reset, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        values_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMinmax<T4>(Chela.Graphics.GL2.ExtHistogram target, bool reset, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T4[,] values)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetMinmaxEXT((Chela.Graphics.GL2.ExtHistogram)target, (bool)reset, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        values_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMinmax<T4>(Chela.Graphics.GL2.ExtHistogram target, bool reset, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T4[,,] values)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetMinmaxEXT((Chela.Graphics.GL2.ExtHistogram)target, (bool)reset, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        values_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMinmax<T4>(Chela.Graphics.GL2.ExtHistogram target, bool reset, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T4 values)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle values_ptr = GCHandle.Alloc(values, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetMinmaxEXT((Chela.Graphics.GL2.ExtHistogram)target, (bool)reset, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)values_ptr.AddrOfPinnedObject());
                        values = (T4)values_ptr.Target;
                    }
                    finally
                    {
                        values_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMinmaxParameter(Chela.Graphics.GL2.ExtHistogram target, Chela.Graphics.GL2.ExtHistogram pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMinmaxParameterfvEXT((Chela.Graphics.GL2.ExtHistogram)target, (Chela.Graphics.GL2.ExtHistogram)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMinmaxParameter(Chela.Graphics.GL2.ExtHistogram target, Chela.Graphics.GL2.ExtHistogram pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMinmaxParameterfvEXT((Chela.Graphics.GL2.ExtHistogram)target, (Chela.Graphics.GL2.ExtHistogram)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetMinmaxParameter(Chela.Graphics.GL2.ExtHistogram target, Chela.Graphics.GL2.ExtHistogram pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetMinmaxParameterfvEXT((Chela.Graphics.GL2.ExtHistogram)target, (Chela.Graphics.GL2.ExtHistogram)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMinmaxParameter(Chela.Graphics.GL2.ExtHistogram target, Chela.Graphics.GL2.ExtHistogram pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMinmaxParameterivEXT((Chela.Graphics.GL2.ExtHistogram)target, (Chela.Graphics.GL2.ExtHistogram)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMinmaxParameter(Chela.Graphics.GL2.ExtHistogram target, Chela.Graphics.GL2.ExtHistogram pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMinmaxParameterivEXT((Chela.Graphics.GL2.ExtHistogram)target, (Chela.Graphics.GL2.ExtHistogram)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetMinmaxParameter(Chela.Graphics.GL2.ExtHistogram target, Chela.Graphics.GL2.ExtHistogram pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetMinmaxParameterivEXT((Chela.Graphics.GL2.ExtHistogram)target, (Chela.Graphics.GL2.ExtHistogram)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexEnv(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexEnvfvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexEnv(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexEnvfvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetMultiTexEnv(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetMultiTexEnvfvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexEnv(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexEnvivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexEnv(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexEnvivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetMultiTexEnv(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetMultiTexEnvivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexGen(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Double[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexGendvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexGen(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, out Double @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexGendvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetMultiTexGen(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Double* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetMultiTexGendvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Double*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexGen(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexGenfvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexGen(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexGenfvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetMultiTexGen(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetMultiTexGenfvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexGen(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexGenivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexGen(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexGenivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetMultiTexGen(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetMultiTexGenivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexImage(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetMultiTexImageEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexImage<T5>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[] pixels)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetMultiTexImageEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexImage<T5>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[,] pixels)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetMultiTexImageEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexImage<T5>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[,,] pixels)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetMultiTexImageEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexImage<T5>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T5 pixels)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetMultiTexImageEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T5)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexLevelParameter(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexLevelParameterfvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexLevelParameter(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexLevelParameterfvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetMultiTexLevelParameter(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetMultiTexLevelParameterfvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexLevelParameter(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexLevelParameterivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexLevelParameter(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexLevelParameterivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetMultiTexLevelParameter(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetMultiTexLevelParameterivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexParameter(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexParameterfvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexParameter(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexParameterfvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetMultiTexParameter(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetMultiTexParameterfvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexParameterI(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexParameterIivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexParameterI(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexParameterIivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetMultiTexParameterI(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetMultiTexParameterIivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexParameterI(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, UInt32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexParameterIuivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexParameterI(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, out UInt32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexParameterIuivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetMultiTexParameterI(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, UInt32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetMultiTexParameterIuivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (UInt32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexParameter(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMultiTexParameterivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultiTexParameter(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMultiTexParameterivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetMultiTexParameter(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetMultiTexParameterivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferParameter(Int32 buffer, Chela.Graphics.GL2.ExtDirectStateAccess pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferParameter(Int32 buffer, Chela.Graphics.GL2.ExtDirectStateAccess pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetNamedBufferParameter(Int32 buffer, Chela.Graphics.GL2.ExtDirectStateAccess pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferParameter(UInt32 buffer, Chela.Graphics.GL2.ExtDirectStateAccess pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferParameter(UInt32 buffer, Chela.Graphics.GL2.ExtDirectStateAccess pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetNamedBufferParameter(UInt32 buffer, Chela.Graphics.GL2.ExtDirectStateAccess pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetNamedBufferParameterivEXT((UInt32)buffer, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferPointer(Int32 buffer, Chela.Graphics.GL2.ExtDirectStateAccess pname, IntPtr @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (IntPtr)@params);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferPointer<T2>(Int32 buffer, Chela.Graphics.GL2.ExtDirectStateAccess pname, T2[] @params)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferPointer<T2>(Int32 buffer, Chela.Graphics.GL2.ExtDirectStateAccess pname, T2[,] @params)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferPointer<T2>(Int32 buffer, Chela.Graphics.GL2.ExtDirectStateAccess pname, T2[,,] @params)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferPointer<T2>(Int32 buffer, Chela.Graphics.GL2.ExtDirectStateAccess pname, ref T2 @params)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                        @params = (T2)@params_ptr.Target;
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferPointer(UInt32 buffer, Chela.Graphics.GL2.ExtDirectStateAccess pname, IntPtr @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (IntPtr)@params);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferPointer<T2>(UInt32 buffer, Chela.Graphics.GL2.ExtDirectStateAccess pname, T2[] @params)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferPointer<T2>(UInt32 buffer, Chela.Graphics.GL2.ExtDirectStateAccess pname, T2[,] @params)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferPointer<T2>(UInt32 buffer, Chela.Graphics.GL2.ExtDirectStateAccess pname, T2[,,] @params)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferPointer<T2>(UInt32 buffer, Chela.Graphics.GL2.ExtDirectStateAccess pname, ref T2 @params)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedBufferPointervEXT((UInt32)buffer, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                        @params = (T2)@params_ptr.Target;
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferSubData(Int32 buffer, IntPtr offset, IntPtr size, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, T3[] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, T3[,] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, T3[,,] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, ref T3 data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T3)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferSubData(UInt32 buffer, IntPtr offset, IntPtr size, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, T3[] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, T3[,] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, T3[,,] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, ref T3 data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T3)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedFramebufferAttachmentParameter(Int32 framebuffer, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.ExtDirectStateAccess pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedFramebufferAttachmentParameter(Int32 framebuffer, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.ExtDirectStateAccess pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetNamedFramebufferAttachmentParameter(Int32 framebuffer, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.ExtDirectStateAccess pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedFramebufferAttachmentParameter(UInt32 framebuffer, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.ExtDirectStateAccess pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedFramebufferAttachmentParameter(UInt32 framebuffer, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.ExtDirectStateAccess pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetNamedFramebufferAttachmentParameter(UInt32 framebuffer, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.ExtDirectStateAccess pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetNamedFramebufferAttachmentParameterivEXT((UInt32)framebuffer, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgram(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetNamedProgram(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetNamedProgramivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgram(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetNamedProgram(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetNamedProgramivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramLocalParameter(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Double[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramLocalParameter(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, out Double @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetNamedProgramLocalParameter(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Double* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramLocalParameter(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Double[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramLocalParameter(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, out Double @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetNamedProgramLocalParameter(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Double* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetNamedProgramLocalParameterdvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramLocalParameter(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramLocalParameter(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetNamedProgramLocalParameter(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramLocalParameter(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramLocalParameter(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetNamedProgramLocalParameter(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetNamedProgramLocalParameterfvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramLocalParameterI(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramLocalParameterI(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetNamedProgramLocalParameterI(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramLocalParameterI(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramLocalParameterI(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetNamedProgramLocalParameterI(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetNamedProgramLocalParameterIivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramLocalParameterI(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, UInt32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIuivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramLocalParameterI(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, out UInt32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedProgramLocalParameterIuivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetNamedProgramLocalParameterI(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, UInt32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetNamedProgramLocalParameterIuivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (UInt32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramString(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess pname, IntPtr @string)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetNamedProgramStringEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (IntPtr)@string);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramString<T3>(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess pname, T3[] @string)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedProgramStringEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramString<T3>(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess pname, T3[,] @string)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedProgramStringEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramString<T3>(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess pname, T3[,,] @string)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedProgramStringEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramString<T3>(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess pname, ref T3 @string)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedProgramStringEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                        @string = (T3)@string_ptr.Target;
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramString(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess pname, IntPtr @string)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetNamedProgramStringEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (IntPtr)@string);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramString<T3>(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess pname, T3[] @string)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedProgramStringEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramString<T3>(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess pname, T3[,] @string)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedProgramStringEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramString<T3>(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess pname, T3[,,] @string)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedProgramStringEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedProgramString<T3>(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess pname, ref T3 @string)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetNamedProgramStringEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)pname, (IntPtr)@string_ptr.AddrOfPinnedObject());
                        @string = (T3)@string_ptr.Target;
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedRenderbufferParameter(Int32 renderbuffer, Chela.Graphics.GL2.RenderbufferParameterName pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (Chela.Graphics.GL2.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedRenderbufferParameter(Int32 renderbuffer, Chela.Graphics.GL2.RenderbufferParameterName pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (Chela.Graphics.GL2.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetNamedRenderbufferParameter(Int32 renderbuffer, Chela.Graphics.GL2.RenderbufferParameterName pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (Chela.Graphics.GL2.RenderbufferParameterName)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedRenderbufferParameter(UInt32 renderbuffer, Chela.Graphics.GL2.RenderbufferParameterName pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (Chela.Graphics.GL2.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetNamedRenderbufferParameter(UInt32 renderbuffer, Chela.Graphics.GL2.RenderbufferParameterName pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (Chela.Graphics.GL2.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetNamedRenderbufferParameter(UInt32 renderbuffer, Chela.Graphics.GL2.RenderbufferParameterName pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetNamedRenderbufferParameterivEXT((UInt32)renderbuffer, (Chela.Graphics.GL2.RenderbufferParameterName)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPointerIndexed(Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetPointerIndexedvEXT((Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPointerIndexed<T2>(Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, T2[] data)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPointerIndexedvEXT((Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPointerIndexed<T2>(Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, T2[,] data)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPointerIndexedvEXT((Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPointerIndexed<T2>(Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, T2[,,] data)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPointerIndexedvEXT((Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPointerIndexed<T2>(Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, ref T2 data)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPointerIndexedvEXT((Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T2)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPointerIndexed(Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetPointerIndexedvEXT((Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPointerIndexed<T2>(Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, T2[] data)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPointerIndexedvEXT((Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPointerIndexed<T2>(Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, T2[,] data)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPointerIndexedvEXT((Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPointerIndexed<T2>(Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, T2[,,] data)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPointerIndexedvEXT((Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPointerIndexed<T2>(Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, ref T2 data)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPointerIndexedvEXT((Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T2)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPointer(Chela.Graphics.GL2.GetPointervPName pname, IntPtr @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetPointervEXT((Chela.Graphics.GL2.GetPointervPName)pname, (IntPtr)@params);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPointer<T1>(Chela.Graphics.GL2.GetPointervPName pname, T1[] @params)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPointervEXT((Chela.Graphics.GL2.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPointer<T1>(Chela.Graphics.GL2.GetPointervPName pname, T1[,] @params)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPointervEXT((Chela.Graphics.GL2.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPointer<T1>(Chela.Graphics.GL2.GetPointervPName pname, T1[,,] @params)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPointervEXT((Chela.Graphics.GL2.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPointer<T1>(Chela.Graphics.GL2.GetPointervPName pname, ref T1 @params)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPointervEXT((Chela.Graphics.GL2.GetPointervPName)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                        @params = (T1)@params_ptr.Target;
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetQueryObjecti64(Int32 id, Chela.Graphics.GL2.ExtTimerQuery pname, Int64[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int64* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjecti64vEXT((UInt32)id, (Chela.Graphics.GL2.ExtTimerQuery)pname, (Int64*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetQueryObjecti64(Int32 id, Chela.Graphics.GL2.ExtTimerQuery pname, out Int64 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int64* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjecti64vEXT((UInt32)id, (Chela.Graphics.GL2.ExtTimerQuery)pname, (Int64*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetQueryObjecti64(Int32 id, Chela.Graphics.GL2.ExtTimerQuery pname, Int64* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetQueryObjecti64vEXT((UInt32)id, (Chela.Graphics.GL2.ExtTimerQuery)pname, (Int64*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetQueryObjecti64(UInt32 id, Chela.Graphics.GL2.ExtTimerQuery pname, Int64[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int64* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjecti64vEXT((UInt32)id, (Chela.Graphics.GL2.ExtTimerQuery)pname, (Int64*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetQueryObjecti64(UInt32 id, Chela.Graphics.GL2.ExtTimerQuery pname, out Int64 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int64* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjecti64vEXT((UInt32)id, (Chela.Graphics.GL2.ExtTimerQuery)pname, (Int64*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetQueryObjecti64(UInt32 id, Chela.Graphics.GL2.ExtTimerQuery pname, Int64* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetQueryObjecti64vEXT((UInt32)id, (Chela.Graphics.GL2.ExtTimerQuery)pname, (Int64*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetQueryObjectui64(Int32 id, Chela.Graphics.GL2.ExtTimerQuery pname, Int64[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int64* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectui64vEXT((UInt32)id, (Chela.Graphics.GL2.ExtTimerQuery)pname, (UInt64*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetQueryObjectui64(Int32 id, Chela.Graphics.GL2.ExtTimerQuery pname, out Int64 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int64* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectui64vEXT((UInt32)id, (Chela.Graphics.GL2.ExtTimerQuery)pname, (UInt64*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetQueryObjectui64(Int32 id, Chela.Graphics.GL2.ExtTimerQuery pname, Int64* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetQueryObjectui64vEXT((UInt32)id, (Chela.Graphics.GL2.ExtTimerQuery)pname, (UInt64*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetQueryObjectui64(UInt32 id, Chela.Graphics.GL2.ExtTimerQuery pname, UInt64[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt64* @params_ptr = @params)
                    {
                        Delegates.glGetQueryObjectui64vEXT((UInt32)id, (Chela.Graphics.GL2.ExtTimerQuery)pname, (UInt64*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetQueryObjectui64(UInt32 id, Chela.Graphics.GL2.ExtTimerQuery pname, out UInt64 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt64* @params_ptr = &@params)
                    {
                        Delegates.glGetQueryObjectui64vEXT((UInt32)id, (Chela.Graphics.GL2.ExtTimerQuery)pname, (UInt64*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetQueryObjectui64(UInt32 id, Chela.Graphics.GL2.ExtTimerQuery pname, UInt64* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetQueryObjectui64vEXT((UInt32)id, (Chela.Graphics.GL2.ExtTimerQuery)pname, (UInt64*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetRenderbufferParameter(Chela.Graphics.GL2.RenderbufferTarget target, Chela.Graphics.GL2.RenderbufferParameterName pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetRenderbufferParameterivEXT((Chela.Graphics.GL2.RenderbufferTarget)target, (Chela.Graphics.GL2.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetRenderbufferParameter(Chela.Graphics.GL2.RenderbufferTarget target, Chela.Graphics.GL2.RenderbufferParameterName pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetRenderbufferParameterivEXT((Chela.Graphics.GL2.RenderbufferTarget)target, (Chela.Graphics.GL2.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetRenderbufferParameter(Chela.Graphics.GL2.RenderbufferTarget target, Chela.Graphics.GL2.RenderbufferParameterName pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetRenderbufferParameterivEXT((Chela.Graphics.GL2.RenderbufferTarget)target, (Chela.Graphics.GL2.RenderbufferParameterName)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetSeparableFilter(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, IntPtr column, IntPtr span)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetSeparableFilterEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetSeparableFilter<T5>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, IntPtr column, T5[] span)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetSeparableFilterEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        span_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetSeparableFilter<T5>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, IntPtr column, T5[,] span)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetSeparableFilterEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        span_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetSeparableFilter<T5>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, IntPtr column, T5[,,] span)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetSeparableFilterEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        span_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetSeparableFilter<T5>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, IntPtr column, ref T5 span)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetSeparableFilterEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column, (IntPtr)span_ptr.AddrOfPinnedObject());
                        span = (T5)span_ptr.Target;
                    }
                    finally
                    {
                        span_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetSeparableFilter<T4,T5>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, T4[] column, T5[,,] span)
                where T4 : struct
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                    GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetSeparableFilterEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        column_ptr.Free();
                        span_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetSeparableFilter<T4,T5>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, T4[,] column, T5[,,] span)
                where T4 : struct
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                    GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetSeparableFilterEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        column_ptr.Free();
                        span_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetSeparableFilter<T4,T5>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, T4[,,] column, T5[,,] span)
                where T4 : struct
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                    GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetSeparableFilterEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        column_ptr.Free();
                        span_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetSeparableFilter<T4,T5>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, ref T4 column, T5[,,] span)
                where T4 : struct
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                    GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetSeparableFilterEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                        column = (T4)column_ptr.Target;
                    }
                    finally
                    {
                        column_ptr.Free();
                        span_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetSeparableFilter<T3,T4,T5>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T3[] row, T4[,,] column, T5[,,] span)
                where T3 : struct
                where T4 : struct
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                    GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                    GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetSeparableFilterEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        row_ptr.Free();
                        column_ptr.Free();
                        span_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetSeparableFilter<T3,T4,T5>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T3[,] row, T4[,,] column, T5[,,] span)
                where T3 : struct
                where T4 : struct
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                    GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                    GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetSeparableFilterEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        row_ptr.Free();
                        column_ptr.Free();
                        span_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetSeparableFilter<T3,T4,T5>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T3[,,] row, T4[,,] column, T5[,,] span)
                where T3 : struct
                where T4 : struct
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                    GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                    GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetSeparableFilterEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        row_ptr.Free();
                        column_ptr.Free();
                        span_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetSeparableFilter<T3,T4,T5>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T3 row, T4[,,] column, T5[,,] span)
                where T3 : struct
                where T4 : struct
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                    GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                    GCHandle span_ptr = GCHandle.Alloc(span, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetSeparableFilterEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject(), (IntPtr)span_ptr.AddrOfPinnedObject());
                        row = (T3)row_ptr.Target;
                    }
                    finally
                    {
                        row_ptr.Free();
                        column_ptr.Free();
                        span_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTexParameterIivEXT((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTexParameterIivEXT((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetTexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetTexParameterIivEXT((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, UInt32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetTexParameterIuivEXT((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, out UInt32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetTexParameterIuivEXT((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetTexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, UInt32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetTexParameterIuivEXT((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (UInt32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureImage(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetTextureImageEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureImage<T5>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[] pixels)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetTextureImageEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureImage<T5>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[,] pixels)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetTextureImageEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureImage<T5>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[,,] pixels)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetTextureImageEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureImage<T5>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T5 pixels)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetTextureImageEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T5)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureImage(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetTextureImageEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureImage<T5>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[] pixels)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetTextureImageEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureImage<T5>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[,] pixels)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetTextureImageEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureImage<T5>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[,,] pixels)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetTextureImageEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureImage<T5>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T5 pixels)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetTextureImageEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T5)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureLevelParameter(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureLevelParameter(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetTextureLevelParameter(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureLevelParameter(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureLevelParameter(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetTextureLevelParameter(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetTextureLevelParameterfvEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureLevelParameter(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureLevelParameter(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetTextureLevelParameter(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureLevelParameter(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureLevelParameter(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetTextureLevelParameter(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.GetTextureParameter pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetTextureLevelParameterivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureParameter(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterfvEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureParameter(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterfvEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetTextureParameter(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetTextureParameterfvEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureParameter(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterfvEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureParameter(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterfvEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetTextureParameter(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetTextureParameterfvEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureParameterI(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterIivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureParameterI(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterIivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetTextureParameterI(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetTextureParameterIivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureParameterI(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterIivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureParameterI(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterIivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetTextureParameterI(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetTextureParameterIivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureParameterI(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, UInt32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterIuivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureParameterI(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, out UInt32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterIuivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetTextureParameterI(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, UInt32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetTextureParameterIuivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (UInt32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureParameter(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureParameter(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetTextureParameter(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetTextureParameterivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureParameter(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetTextureParameterivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTextureParameter(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTextureParameterivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetTextureParameter(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.GetTextureParameter pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetTextureParameterivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.GetTextureParameter)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, out Int32 length, out Int32 size, out Chela.Graphics.GL2.ExtTransformFeedback type, StringBuilder name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (Chela.Graphics.GL2.ExtTransformFeedback* type_ptr = &type)
                    {
                        StringHandle name_ptr = StringHandle.Alloc(name);
                        try
                        {
                            Delegates.glGetTransformFeedbackVaryingEXT((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (Chela.Graphics.GL2.ExtTransformFeedback*)type_ptr, name_ptr.Address);
                            length = *length_ptr;
                            size = *size_ptr;
                            type = *type_ptr;
                        }
                        finally
                        {
                            name_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32 bufSize, Int32* length, Int32* size, Chela.Graphics.GL2.ExtTransformFeedback* type, StringBuilder name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    Delegates.glGetTransformFeedbackVaryingEXT((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (Chela.Graphics.GL2.ExtTransformFeedback*)type, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, out Int32 length, out Int32 size, out Chela.Graphics.GL2.ExtTransformFeedback type, StringBuilder name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (Chela.Graphics.GL2.ExtTransformFeedback* type_ptr = &type)
                    {
                        StringHandle name_ptr = StringHandle.Alloc(name);
                        try
                        {
                            Delegates.glGetTransformFeedbackVaryingEXT((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (Chela.Graphics.GL2.ExtTransformFeedback*)type_ptr, name_ptr.Address);
                            length = *length_ptr;
                            size = *size_ptr;
                            type = *type_ptr;
                        }
                        finally
                        {
                            name_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32 bufSize, Int32* length, Int32* size, Chela.Graphics.GL2.ExtTransformFeedback* type, StringBuilder name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    Delegates.glGetTransformFeedbackVaryingEXT((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (Chela.Graphics.GL2.ExtTransformFeedback*)type, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 GetUniformBufferSize(Int32 program, Int32 location)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glGetUniformBufferSizeEXT((UInt32)program, (Int32)location);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 GetUniformBufferSize(UInt32 program, Int32 location)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glGetUniformBufferSizeEXT((UInt32)program, (Int32)location);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            IntPtr GetUniformOffset(Int32 program, Int32 location)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glGetUniformOffsetEXT((UInt32)program, (Int32)location);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            IntPtr GetUniformOffset(UInt32 program, Int32 location)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glGetUniformOffsetEXT((UInt32)program, (Int32)location);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetUniform(Int32 program, Int32 location, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetUniform(Int32 program, Int32 location, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetUniform(Int32 program, Int32 location, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetUniform(UInt32 program, Int32 location, UInt32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetUniform(UInt32 program, Int32 location, out UInt32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetUniform(UInt32 program, Int32 location, UInt32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetUniformuivEXT((UInt32)program, (Int32)location, (UInt32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantBoolean(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, bool[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetVariantBooleanvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (bool*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantBoolean(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, out bool data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetVariantBooleanvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVariantBoolean(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, bool* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVariantBooleanvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (bool*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantBoolean(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, bool[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (bool* data_ptr = data)
                    {
                        Delegates.glGetVariantBooleanvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (bool*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantBoolean(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, out bool data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (bool* data_ptr = &data)
                    {
                        Delegates.glGetVariantBooleanvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (bool*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVariantBoolean(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, bool* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVariantBooleanvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (bool*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantFloat(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, Single[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetVariantFloatvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Single*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantFloat(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, out Single data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetVariantFloatvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVariantFloat(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, Single* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVariantFloatvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Single*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantFloat(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, Single[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* data_ptr = data)
                    {
                        Delegates.glGetVariantFloatvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Single*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantFloat(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, out Single data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* data_ptr = &data)
                    {
                        Delegates.glGetVariantFloatvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Single*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVariantFloat(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, Single* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVariantFloatvEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Single*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantInteger(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, Int32[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetVariantIntegervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Int32*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantInteger(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, out Int32 data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetVariantIntegervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVariantInteger(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, Int32* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVariantIntegervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Int32*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantInteger(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, Int32[] data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    {
                        Delegates.glGetVariantIntegervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Int32*)data_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantInteger(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, out Int32 data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    {
                        Delegates.glGetVariantIntegervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Int32*)data_ptr);
                        data = *data_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVariantInteger(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, Int32* data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVariantIntegervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (Int32*)data);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantPointer(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetVariantPointervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantPointer<T2>(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, T2[] data)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVariantPointervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantPointer<T2>(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, T2[,] data)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVariantPointervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantPointer<T2>(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, T2[,,] data)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVariantPointervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantPointer<T2>(Int32 id, Chela.Graphics.GL2.ExtVertexShader value, ref T2 data)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVariantPointervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T2)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantPointer(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetVariantPointervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantPointer<T2>(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, T2[] data)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVariantPointervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantPointer<T2>(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, T2[,] data)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVariantPointervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantPointer<T2>(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, T2[,,] data)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVariantPointervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVariantPointer<T2>(UInt32 id, Chela.Graphics.GL2.ExtVertexShader value, ref T2 data)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVariantPointervEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)value, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T2)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribI(Int32 index, Chela.Graphics.GL2.NvVertexProgram4 pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribIivEXT((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram4)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVertexAttribI(Int32 index, Chela.Graphics.GL2.NvVertexProgram4 pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVertexAttribIivEXT((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram4)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribI(UInt32 index, Chela.Graphics.GL2.NvVertexProgram4 pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribIivEXT((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram4)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVertexAttribI(UInt32 index, Chela.Graphics.GL2.NvVertexProgram4 pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVertexAttribIivEXT((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram4)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribI(UInt32 index, Chela.Graphics.GL2.NvVertexProgram4 pname, out UInt32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribIuivEXT((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram4)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVertexAttribI(UInt32 index, Chela.Graphics.GL2.NvVertexProgram4 pname, UInt32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVertexAttribIuivEXT((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram4)pname, (UInt32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Histogram(Chela.Graphics.GL2.ExtHistogram target, Int32 width, Chela.Graphics.GL2.PixelInternalFormat internalformat, bool sink)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glHistogramEXT((Chela.Graphics.GL2.ExtHistogram)target, (Int32)width, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (bool)sink);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void IndexFunc(Chela.Graphics.GL2.ExtIndexFunc func, Single @ref)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glIndexFuncEXT((Chela.Graphics.GL2.ExtIndexFunc)func, (Single)@ref);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void IndexMaterial(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.ExtIndexMaterial mode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glIndexMaterialEXT((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.ExtIndexMaterial)mode);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void IndexPointer(Chela.Graphics.GL2.IndexPointerType type, Int32 stride, Int32 count, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glIndexPointerEXT((Chela.Graphics.GL2.IndexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void IndexPointer<T3>(Chela.Graphics.GL2.IndexPointerType type, Int32 stride, Int32 count, T3[] pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glIndexPointerEXT((Chela.Graphics.GL2.IndexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void IndexPointer<T3>(Chela.Graphics.GL2.IndexPointerType type, Int32 stride, Int32 count, T3[,] pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glIndexPointerEXT((Chela.Graphics.GL2.IndexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void IndexPointer<T3>(Chela.Graphics.GL2.IndexPointerType type, Int32 stride, Int32 count, T3[,,] pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glIndexPointerEXT((Chela.Graphics.GL2.IndexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void IndexPointer<T3>(Chela.Graphics.GL2.IndexPointerType type, Int32 stride, Int32 count, ref T3 pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glIndexPointerEXT((Chela.Graphics.GL2.IndexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T3)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void InsertComponent(Int32 res, Int32 src, Int32 num)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glInsertComponentEXT((UInt32)res, (UInt32)src, (UInt32)num);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void InsertComponent(UInt32 res, UInt32 src, UInt32 num)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glInsertComponentEXT((UInt32)res, (UInt32)src, (UInt32)num);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsEnabledIndexed(Chela.Graphics.GL2.ExtDrawBuffers2 target, Int32 index)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsEnabledIndexedEXT((Chela.Graphics.GL2.ExtDrawBuffers2)target, (UInt32)index);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsEnabledIndexed(Chela.Graphics.GL2.ExtDrawBuffers2 target, UInt32 index)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsEnabledIndexedEXT((Chela.Graphics.GL2.ExtDrawBuffers2)target, (UInt32)index);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsFramebuffer(Int32 framebuffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsFramebufferEXT((UInt32)framebuffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsFramebuffer(UInt32 framebuffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsFramebufferEXT((UInt32)framebuffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsRenderbuffer(Int32 renderbuffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsRenderbufferEXT((UInt32)renderbuffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsRenderbuffer(UInt32 renderbuffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsRenderbufferEXT((UInt32)renderbuffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsTexture(Int32 texture)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsTextureEXT((UInt32)texture);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsTexture(UInt32 texture)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsTextureEXT((UInt32)texture);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsVariantEnabled(Int32 id, Chela.Graphics.GL2.ExtVertexShader cap)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsVariantEnabledEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)cap);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsVariantEnabled(UInt32 id, Chela.Graphics.GL2.ExtVertexShader cap)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsVariantEnabledEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)cap);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void LockArrays(Int32 first, Int32 count)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glLockArraysEXT((Int32)first, (Int32)count);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe System.IntPtr MapNamedBuffer(Int32 buffer, Chela.Graphics.GL2.ExtDirectStateAccess access)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                return Delegates.glMapNamedBufferEXT((UInt32)buffer, (Chela.Graphics.GL2.ExtDirectStateAccess)access);
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe System.IntPtr MapNamedBuffer(UInt32 buffer, Chela.Graphics.GL2.ExtDirectStateAccess access)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                return Delegates.glMapNamedBufferEXT((UInt32)buffer, (Chela.Graphics.GL2.ExtDirectStateAccess)access);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixFrustum(Chela.Graphics.GL2.MatrixMode mode, Double left, Double right, Double bottom, Double top, Double zNear, Double zFar)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMatrixFrustumEXT((Chela.Graphics.GL2.MatrixMode)mode, (Double)left, (Double)right, (Double)bottom, (Double)top, (Double)zNear, (Double)zFar);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixLoad(Chela.Graphics.GL2.MatrixMode mode, Double[] m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glMatrixLoaddEXT((Chela.Graphics.GL2.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixLoad(Chela.Graphics.GL2.MatrixMode mode, ref Double m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glMatrixLoaddEXT((Chela.Graphics.GL2.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MatrixLoad(Chela.Graphics.GL2.MatrixMode mode, Double* m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMatrixLoaddEXT((Chela.Graphics.GL2.MatrixMode)mode, (Double*)m);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixLoad(Chela.Graphics.GL2.MatrixMode mode, Single[] m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glMatrixLoadfEXT((Chela.Graphics.GL2.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixLoad(Chela.Graphics.GL2.MatrixMode mode, ref Single m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glMatrixLoadfEXT((Chela.Graphics.GL2.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MatrixLoad(Chela.Graphics.GL2.MatrixMode mode, Single* m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMatrixLoadfEXT((Chela.Graphics.GL2.MatrixMode)mode, (Single*)m);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixLoadIdentity(Chela.Graphics.GL2.MatrixMode mode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMatrixLoadIdentityEXT((Chela.Graphics.GL2.MatrixMode)mode);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixLoadTranspose(Chela.Graphics.GL2.MatrixMode mode, Double[] m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glMatrixLoadTransposedEXT((Chela.Graphics.GL2.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixLoadTranspose(Chela.Graphics.GL2.MatrixMode mode, ref Double m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glMatrixLoadTransposedEXT((Chela.Graphics.GL2.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MatrixLoadTranspose(Chela.Graphics.GL2.MatrixMode mode, Double* m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMatrixLoadTransposedEXT((Chela.Graphics.GL2.MatrixMode)mode, (Double*)m);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixLoadTranspose(Chela.Graphics.GL2.MatrixMode mode, Single[] m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glMatrixLoadTransposefEXT((Chela.Graphics.GL2.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixLoadTranspose(Chela.Graphics.GL2.MatrixMode mode, ref Single m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glMatrixLoadTransposefEXT((Chela.Graphics.GL2.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MatrixLoadTranspose(Chela.Graphics.GL2.MatrixMode mode, Single* m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMatrixLoadTransposefEXT((Chela.Graphics.GL2.MatrixMode)mode, (Single*)m);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixMult(Chela.Graphics.GL2.MatrixMode mode, Double[] m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glMatrixMultdEXT((Chela.Graphics.GL2.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixMult(Chela.Graphics.GL2.MatrixMode mode, ref Double m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glMatrixMultdEXT((Chela.Graphics.GL2.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MatrixMult(Chela.Graphics.GL2.MatrixMode mode, Double* m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMatrixMultdEXT((Chela.Graphics.GL2.MatrixMode)mode, (Double*)m);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixMult(Chela.Graphics.GL2.MatrixMode mode, Single[] m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glMatrixMultfEXT((Chela.Graphics.GL2.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixMult(Chela.Graphics.GL2.MatrixMode mode, ref Single m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glMatrixMultfEXT((Chela.Graphics.GL2.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MatrixMult(Chela.Graphics.GL2.MatrixMode mode, Single* m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMatrixMultfEXT((Chela.Graphics.GL2.MatrixMode)mode, (Single*)m);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixMultTranspose(Chela.Graphics.GL2.MatrixMode mode, Double[] m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* m_ptr = m)
                    {
                        Delegates.glMatrixMultTransposedEXT((Chela.Graphics.GL2.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixMultTranspose(Chela.Graphics.GL2.MatrixMode mode, ref Double m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* m_ptr = &m)
                    {
                        Delegates.glMatrixMultTransposedEXT((Chela.Graphics.GL2.MatrixMode)mode, (Double*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MatrixMultTranspose(Chela.Graphics.GL2.MatrixMode mode, Double* m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMatrixMultTransposedEXT((Chela.Graphics.GL2.MatrixMode)mode, (Double*)m);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixMultTranspose(Chela.Graphics.GL2.MatrixMode mode, Single[] m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* m_ptr = m)
                    {
                        Delegates.glMatrixMultTransposefEXT((Chela.Graphics.GL2.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixMultTranspose(Chela.Graphics.GL2.MatrixMode mode, ref Single m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* m_ptr = &m)
                    {
                        Delegates.glMatrixMultTransposefEXT((Chela.Graphics.GL2.MatrixMode)mode, (Single*)m_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MatrixMultTranspose(Chela.Graphics.GL2.MatrixMode mode, Single* m)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMatrixMultTransposefEXT((Chela.Graphics.GL2.MatrixMode)mode, (Single*)m);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixOrtho(Chela.Graphics.GL2.MatrixMode mode, Double left, Double right, Double bottom, Double top, Double zNear, Double zFar)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMatrixOrthoEXT((Chela.Graphics.GL2.MatrixMode)mode, (Double)left, (Double)right, (Double)bottom, (Double)top, (Double)zNear, (Double)zFar);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixPop(Chela.Graphics.GL2.MatrixMode mode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMatrixPopEXT((Chela.Graphics.GL2.MatrixMode)mode);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixPush(Chela.Graphics.GL2.MatrixMode mode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMatrixPushEXT((Chela.Graphics.GL2.MatrixMode)mode);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixRotate(Chela.Graphics.GL2.MatrixMode mode, Double angle, Double x, Double y, Double z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMatrixRotatedEXT((Chela.Graphics.GL2.MatrixMode)mode, (Double)angle, (Double)x, (Double)y, (Double)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixRotate(Chela.Graphics.GL2.MatrixMode mode, Single angle, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMatrixRotatefEXT((Chela.Graphics.GL2.MatrixMode)mode, (Single)angle, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixScale(Chela.Graphics.GL2.MatrixMode mode, Double x, Double y, Double z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMatrixScaledEXT((Chela.Graphics.GL2.MatrixMode)mode, (Double)x, (Double)y, (Double)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixScale(Chela.Graphics.GL2.MatrixMode mode, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMatrixScalefEXT((Chela.Graphics.GL2.MatrixMode)mode, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixTranslate(Chela.Graphics.GL2.MatrixMode mode, Double x, Double y, Double z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMatrixTranslatedEXT((Chela.Graphics.GL2.MatrixMode)mode, (Double)x, (Double)y, (Double)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MatrixTranslate(Chela.Graphics.GL2.MatrixMode mode, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMatrixTranslatefEXT((Chela.Graphics.GL2.MatrixMode)mode, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Minmax(Chela.Graphics.GL2.ExtHistogram target, Chela.Graphics.GL2.PixelInternalFormat internalformat, bool sink)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMinmaxEXT((Chela.Graphics.GL2.ExtHistogram)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (bool)sink);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiDrawArrays(Chela.Graphics.GL2.BeginMode mode, Int32[] first, Int32[] count, Int32 primcount)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* first_ptr = first)
                    fixed (Int32* count_ptr = count)
                    {
                        Delegates.glMultiDrawArraysEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiDrawArrays(Chela.Graphics.GL2.BeginMode mode, out Int32 first, out Int32 count, Int32 primcount)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* first_ptr = &first)
                    fixed (Int32* count_ptr = &count)
                    {
                        Delegates.glMultiDrawArraysEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount);
                        first = *first_ptr;
                        count = *count_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiDrawArrays(Chela.Graphics.GL2.BeginMode mode, Int32* first, Int32* count, Int32 primcount)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiDrawArraysEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32*)first, (Int32*)count, (Int32)primcount);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiDrawElements(Chela.Graphics.GL2.BeginMode mode, Int32[] count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices, Int32 primcount)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    {
                        Delegates.glMultiDrawElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, Int32[] count, Chela.Graphics.GL2.DrawElementsType type, T3[] indices, Int32 primcount)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, Int32[] count, Chela.Graphics.GL2.DrawElementsType type, T3[,] indices, Int32 primcount)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, Int32[] count, Chela.Graphics.GL2.DrawElementsType type, T3[,,] indices, Int32 primcount)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, Int32[] count, Chela.Graphics.GL2.DrawElementsType type, ref T3 indices, Int32 primcount)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* count_ptr = count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                            indices = (T3)indices_ptr.Target;
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiDrawElements(Chela.Graphics.GL2.BeginMode mode, ref Int32 count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices, Int32 primcount)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    {
                        Delegates.glMultiDrawElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, ref Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[] indices, Int32 primcount)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, ref Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[,] indices, Int32 primcount)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, ref Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[,,] indices, Int32 primcount)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, ref Int32 count, Chela.Graphics.GL2.DrawElementsType type, ref T3 indices, Int32 primcount)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* count_ptr = &count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiDrawElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                            indices = (T3)indices_ptr.Target;
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiDrawElements(Chela.Graphics.GL2.BeginMode mode, Int32* count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices, Int32 primcount)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiDrawElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices, (Int32)primcount);
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, Int32* count, Chela.Graphics.GL2.DrawElementsType type, T3[] indices, Int32 primcount)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiDrawElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, Int32* count, Chela.Graphics.GL2.DrawElementsType type, T3[,] indices, Int32 primcount)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiDrawElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, Int32* count, Chela.Graphics.GL2.DrawElementsType type, T3[,,] indices, Int32 primcount)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiDrawElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                }
                finally
                {
                    indices_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiDrawElements<T3>(Chela.Graphics.GL2.BeginMode mode, Int32* count, Chela.Graphics.GL2.DrawElementsType type, ref T3 indices, Int32 primcount)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiDrawElementsEXT((Chela.Graphics.GL2.BeginMode)mode, (Int32*)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount);
                    indices = (T3)indices_ptr.Target;
                }
                finally
                {
                    indices_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexBuffer(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexBufferEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexBuffer(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, UInt32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexBufferEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoordPointer(Chela.Graphics.GL2.TextureUnit texunit, Int32 size, Chela.Graphics.GL2.TexCoordPointerType type, Int32 stride, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexCoordPointerEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Int32)size, (Chela.Graphics.GL2.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoordPointer<T4>(Chela.Graphics.GL2.TextureUnit texunit, Int32 size, Chela.Graphics.GL2.TexCoordPointerType type, Int32 stride, T4[] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexCoordPointerEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Int32)size, (Chela.Graphics.GL2.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoordPointer<T4>(Chela.Graphics.GL2.TextureUnit texunit, Int32 size, Chela.Graphics.GL2.TexCoordPointerType type, Int32 stride, T4[,] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexCoordPointerEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Int32)size, (Chela.Graphics.GL2.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoordPointer<T4>(Chela.Graphics.GL2.TextureUnit texunit, Int32 size, Chela.Graphics.GL2.TexCoordPointerType type, Int32 stride, T4[,,] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexCoordPointerEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Int32)size, (Chela.Graphics.GL2.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoordPointer<T4>(Chela.Graphics.GL2.TextureUnit texunit, Int32 size, Chela.Graphics.GL2.TexCoordPointerType type, Int32 stride, ref T4 pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexCoordPointerEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Int32)size, (Chela.Graphics.GL2.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T4)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexEnv(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, Single param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexEnvfEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Single)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexEnv(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glMultiTexEnvfvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexEnv(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexEnvfvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexEnv(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, Int32 param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexEnviEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Int32)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexEnv(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glMultiTexEnvivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexEnv(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureEnvTarget target, Chela.Graphics.GL2.TextureEnvParameter pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexEnvivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureEnvTarget)target, (Chela.Graphics.GL2.TextureEnvParameter)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexGend(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Double param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexGendEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Double)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexGen(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Double[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glMultiTexGendvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexGen(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, ref Double @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glMultiTexGendvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexGen(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Double* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexGendvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Double*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexGen(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Single param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexGenfEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Single)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexGen(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glMultiTexGenfvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexGen(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexGenfvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexGen(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Int32 param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexGeniEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Int32)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexGen(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glMultiTexGenivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexGen(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureCoordName coord, Chela.Graphics.GL2.TextureGenParameter pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexGenivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureCoordName)coord, (Chela.Graphics.GL2.TextureGenParameter)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexImage1D(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexImage1DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexImage1D<T8>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T8[] pixels)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexImage1DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexImage1D<T8>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T8[,] pixels)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexImage1DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexImage1D<T8>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T8[,,] pixels)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexImage1DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexImage1D<T8>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T8 pixels)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexImage1DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T8)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexImage2D(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexImage2DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexImage2D<T9>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexImage2DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexImage2D<T9>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[,] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexImage2DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexImage2D<T9>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[,,] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexImage2DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexImage2D<T9>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T9 pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexImage2DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T9)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexImage3D(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexImage3DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexImage3D<T10>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T10[] pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexImage3DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexImage3D<T10>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T10[,] pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexImage3DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexImage3D<T10>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T10[,,] pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexImage3DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexImage3D<T10>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T10 pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexImage3DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T10)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexParameter(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Single param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexParameterfEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Single)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexParameter(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glMultiTexParameterfvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexParameter(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexParameterfvEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexParameter(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Int32 param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexParameteriEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexParameterI(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glMultiTexParameterIivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexParameterI(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, ref Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glMultiTexParameterIivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexParameterI(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexParameterIivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexParameterI(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, UInt32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glMultiTexParameterIuivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexParameterI(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, ref UInt32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glMultiTexParameterIuivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexParameterI(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, UInt32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexParameterIuivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (UInt32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexParameter(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glMultiTexParameterivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexParameter(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexParameterivEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexRenderbuffer(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 renderbuffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexRenderbufferEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (UInt32)renderbuffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexRenderbuffer(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, UInt32 renderbuffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexRenderbufferEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (UInt32)renderbuffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexSubImage1D(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexSubImage1DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexSubImage1D<T7>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T7[] pixels)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexSubImage1DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexSubImage1D<T7>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T7[,] pixels)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexSubImage1DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexSubImage1D<T7>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T7[,,] pixels)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexSubImage1DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexSubImage1D<T7>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T7 pixels)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexSubImage1DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T7)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexSubImage2D(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexSubImage2DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexSubImage2D<T9>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexSubImage2DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexSubImage2D<T9>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[,] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexSubImage2DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexSubImage2D<T9>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[,,] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexSubImage2DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexSubImage2D<T9>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T9 pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexSubImage2DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T9)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexSubImage3D(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexSubImage3DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexSubImage3D<T11>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T11[] pixels)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexSubImage3DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexSubImage3D<T11>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T11[,] pixels)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexSubImage3DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexSubImage3D<T11>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T11[,,] pixels)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexSubImage3DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexSubImage3D<T11>(Chela.Graphics.GL2.TextureUnit texunit, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T11 pixels)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMultiTexSubImage3DEXT((Chela.Graphics.GL2.TextureUnit)texunit, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T11)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedBufferData(Int32 buffer, IntPtr size, IntPtr data, Chela.Graphics.GL2.ExtDirectStateAccess usage)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data, (Chela.Graphics.GL2.ExtDirectStateAccess)usage);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedBufferData<T2>(Int32 buffer, IntPtr size, T2[] data, Chela.Graphics.GL2.ExtDirectStateAccess usage)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.ExtDirectStateAccess)usage);
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedBufferData<T2>(Int32 buffer, IntPtr size, T2[,] data, Chela.Graphics.GL2.ExtDirectStateAccess usage)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.ExtDirectStateAccess)usage);
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedBufferData<T2>(Int32 buffer, IntPtr size, T2[,,] data, Chela.Graphics.GL2.ExtDirectStateAccess usage)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.ExtDirectStateAccess)usage);
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedBufferData<T2>(Int32 buffer, IntPtr size, ref T2 data, Chela.Graphics.GL2.ExtDirectStateAccess usage)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.ExtDirectStateAccess)usage);
                        data = (T2)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedBufferData(UInt32 buffer, IntPtr size, IntPtr data, Chela.Graphics.GL2.ExtDirectStateAccess usage)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data, (Chela.Graphics.GL2.ExtDirectStateAccess)usage);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedBufferData<T2>(UInt32 buffer, IntPtr size, T2[] data, Chela.Graphics.GL2.ExtDirectStateAccess usage)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.ExtDirectStateAccess)usage);
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedBufferData<T2>(UInt32 buffer, IntPtr size, T2[,] data, Chela.Graphics.GL2.ExtDirectStateAccess usage)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.ExtDirectStateAccess)usage);
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedBufferData<T2>(UInt32 buffer, IntPtr size, T2[,,] data, Chela.Graphics.GL2.ExtDirectStateAccess usage)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.ExtDirectStateAccess)usage);
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedBufferData<T2>(UInt32 buffer, IntPtr size, ref T2 data, Chela.Graphics.GL2.ExtDirectStateAccess usage)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedBufferDataEXT((UInt32)buffer, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Chela.Graphics.GL2.ExtDirectStateAccess)usage);
                        data = (T2)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedBufferSubData(Int32 buffer, IntPtr offset, IntPtr size, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, T3[] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, T3[,] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, T3[,,] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedBufferSubData<T3>(Int32 buffer, IntPtr offset, IntPtr size, ref T3 data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T3)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedBufferSubData(UInt32 buffer, IntPtr offset, IntPtr size, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, T3[] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, T3[,] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, T3[,,] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedBufferSubData<T3>(UInt32 buffer, IntPtr offset, IntPtr size, ref T3 data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedBufferSubDataEXT((UInt32)buffer, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T3)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedFramebufferRenderbuffer(Int32 framebuffer, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.RenderbufferTarget renderbuffertarget, Int32 renderbuffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedFramebufferRenderbufferEXT((UInt32)framebuffer, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedFramebufferRenderbuffer(UInt32 framebuffer, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.RenderbufferTarget renderbuffertarget, UInt32 renderbuffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedFramebufferRenderbufferEXT((UInt32)framebuffer, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedFramebufferTexture1D(Int32 framebuffer, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.TextureTarget textarget, Int32 texture, Int32 level)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedFramebufferTexture1DEXT((UInt32)framebuffer, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.TextureTarget)textarget, (UInt32)texture, (Int32)level);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedFramebufferTexture1D(UInt32 framebuffer, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.TextureTarget textarget, UInt32 texture, Int32 level)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedFramebufferTexture1DEXT((UInt32)framebuffer, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.TextureTarget)textarget, (UInt32)texture, (Int32)level);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedFramebufferTexture2D(Int32 framebuffer, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.TextureTarget textarget, Int32 texture, Int32 level)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedFramebufferTexture2DEXT((UInt32)framebuffer, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.TextureTarget)textarget, (UInt32)texture, (Int32)level);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedFramebufferTexture2D(UInt32 framebuffer, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.TextureTarget textarget, UInt32 texture, Int32 level)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedFramebufferTexture2DEXT((UInt32)framebuffer, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.TextureTarget)textarget, (UInt32)texture, (Int32)level);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedFramebufferTexture3D(Int32 framebuffer, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.TextureTarget textarget, Int32 texture, Int32 level, Int32 zoffset)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedFramebufferTexture3DEXT((UInt32)framebuffer, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedFramebufferTexture3D(UInt32 framebuffer, Chela.Graphics.GL2.FramebufferAttachment attachment, Chela.Graphics.GL2.TextureTarget textarget, UInt32 texture, Int32 level, Int32 zoffset)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedFramebufferTexture3DEXT((UInt32)framebuffer, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (Chela.Graphics.GL2.TextureTarget)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedFramebufferTexture(Int32 framebuffer, Chela.Graphics.GL2.FramebufferAttachment attachment, Int32 texture, Int32 level)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedFramebufferTextureEXT((UInt32)framebuffer, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedFramebufferTexture(UInt32 framebuffer, Chela.Graphics.GL2.FramebufferAttachment attachment, UInt32 texture, Int32 level)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedFramebufferTextureEXT((UInt32)framebuffer, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedFramebufferTextureFace(Int32 framebuffer, Chela.Graphics.GL2.FramebufferAttachment attachment, Int32 texture, Int32 level, Chela.Graphics.GL2.TextureTarget face)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedFramebufferTextureFaceEXT((UInt32)framebuffer, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Chela.Graphics.GL2.TextureTarget)face);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedFramebufferTextureFace(UInt32 framebuffer, Chela.Graphics.GL2.FramebufferAttachment attachment, UInt32 texture, Int32 level, Chela.Graphics.GL2.TextureTarget face)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedFramebufferTextureFaceEXT((UInt32)framebuffer, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Chela.Graphics.GL2.TextureTarget)face);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedFramebufferTextureLayer(Int32 framebuffer, Chela.Graphics.GL2.FramebufferAttachment attachment, Int32 texture, Int32 level, Int32 layer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedFramebufferTextureLayerEXT((UInt32)framebuffer, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedFramebufferTextureLayer(UInt32 framebuffer, Chela.Graphics.GL2.FramebufferAttachment attachment, UInt32 texture, Int32 level, Int32 layer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedFramebufferTextureLayerEXT((UInt32)framebuffer, (Chela.Graphics.GL2.FramebufferAttachment)attachment, (UInt32)texture, (Int32)level, (Int32)layer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameter4(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Double x, Double y, Double z, Double w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedProgramLocalParameter4dEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameter4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Double x, Double y, Double z, Double w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedProgramLocalParameter4dEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameter4(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Double[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameter4(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, ref Double @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void NamedProgramLocalParameter4(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Double* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameter4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Double[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameter4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, ref Double @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void NamedProgramLocalParameter4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Double* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glNamedProgramLocalParameter4dvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Double*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameter4(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Single x, Single y, Single z, Single w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedProgramLocalParameter4fEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameter4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Single x, Single y, Single z, Single w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedProgramLocalParameter4fEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameter4(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameter4(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, ref Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void NamedProgramLocalParameter4(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameter4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameter4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, ref Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void NamedProgramLocalParameter4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glNamedProgramLocalParameter4fvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameterI4(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedProgramLocalParameterI4iEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameterI4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedProgramLocalParameterI4iEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameterI4(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameterI4(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, ref Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void NamedProgramLocalParameterI4(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameterI4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameterI4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, ref Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void NamedProgramLocalParameterI4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glNamedProgramLocalParameterI4ivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameterI4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedProgramLocalParameterI4uiEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameterI4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, UInt32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameterI4uivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameterI4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, ref UInt32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameterI4uivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void NamedProgramLocalParameterI4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, UInt32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glNamedProgramLocalParameterI4uivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (UInt32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameters4(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Int32 count, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameters4(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Int32 count, ref Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void NamedProgramLocalParameters4(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Int32 count, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameters4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Int32 count, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParameters4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Int32 count, ref Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void NamedProgramLocalParameters4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Int32 count, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glNamedProgramLocalParameters4fvEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParametersI4(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Int32 count, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParametersI4(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Int32 count, ref Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void NamedProgramLocalParametersI4(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Int32 index, Int32 count, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParametersI4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Int32 count, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParametersI4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Int32 count, ref Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void NamedProgramLocalParametersI4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Int32 count, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glNamedProgramLocalParametersI4ivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParametersI4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Int32 count, UInt32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glNamedProgramLocalParametersI4uivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramLocalParametersI4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Int32 count, ref UInt32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glNamedProgramLocalParametersI4uivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void NamedProgramLocalParametersI4(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, UInt32 index, Int32 count, UInt32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glNamedProgramLocalParametersI4uivEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (UInt32)index, (Int32)count, (UInt32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramString(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess format, Int32 len, IntPtr @string)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedProgramStringEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)format, (Int32)len, (IntPtr)@string);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramString<T4>(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess format, Int32 len, T4[] @string)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedProgramStringEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramString<T4>(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess format, Int32 len, T4[,] @string)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedProgramStringEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramString<T4>(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess format, Int32 len, T4[,,] @string)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedProgramStringEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramString<T4>(Int32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess format, Int32 len, ref T4 @string)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedProgramStringEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                        @string = (T4)@string_ptr.Target;
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramString(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess format, Int32 len, IntPtr @string)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedProgramStringEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)format, (Int32)len, (IntPtr)@string);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramString<T4>(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess format, Int32 len, T4[] @string)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedProgramStringEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramString<T4>(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess format, Int32 len, T4[,] @string)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedProgramStringEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramString<T4>(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess format, Int32 len, T4[,,] @string)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedProgramStringEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedProgramString<T4>(UInt32 program, Chela.Graphics.GL2.ExtDirectStateAccess target, Chela.Graphics.GL2.ExtDirectStateAccess format, Int32 len, ref T4 @string)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNamedProgramStringEXT((UInt32)program, (Chela.Graphics.GL2.ExtDirectStateAccess)target, (Chela.Graphics.GL2.ExtDirectStateAccess)format, (Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                        @string = (T4)@string_ptr.Target;
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedRenderbufferStorage(Int32 renderbuffer, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedRenderbufferStorageEXT((UInt32)renderbuffer, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedRenderbufferStorage(UInt32 renderbuffer, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedRenderbufferStorageEXT((UInt32)renderbuffer, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedRenderbufferStorageMultisampleCoverage(Int32 renderbuffer, Int32 coverageSamples, Int32 colorSamples, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedRenderbufferStorageMultisampleCoverageEXT((UInt32)renderbuffer, (Int32)coverageSamples, (Int32)colorSamples, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedRenderbufferStorageMultisampleCoverage(UInt32 renderbuffer, Int32 coverageSamples, Int32 colorSamples, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedRenderbufferStorageMultisampleCoverageEXT((UInt32)renderbuffer, (Int32)coverageSamples, (Int32)colorSamples, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedRenderbufferStorageMultisample(Int32 renderbuffer, Int32 samples, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedRenderbufferStorageMultisampleEXT((UInt32)renderbuffer, (Int32)samples, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NamedRenderbufferStorageMultisample(UInt32 renderbuffer, Int32 samples, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNamedRenderbufferStorageMultisampleEXT((UInt32)renderbuffer, (Int32)samples, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalPointer(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, Int32 count, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNormalPointerEXT((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalPointer<T3>(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, Int32 count, T3[] pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNormalPointerEXT((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalPointer<T3>(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, Int32 count, T3[,] pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNormalPointerEXT((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalPointer<T3>(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, Int32 count, T3[,,] pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNormalPointerEXT((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalPointer<T3>(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, Int32 count, ref T3 pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNormalPointerEXT((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T3)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PixelTransformParameter(Chela.Graphics.GL2.ExtPixelTransform target, Chela.Graphics.GL2.ExtPixelTransform pname, Single param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPixelTransformParameterfEXT((Chela.Graphics.GL2.ExtPixelTransform)target, (Chela.Graphics.GL2.ExtPixelTransform)pname, (Single)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void PixelTransformParameter(Chela.Graphics.GL2.ExtPixelTransform target, Chela.Graphics.GL2.ExtPixelTransform pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glPixelTransformParameterfvEXT((Chela.Graphics.GL2.ExtPixelTransform)target, (Chela.Graphics.GL2.ExtPixelTransform)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void PixelTransformParameter(Chela.Graphics.GL2.ExtPixelTransform target, Chela.Graphics.GL2.ExtPixelTransform pname, Int32 param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPixelTransformParameteriEXT((Chela.Graphics.GL2.ExtPixelTransform)target, (Chela.Graphics.GL2.ExtPixelTransform)pname, (Int32)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void PixelTransformParameter(Chela.Graphics.GL2.ExtPixelTransform target, Chela.Graphics.GL2.ExtPixelTransform pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glPixelTransformParameterivEXT((Chela.Graphics.GL2.ExtPixelTransform)target, (Chela.Graphics.GL2.ExtPixelTransform)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void PointParameter(Chela.Graphics.GL2.ExtPointParameters pname, Single param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPointParameterfEXT((Chela.Graphics.GL2.ExtPointParameters)pname, (Single)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PointParameter(Chela.Graphics.GL2.ExtPointParameters pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glPointParameterfvEXT((Chela.Graphics.GL2.ExtPointParameters)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void PointParameter(Chela.Graphics.GL2.ExtPointParameters pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glPointParameterfvEXT((Chela.Graphics.GL2.ExtPointParameters)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void PolygonOffset(Single factor, Single bias)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPolygonOffsetEXT((Single)factor, (Single)bias);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PrioritizeTextures(Int32 n, Int32[] textures, Single[] priorities)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* textures_ptr = textures)
                    fixed (Single* priorities_ptr = priorities)
                    {
                        Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PrioritizeTextures(Int32 n, ref Int32 textures, ref Single priorities)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* textures_ptr = &textures)
                    fixed (Single* priorities_ptr = &priorities)
                    {
                        Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void PrioritizeTextures(Int32 n, Int32* textures, Single* priorities)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures, (Single*)priorities);
                #if DEBUG
                }
                #endif
            }

            public static 
            void PrioritizeTextures(Int32 n, UInt32[] textures, Single[] priorities)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* textures_ptr = textures)
                    fixed (Single* priorities_ptr = priorities)
                    {
                        Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PrioritizeTextures(Int32 n, ref UInt32 textures, ref Single priorities)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* textures_ptr = &textures)
                    fixed (Single* priorities_ptr = &priorities)
                    {
                        Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures_ptr, (Single*)priorities_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void PrioritizeTextures(Int32 n, UInt32* textures, Single* priorities)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glPrioritizeTexturesEXT((Int32)n, (UInt32*)textures, (Single*)priorities);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameters4(Chela.Graphics.GL2.ExtGpuProgramParameters target, Int32 index, Int32 count, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameters4fvEXT((Chela.Graphics.GL2.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameters4(Chela.Graphics.GL2.ExtGpuProgramParameters target, Int32 index, Int32 count, ref Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameters4fvEXT((Chela.Graphics.GL2.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramEnvParameters4(Chela.Graphics.GL2.ExtGpuProgramParameters target, Int32 index, Int32 count, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramEnvParameters4fvEXT((Chela.Graphics.GL2.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameters4(Chela.Graphics.GL2.ExtGpuProgramParameters target, UInt32 index, Int32 count, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameters4fvEXT((Chela.Graphics.GL2.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameters4(Chela.Graphics.GL2.ExtGpuProgramParameters target, UInt32 index, Int32 count, ref Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameters4fvEXT((Chela.Graphics.GL2.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramEnvParameters4(Chela.Graphics.GL2.ExtGpuProgramParameters target, UInt32 index, Int32 count, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramEnvParameters4fvEXT((Chela.Graphics.GL2.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameters4(Chela.Graphics.GL2.ExtGpuProgramParameters target, Int32 index, Int32 count, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameters4fvEXT((Chela.Graphics.GL2.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameters4(Chela.Graphics.GL2.ExtGpuProgramParameters target, Int32 index, Int32 count, ref Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameters4fvEXT((Chela.Graphics.GL2.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramLocalParameters4(Chela.Graphics.GL2.ExtGpuProgramParameters target, Int32 index, Int32 count, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramLocalParameters4fvEXT((Chela.Graphics.GL2.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameters4(Chela.Graphics.GL2.ExtGpuProgramParameters target, UInt32 index, Int32 count, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameters4fvEXT((Chela.Graphics.GL2.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameters4(Chela.Graphics.GL2.ExtGpuProgramParameters target, UInt32 index, Int32 count, ref Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameters4fvEXT((Chela.Graphics.GL2.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramLocalParameters4(Chela.Graphics.GL2.ExtGpuProgramParameters target, UInt32 index, Int32 count, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramLocalParameters4fvEXT((Chela.Graphics.GL2.ExtGpuProgramParameters)target, (UInt32)index, (Int32)count, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameter(Int32 program, Chela.Graphics.GL2.ExtGeometryShader4 pname, Int32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramParameteriEXT((UInt32)program, (Chela.Graphics.GL2.ExtGeometryShader4)pname, (Int32)value);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameter(UInt32 program, Chela.Graphics.GL2.ExtGeometryShader4 pname, Int32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramParameteriEXT((UInt32)program, (Chela.Graphics.GL2.ExtGeometryShader4)pname, (Int32)value);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform1(Int32 program, Int32 location, Single v0)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramUniform1fEXT((UInt32)program, (Int32)location, (Single)v0);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform1(UInt32 program, Int32 location, Single v0)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramUniform1fEXT((UInt32)program, (Int32)location, (Single)v0);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform1(Int32 program, Int32 location, Int32 count, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform1fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform1(Int32 program, Int32 location, Int32 count, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform1fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniform1fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform1fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform1fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniform1fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform1(Int32 program, Int32 location, Int32 v0)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramUniform1iEXT((UInt32)program, (Int32)location, (Int32)v0);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform1(UInt32 program, Int32 location, Int32 v0)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramUniform1iEXT((UInt32)program, (Int32)location, (Int32)v0);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform1(Int32 program, Int32 location, Int32 count, Int32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform1ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform1(Int32 program, Int32 location, Int32 count, ref Int32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform1ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniform1(Int32 program, Int32 location, Int32 count, Int32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniform1ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Int32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform1ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref Int32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform1ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, Int32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniform1ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform1(UInt32 program, Int32 location, UInt32 v0)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramUniform1uiEXT((UInt32)program, (Int32)location, (UInt32)v0);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform1(UInt32 program, Int32 location, Int32 count, UInt32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glProgramUniform1uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform1(UInt32 program, Int32 location, Int32 count, ref UInt32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform1uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniform1(UInt32 program, Int32 location, Int32 count, UInt32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniform1uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform2(Int32 program, Int32 location, Single v0, Single v1)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramUniform2fEXT((UInt32)program, (Int32)location, (Single)v0, (Single)v1);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform2(UInt32 program, Int32 location, Single v0, Single v1)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramUniform2fEXT((UInt32)program, (Int32)location, (Single)v0, (Single)v1);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform2(Int32 program, Int32 location, Int32 count, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform2fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform2(Int32 program, Int32 location, Int32 count, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform2fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniform2(Int32 program, Int32 location, Int32 count, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniform2fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform2fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform2(UInt32 program, Int32 location, Int32 count, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform2fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniform2fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform2(Int32 program, Int32 location, Int32 v0, Int32 v1)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramUniform2iEXT((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform2(UInt32 program, Int32 location, Int32 v0, Int32 v1)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramUniform2iEXT((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform2(Int32 program, Int32 location, Int32 count, Int32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform2ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniform2(Int32 program, Int32 location, Int32 count, Int32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniform2ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Int32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform2ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, Int32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniform2ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform2(UInt32 program, Int32 location, UInt32 v0, UInt32 v1)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramUniform2uiEXT((UInt32)program, (Int32)location, (UInt32)v0, (UInt32)v1);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform2(UInt32 program, Int32 location, Int32 count, UInt32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glProgramUniform2uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform2(UInt32 program, Int32 location, Int32 count, ref UInt32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform2uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniform2(UInt32 program, Int32 location, Int32 count, UInt32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniform2uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform3(Int32 program, Int32 location, Single v0, Single v1, Single v2)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramUniform3fEXT((UInt32)program, (Int32)location, (Single)v0, (Single)v1, (Single)v2);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform3(UInt32 program, Int32 location, Single v0, Single v1, Single v2)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramUniform3fEXT((UInt32)program, (Int32)location, (Single)v0, (Single)v1, (Single)v2);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform3(Int32 program, Int32 location, Int32 count, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform3fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform3(Int32 program, Int32 location, Int32 count, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform3fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniform3fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform3fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform3fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniform3fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform3(Int32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramUniform3iEXT((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1, (Int32)v2);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform3(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramUniform3iEXT((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1, (Int32)v2);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform3(Int32 program, Int32 location, Int32 count, Int32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform3ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform3(Int32 program, Int32 location, Int32 count, ref Int32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform3ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniform3(Int32 program, Int32 location, Int32 count, Int32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniform3ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Int32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform3ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref Int32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform3ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, Int32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniform3ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform3(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramUniform3uiEXT((UInt32)program, (Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform3(UInt32 program, Int32 location, Int32 count, UInt32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glProgramUniform3uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform3(UInt32 program, Int32 location, Int32 count, ref UInt32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform3uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniform3(UInt32 program, Int32 location, Int32 count, UInt32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniform3uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform4(Int32 program, Int32 location, Single v0, Single v1, Single v2, Single v3)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramUniform4fEXT((UInt32)program, (Int32)location, (Single)v0, (Single)v1, (Single)v2, (Single)v3);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform4(UInt32 program, Int32 location, Single v0, Single v1, Single v2, Single v3)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramUniform4fEXT((UInt32)program, (Int32)location, (Single)v0, (Single)v1, (Single)v2, (Single)v3);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform4(Int32 program, Int32 location, Int32 count, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform4fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform4(Int32 program, Int32 location, Int32 count, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform4fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniform4fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniform4fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniform4fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniform4fvEXT((UInt32)program, (Int32)location, (Int32)count, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform4(Int32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramUniform4iEXT((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1, (Int32)v2, (Int32)v3);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform4(UInt32 program, Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramUniform4iEXT((UInt32)program, (Int32)location, (Int32)v0, (Int32)v1, (Int32)v2, (Int32)v3);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform4(Int32 program, Int32 location, Int32 count, Int32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform4ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform4(Int32 program, Int32 location, Int32 count, ref Int32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform4ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniform4(Int32 program, Int32 location, Int32 count, Int32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniform4ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Int32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glProgramUniform4ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref Int32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform4ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, Int32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniform4ivEXT((UInt32)program, (Int32)location, (Int32)count, (Int32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform4(UInt32 program, Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramUniform4uiEXT((UInt32)program, (Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2, (UInt32)v3);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform4(UInt32 program, Int32 location, Int32 count, UInt32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glProgramUniform4uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniform4(UInt32 program, Int32 location, Int32 count, ref UInt32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glProgramUniform4uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniform4(UInt32 program, Int32 location, Int32 count, UInt32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniform4uivEXT((UInt32)program, (Int32)location, (Int32)count, (UInt32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniformMatrix2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniformMatrix2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniformMatrix2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniformMatrix2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix2x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix2x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniformMatrix2x3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniformMatrix2x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix2x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix2x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniformMatrix2x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniformMatrix2x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix2x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix2x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniformMatrix2x4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniformMatrix2x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix2x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix2x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniformMatrix2x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniformMatrix2x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniformMatrix3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniformMatrix3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniformMatrix3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniformMatrix3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix3x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix3x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniformMatrix3x2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniformMatrix3x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix3x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix3x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniformMatrix3x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniformMatrix3x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix3x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix3x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniformMatrix3x4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniformMatrix3x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix3x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix3x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniformMatrix3x4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniformMatrix3x4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniformMatrix4(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniformMatrix4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniformMatrix4(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniformMatrix4fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix4x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix4x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniformMatrix4x2(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniformMatrix4x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix4x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix4x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniformMatrix4x2(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniformMatrix4x2fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix4x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix4x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniformMatrix4x3(Int32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniformMatrix4x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = value)
                    {
                        Delegates.glProgramUniformMatrix4x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, ref Single value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* value_ptr = &value)
                    {
                        Delegates.glProgramUniformMatrix4x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramUniformMatrix4x3(UInt32 program, Int32 location, Int32 count, bool transpose, Single* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramUniformMatrix4x3fvEXT((UInt32)program, (Int32)location, (Int32)count, (bool)transpose, (Single*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProvokingVertex(Chela.Graphics.GL2.ExtProvokingVertex mode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProvokingVertexEXT((Chela.Graphics.GL2.ExtProvokingVertex)mode);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PushClientAttribDefault(Chela.Graphics.GL2.ClientAttribMask mask)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPushClientAttribDefaultEXT((Chela.Graphics.GL2.ClientAttribMask)mask);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void RenderbufferStorage(Chela.Graphics.GL2.RenderbufferTarget target, Chela.Graphics.GL2.RenderbufferStorage internalformat, Int32 width, Int32 height)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glRenderbufferStorageEXT((Chela.Graphics.GL2.RenderbufferTarget)target, (Chela.Graphics.GL2.RenderbufferStorage)internalformat, (Int32)width, (Int32)height);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void RenderbufferStorageMultisample(Chela.Graphics.GL2.ExtFramebufferMultisample target, Int32 samples, Chela.Graphics.GL2.ExtFramebufferMultisample internalformat, Int32 width, Int32 height)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glRenderbufferStorageMultisampleEXT((Chela.Graphics.GL2.ExtFramebufferMultisample)target, (Int32)samples, (Chela.Graphics.GL2.ExtFramebufferMultisample)internalformat, (Int32)width, (Int32)height);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ResetHistogram(Chela.Graphics.GL2.ExtHistogram target)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glResetHistogramEXT((Chela.Graphics.GL2.ExtHistogram)target);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ResetMinmax(Chela.Graphics.GL2.ExtHistogram target)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glResetMinmaxEXT((Chela.Graphics.GL2.ExtHistogram)target);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SampleMask(Single value, bool invert)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSampleMaskEXT((Single)value, (bool)invert);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SamplePattern(Chela.Graphics.GL2.ExtMultisample pattern)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSamplePatternEXT((Chela.Graphics.GL2.ExtMultisample)pattern);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(SByte red, SByte green, SByte blue)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSecondaryColor3bEXT((SByte)red, (SByte)green, (SByte)blue);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(SByte[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (SByte* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3bvEXT((SByte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(ref SByte v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (SByte* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3bvEXT((SByte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void SecondaryColor3(SByte* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glSecondaryColor3bvEXT((SByte*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(Double red, Double green, Double blue)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSecondaryColor3dEXT((Double)red, (Double)green, (Double)blue);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3dvEXT((Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3dvEXT((Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void SecondaryColor3(Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glSecondaryColor3dvEXT((Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(Single red, Single green, Single blue)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSecondaryColor3fEXT((Single)red, (Single)green, (Single)blue);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3fvEXT((Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3fvEXT((Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void SecondaryColor3(Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glSecondaryColor3fvEXT((Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(Int32 red, Int32 green, Int32 blue)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSecondaryColor3iEXT((Int32)red, (Int32)green, (Int32)blue);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(Int32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3ivEXT((Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(ref Int32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3ivEXT((Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void SecondaryColor3(Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glSecondaryColor3ivEXT((Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(Int16 red, Int16 green, Int16 blue)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSecondaryColor3sEXT((Int16)red, (Int16)green, (Int16)blue);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3svEXT((Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3svEXT((Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void SecondaryColor3(Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glSecondaryColor3svEXT((Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(Byte red, Byte green, Byte blue)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSecondaryColor3ubEXT((Byte)red, (Byte)green, (Byte)blue);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(Byte[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3ubvEXT((Byte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(ref Byte v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3ubvEXT((Byte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void SecondaryColor3(Byte* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glSecondaryColor3ubvEXT((Byte*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(UInt32 red, UInt32 green, UInt32 blue)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSecondaryColor3uiEXT((UInt32)red, (UInt32)green, (UInt32)blue);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(UInt32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3uivEXT((UInt32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(ref UInt32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3uivEXT((UInt32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void SecondaryColor3(UInt32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glSecondaryColor3uivEXT((UInt32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(UInt16 red, UInt16 green, UInt16 blue)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSecondaryColor3usEXT((UInt16)red, (UInt16)green, (UInt16)blue);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(UInt16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt16* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3usvEXT((UInt16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3(ref UInt16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt16* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3usvEXT((UInt16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void SecondaryColor3(UInt16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glSecondaryColor3usvEXT((UInt16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColorPointer(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSecondaryColorPointerEXT((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColorPointer<T3>(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, T3[] pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSecondaryColorPointerEXT((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColorPointer<T3>(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, T3[,] pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSecondaryColorPointerEXT((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColorPointer<T3>(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, T3[,,] pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSecondaryColorPointerEXT((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColorPointer<T3>(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, ref T3 pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSecondaryColorPointerEXT((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T3)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SeparableFilter2D(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, IntPtr column)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSeparableFilter2DEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SeparableFilter2D<T7>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, T7[] column)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSeparableFilter2DEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        column_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SeparableFilter2D<T7>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, T7[,] column)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSeparableFilter2DEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        column_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SeparableFilter2D<T7>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, T7[,,] column)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSeparableFilter2DEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        column_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SeparableFilter2D<T7>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr row, ref T7 column)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSeparableFilter2DEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row, (IntPtr)column_ptr.AddrOfPinnedObject());
                        column = (T7)column_ptr.Target;
                    }
                    finally
                    {
                        column_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SeparableFilter2D<T6,T7>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T6[] row, T7[,,] column)
                where T6 : struct
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                    GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSeparableFilter2DEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        row_ptr.Free();
                        column_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SeparableFilter2D<T6,T7>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T6[,] row, T7[,,] column)
                where T6 : struct
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                    GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSeparableFilter2DEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        row_ptr.Free();
                        column_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SeparableFilter2D<T6,T7>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T6[,,] row, T7[,,] column)
                where T6 : struct
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                    GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSeparableFilter2DEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        row_ptr.Free();
                        column_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SeparableFilter2D<T6,T7>(Chela.Graphics.GL2.ExtConvolution target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T6 row, T7[,,] column)
                where T6 : struct
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle row_ptr = GCHandle.Alloc(row, GCHandleType.Pinned);
                    GCHandle column_ptr = GCHandle.Alloc(column, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSeparableFilter2DEXT((Chela.Graphics.GL2.ExtConvolution)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)row_ptr.AddrOfPinnedObject(), (IntPtr)column_ptr.AddrOfPinnedObject());
                        row = (T6)row_ptr.Target;
                    }
                    finally
                    {
                        row_ptr.Free();
                        column_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetInvariant(Int32 id, Chela.Graphics.GL2.ExtVertexShader type, IntPtr addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSetInvariantEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (IntPtr)addr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetInvariant<T2>(Int32 id, Chela.Graphics.GL2.ExtVertexShader type, T2[] addr)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSetInvariantEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetInvariant<T2>(Int32 id, Chela.Graphics.GL2.ExtVertexShader type, T2[,] addr)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSetInvariantEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetInvariant<T2>(Int32 id, Chela.Graphics.GL2.ExtVertexShader type, T2[,,] addr)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSetInvariantEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetInvariant<T2>(Int32 id, Chela.Graphics.GL2.ExtVertexShader type, ref T2 addr)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSetInvariantEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                        addr = (T2)addr_ptr.Target;
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetInvariant(UInt32 id, Chela.Graphics.GL2.ExtVertexShader type, IntPtr addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSetInvariantEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (IntPtr)addr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetInvariant<T2>(UInt32 id, Chela.Graphics.GL2.ExtVertexShader type, T2[] addr)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSetInvariantEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetInvariant<T2>(UInt32 id, Chela.Graphics.GL2.ExtVertexShader type, T2[,] addr)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSetInvariantEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetInvariant<T2>(UInt32 id, Chela.Graphics.GL2.ExtVertexShader type, T2[,,] addr)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSetInvariantEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetInvariant<T2>(UInt32 id, Chela.Graphics.GL2.ExtVertexShader type, ref T2 addr)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSetInvariantEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                        addr = (T2)addr_ptr.Target;
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetLocalConstant(Int32 id, Chela.Graphics.GL2.ExtVertexShader type, IntPtr addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSetLocalConstantEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (IntPtr)addr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetLocalConstant<T2>(Int32 id, Chela.Graphics.GL2.ExtVertexShader type, T2[] addr)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSetLocalConstantEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetLocalConstant<T2>(Int32 id, Chela.Graphics.GL2.ExtVertexShader type, T2[,] addr)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSetLocalConstantEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetLocalConstant<T2>(Int32 id, Chela.Graphics.GL2.ExtVertexShader type, T2[,,] addr)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSetLocalConstantEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetLocalConstant<T2>(Int32 id, Chela.Graphics.GL2.ExtVertexShader type, ref T2 addr)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSetLocalConstantEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                        addr = (T2)addr_ptr.Target;
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetLocalConstant(UInt32 id, Chela.Graphics.GL2.ExtVertexShader type, IntPtr addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSetLocalConstantEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (IntPtr)addr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetLocalConstant<T2>(UInt32 id, Chela.Graphics.GL2.ExtVertexShader type, T2[] addr)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSetLocalConstantEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetLocalConstant<T2>(UInt32 id, Chela.Graphics.GL2.ExtVertexShader type, T2[,] addr)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSetLocalConstantEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetLocalConstant<T2>(UInt32 id, Chela.Graphics.GL2.ExtVertexShader type, T2[,,] addr)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSetLocalConstantEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetLocalConstant<T2>(UInt32 id, Chela.Graphics.GL2.ExtVertexShader type, ref T2 addr)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSetLocalConstantEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (IntPtr)addr_ptr.AddrOfPinnedObject());
                        addr = (T2)addr_ptr.Target;
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ShaderOp1(Chela.Graphics.GL2.ExtVertexShader op, Int32 res, Int32 arg1)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glShaderOp1EXT((Chela.Graphics.GL2.ExtVertexShader)op, (UInt32)res, (UInt32)arg1);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ShaderOp1(Chela.Graphics.GL2.ExtVertexShader op, UInt32 res, UInt32 arg1)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glShaderOp1EXT((Chela.Graphics.GL2.ExtVertexShader)op, (UInt32)res, (UInt32)arg1);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ShaderOp2(Chela.Graphics.GL2.ExtVertexShader op, Int32 res, Int32 arg1, Int32 arg2)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glShaderOp2EXT((Chela.Graphics.GL2.ExtVertexShader)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ShaderOp2(Chela.Graphics.GL2.ExtVertexShader op, UInt32 res, UInt32 arg1, UInt32 arg2)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glShaderOp2EXT((Chela.Graphics.GL2.ExtVertexShader)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ShaderOp3(Chela.Graphics.GL2.ExtVertexShader op, Int32 res, Int32 arg1, Int32 arg2, Int32 arg3)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glShaderOp3EXT((Chela.Graphics.GL2.ExtVertexShader)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2, (UInt32)arg3);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ShaderOp3(Chela.Graphics.GL2.ExtVertexShader op, UInt32 res, UInt32 arg1, UInt32 arg2, UInt32 arg3)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glShaderOp3EXT((Chela.Graphics.GL2.ExtVertexShader)op, (UInt32)res, (UInt32)arg1, (UInt32)arg2, (UInt32)arg3);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void StencilClearTag(Int32 stencilTagBits, Int32 stencilClearTag)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glStencilClearTagEXT((Int32)stencilTagBits, (UInt32)stencilClearTag);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void StencilClearTag(Int32 stencilTagBits, UInt32 stencilClearTag)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glStencilClearTagEXT((Int32)stencilTagBits, (UInt32)stencilClearTag);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Swizzle(Int32 res, Int32 @in, Chela.Graphics.GL2.ExtVertexShader outX, Chela.Graphics.GL2.ExtVertexShader outY, Chela.Graphics.GL2.ExtVertexShader outZ, Chela.Graphics.GL2.ExtVertexShader outW)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSwizzleEXT((UInt32)res, (UInt32)@in, (Chela.Graphics.GL2.ExtVertexShader)outX, (Chela.Graphics.GL2.ExtVertexShader)outY, (Chela.Graphics.GL2.ExtVertexShader)outZ, (Chela.Graphics.GL2.ExtVertexShader)outW);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Swizzle(UInt32 res, UInt32 @in, Chela.Graphics.GL2.ExtVertexShader outX, Chela.Graphics.GL2.ExtVertexShader outY, Chela.Graphics.GL2.ExtVertexShader outZ, Chela.Graphics.GL2.ExtVertexShader outW)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSwizzleEXT((UInt32)res, (UInt32)@in, (Chela.Graphics.GL2.ExtVertexShader)outX, (Chela.Graphics.GL2.ExtVertexShader)outY, (Chela.Graphics.GL2.ExtVertexShader)outZ, (Chela.Graphics.GL2.ExtVertexShader)outW);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Tangent3(Byte tx, Byte ty, Byte tz)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTangent3bEXT((SByte)tx, (SByte)ty, (SByte)tz);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Tangent3(SByte tx, SByte ty, SByte tz)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTangent3bEXT((SByte)tx, (SByte)ty, (SByte)tz);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Tangent3(Byte[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glTangent3bvEXT((SByte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Tangent3(ref Byte v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glTangent3bvEXT((SByte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Tangent3(Byte* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTangent3bvEXT((SByte*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Tangent3(SByte[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (SByte* v_ptr = v)
                    {
                        Delegates.glTangent3bvEXT((SByte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Tangent3(ref SByte v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (SByte* v_ptr = &v)
                    {
                        Delegates.glTangent3bvEXT((SByte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Tangent3(SByte* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTangent3bvEXT((SByte*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Tangent3(Double tx, Double ty, Double tz)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTangent3dEXT((Double)tx, (Double)ty, (Double)tz);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Tangent3(Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glTangent3dvEXT((Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Tangent3(ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glTangent3dvEXT((Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Tangent3(Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTangent3dvEXT((Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Tangent3(Single tx, Single ty, Single tz)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTangent3fEXT((Single)tx, (Single)ty, (Single)tz);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Tangent3(Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glTangent3fvEXT((Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Tangent3(ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glTangent3fvEXT((Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Tangent3(Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTangent3fvEXT((Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Tangent3(Int32 tx, Int32 ty, Int32 tz)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTangent3iEXT((Int32)tx, (Int32)ty, (Int32)tz);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Tangent3(Int32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glTangent3ivEXT((Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Tangent3(ref Int32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glTangent3ivEXT((Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Tangent3(Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTangent3ivEXT((Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Tangent3(Int16 tx, Int16 ty, Int16 tz)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTangent3sEXT((Int16)tx, (Int16)ty, (Int16)tz);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Tangent3(Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glTangent3svEXT((Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Tangent3(ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glTangent3svEXT((Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Tangent3(Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTangent3svEXT((Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TangentPointer(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTangentPointerEXT((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TangentPointer<T2>(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, T2[] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTangentPointerEXT((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TangentPointer<T2>(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, T2[,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTangentPointerEXT((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TangentPointer<T2>(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, T2[,,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTangentPointerEXT((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TangentPointer<T2>(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, ref T2 pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTangentPointerEXT((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T2)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexBuffer(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.ExtTextureBufferObject internalformat, Int32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexBufferEXT((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.ExtTextureBufferObject)internalformat, (UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexBuffer(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.ExtTextureBufferObject internalformat, UInt32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexBufferEXT((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.ExtTextureBufferObject)internalformat, (UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoordPointer(Int32 size, Chela.Graphics.GL2.TexCoordPointerType type, Int32 stride, Int32 count, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexCoordPointerEXT((Int32)size, (Chela.Graphics.GL2.TexCoordPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoordPointer<T4>(Int32 size, Chela.Graphics.GL2.TexCoordPointerType type, Int32 stride, Int32 count, T4[] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexCoordPointerEXT((Int32)size, (Chela.Graphics.GL2.TexCoordPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoordPointer<T4>(Int32 size, Chela.Graphics.GL2.TexCoordPointerType type, Int32 stride, Int32 count, T4[,] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexCoordPointerEXT((Int32)size, (Chela.Graphics.GL2.TexCoordPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoordPointer<T4>(Int32 size, Chela.Graphics.GL2.TexCoordPointerType type, Int32 stride, Int32 count, T4[,,] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexCoordPointerEXT((Int32)size, (Chela.Graphics.GL2.TexCoordPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoordPointer<T4>(Int32 size, Chela.Graphics.GL2.TexCoordPointerType type, Int32 stride, Int32 count, ref T4 pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexCoordPointerEXT((Int32)size, (Chela.Graphics.GL2.TexCoordPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T4)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexImage3D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexImage3DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexImage3D<T9>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexImage3DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexImage3D<T9>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[,] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexImage3DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexImage3D<T9>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[,,] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexImage3DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexImage3D<T9>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T9 pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexImage3DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T9)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glTexParameterIivEXT((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, ref Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glTexParameterIivEXT((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTexParameterIivEXT((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, UInt32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glTexParameterIuivEXT((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, ref UInt32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glTexParameterIuivEXT((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TexParameterI(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, UInt32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTexParameterIuivEXT((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (UInt32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage1D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexSubImage1DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T6[] pixels)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage1DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T6[,] pixels)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage1DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T6[,,] pixels)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage1DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage1D<T6>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T6 pixels)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage1DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T6)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage2D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexSubImage2DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage2D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T8[] pixels)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage2DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage2D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T8[,] pixels)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage2DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage2D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T8[,,] pixels)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage2DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage2D<T8>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T8 pixels)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage2DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T8)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage3D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexSubImage3DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage3D<T10>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T10[] pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage3DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage3D<T10>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T10[,] pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage3DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage3D<T10>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T10[,,] pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage3DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage3D<T10>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T10 pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage3DEXT((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T10)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureBuffer(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureBufferEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureBuffer(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, UInt32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureBufferEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage1D(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage1D<T8>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T8[] pixels)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage1D<T8>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T8[,] pixels)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage1D<T8>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T8[,,] pixels)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage1D<T8>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T8 pixels)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T8)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage1D(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage1D<T8>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T8[] pixels)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage1D<T8>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T8[,] pixels)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage1D<T8>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T8[,,] pixels)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage1D<T8>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T8 pixels)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T8)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage2D(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage2D<T9>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage2D<T9>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[,] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage2D<T9>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[,,] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage2D<T9>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T9 pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T9)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage2D(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage2D<T9>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage2D<T9>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[,] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage2D<T9>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[,,] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage2D<T9>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T9 pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T9)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage3D(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage3D<T10>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T10[] pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage3D<T10>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T10[,] pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage3D<T10>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T10[,,] pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage3D<T10>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T10 pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T10)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage3D(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage3D<T10>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T10[] pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage3D<T10>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T10[,] pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage3D<T10>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T10[,,] pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureImage3D<T10>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.ExtDirectStateAccess internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T10 pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.ExtDirectStateAccess)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T10)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureLight(Chela.Graphics.GL2.ExtLightTexture pname)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureLightEXT((Chela.Graphics.GL2.ExtLightTexture)pname);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureMaterial(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter mode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureMaterialEXT((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)mode);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureNormal(Chela.Graphics.GL2.ExtTexturePerturbNormal mode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureNormalEXT((Chela.Graphics.GL2.ExtTexturePerturbNormal)mode);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureParameter(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Single param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureParameterfEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Single)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureParameter(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Single param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureParameterfEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Single)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureParameter(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterfvEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TextureParameter(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTextureParameterfvEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureParameter(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterfvEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TextureParameter(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTextureParameterfvEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureParameter(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Int32 param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureParameteriEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureParameter(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Int32 param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureParameteriEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureParameterI(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterIivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureParameterI(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, ref Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glTextureParameterIivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TextureParameterI(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTextureParameterIivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureParameterI(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterIivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureParameterI(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, ref Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glTextureParameterIivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TextureParameterI(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTextureParameterIivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureParameterI(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, UInt32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterIuivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureParameterI(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, ref UInt32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glTextureParameterIuivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TextureParameterI(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, UInt32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTextureParameterIuivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (UInt32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureParameter(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TextureParameter(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTextureParameterivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureParameter(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glTextureParameterivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TextureParameter(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.TextureParameterName pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTextureParameterivEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.TextureParameterName)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureRenderbuffer(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 renderbuffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureRenderbufferEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (UInt32)renderbuffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureRenderbuffer(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, UInt32 renderbuffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureRenderbufferEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (UInt32)renderbuffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage1D(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureSubImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage1D<T7>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T7[] pixels)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage1D<T7>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T7[,] pixels)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage1D<T7>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T7[,,] pixels)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage1D<T7>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T7 pixels)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T7)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage1D(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureSubImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage1D<T7>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T7[] pixels)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage1D<T7>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T7[,] pixels)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage1D<T7>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T7[,,] pixels)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage1D<T7>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T7 pixels)
                where T7 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage1DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T7)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage2D(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureSubImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage2D<T9>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage2D<T9>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[,] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage2D<T9>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[,,] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage2D<T9>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T9 pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T9)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage2D(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureSubImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage2D<T9>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage2D<T9>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[,] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage2D<T9>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T9[,,] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage2D<T9>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T9 pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage2DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T9)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage3D(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureSubImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage3D<T11>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T11[] pixels)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage3D<T11>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T11[,] pixels)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage3D<T11>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T11[,,] pixels)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage3D<T11>(Int32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T11 pixels)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T11)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage3D(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureSubImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage3D<T11>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T11[] pixels)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage3D<T11>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T11[,] pixels)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage3D<T11>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T11[,,] pixels)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureSubImage3D<T11>(UInt32 texture, Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T11 pixels)
                where T11 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTextureSubImage3DEXT((UInt32)texture, (Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T11)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TransformFeedbackVaryings(Int32 program, Int32 count, String[] varyings, Chela.Graphics.GL2.ExtTransformFeedback bufferMode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    StringHandle varyings_ptr = StringHandle.Alloc(varyings);
                    try
                    {
                        Delegates.glTransformFeedbackVaryingsEXT((UInt32)program, (Int32)count, varyings_ptr.ArrayAddress, (Chela.Graphics.GL2.ExtTransformFeedback)bufferMode);
                    }
                    finally
                    {
                        varyings_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TransformFeedbackVaryings(UInt32 program, Int32 count, String[] varyings, Chela.Graphics.GL2.ExtTransformFeedback bufferMode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    StringHandle varyings_ptr = StringHandle.Alloc(varyings);
                    try
                    {
                        Delegates.glTransformFeedbackVaryingsEXT((UInt32)program, (Int32)count, varyings_ptr.ArrayAddress, (Chela.Graphics.GL2.ExtTransformFeedback)bufferMode);
                    }
                    finally
                    {
                        varyings_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform1(Int32 location, Int32 v0)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUniform1uiEXT((Int32)location, (UInt32)v0);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform1(Int32 location, UInt32 v0)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUniform1uiEXT((Int32)location, (UInt32)v0);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform1(Int32 location, Int32 count, Int32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform1(Int32 location, Int32 count, ref Int32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Uniform1(Int32 location, Int32 count, Int32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform1(Int32 location, Int32 count, UInt32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform1(Int32 location, Int32 count, ref UInt32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Uniform1(Int32 location, Int32 count, UInt32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glUniform1uivEXT((Int32)location, (Int32)count, (UInt32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform2(Int32 location, Int32 v0, Int32 v1)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUniform2uiEXT((Int32)location, (UInt32)v0, (UInt32)v1);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform2(Int32 location, UInt32 v0, UInt32 v1)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUniform2uiEXT((Int32)location, (UInt32)v0, (UInt32)v1);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform2(Int32 location, Int32 count, Int32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Uniform2(Int32 location, Int32 count, Int32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform2(Int32 location, Int32 count, UInt32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform2(Int32 location, Int32 count, ref UInt32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Uniform2(Int32 location, Int32 count, UInt32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glUniform2uivEXT((Int32)location, (Int32)count, (UInt32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform3(Int32 location, Int32 v0, Int32 v1, Int32 v2)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUniform3uiEXT((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform3(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUniform3uiEXT((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform3(Int32 location, Int32 count, Int32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform3(Int32 location, Int32 count, ref Int32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Uniform3(Int32 location, Int32 count, Int32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform3(Int32 location, Int32 count, UInt32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform3(Int32 location, Int32 count, ref UInt32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Uniform3(Int32 location, Int32 count, UInt32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glUniform3uivEXT((Int32)location, (Int32)count, (UInt32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform4(Int32 location, Int32 v0, Int32 v1, Int32 v2, Int32 v3)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUniform4uiEXT((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2, (UInt32)v3);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform4(Int32 location, UInt32 v0, UInt32 v1, UInt32 v2, UInt32 v3)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUniform4uiEXT((Int32)location, (UInt32)v0, (UInt32)v1, (UInt32)v2, (UInt32)v3);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform4(Int32 location, Int32 count, Int32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = value)
                    {
                        Delegates.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform4(Int32 location, Int32 count, ref Int32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* value_ptr = &value)
                    {
                        Delegates.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Uniform4(Int32 location, Int32 count, Int32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform4(Int32 location, Int32 count, UInt32[] value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* value_ptr = value)
                    {
                        Delegates.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Uniform4(Int32 location, Int32 count, ref UInt32 value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* value_ptr = &value)
                    {
                        Delegates.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Uniform4(Int32 location, Int32 count, UInt32* value)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glUniform4uivEXT((Int32)location, (Int32)count, (UInt32*)value);
                #if DEBUG
                }
                #endif
            }

            public static 
            void UniformBuffer(Int32 program, Int32 location, Int32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUniformBufferEXT((UInt32)program, (Int32)location, (UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void UniformBuffer(UInt32 program, Int32 location, UInt32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUniformBufferEXT((UInt32)program, (Int32)location, (UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void UnlockArrays()
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glUnlockArraysEXT();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool UnmapNamedBuffer(Int32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glUnmapNamedBufferEXT((UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool UnmapNamedBuffer(UInt32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glUnmapNamedBufferEXT((UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(UInt32 id, SByte[] addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (SByte* addr_ptr = addr)
                    {
                        Delegates.glVariantbvEXT((UInt32)id, (SByte*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(UInt32 id, ref SByte addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (SByte* addr_ptr = &addr)
                    {
                        Delegates.glVariantbvEXT((UInt32)id, (SByte*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Variant(UInt32 id, SByte* addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVariantbvEXT((UInt32)id, (SByte*)addr);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(Int32 id, Double[] addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* addr_ptr = addr)
                    {
                        Delegates.glVariantdvEXT((UInt32)id, (Double*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(Int32 id, ref Double addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* addr_ptr = &addr)
                    {
                        Delegates.glVariantdvEXT((UInt32)id, (Double*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Variant(Int32 id, Double* addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVariantdvEXT((UInt32)id, (Double*)addr);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(UInt32 id, Double[] addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* addr_ptr = addr)
                    {
                        Delegates.glVariantdvEXT((UInt32)id, (Double*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(UInt32 id, ref Double addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* addr_ptr = &addr)
                    {
                        Delegates.glVariantdvEXT((UInt32)id, (Double*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Variant(UInt32 id, Double* addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVariantdvEXT((UInt32)id, (Double*)addr);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(Int32 id, Single[] addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* addr_ptr = addr)
                    {
                        Delegates.glVariantfvEXT((UInt32)id, (Single*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(Int32 id, ref Single addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* addr_ptr = &addr)
                    {
                        Delegates.glVariantfvEXT((UInt32)id, (Single*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Variant(Int32 id, Single* addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVariantfvEXT((UInt32)id, (Single*)addr);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(UInt32 id, Single[] addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* addr_ptr = addr)
                    {
                        Delegates.glVariantfvEXT((UInt32)id, (Single*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(UInt32 id, ref Single addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* addr_ptr = &addr)
                    {
                        Delegates.glVariantfvEXT((UInt32)id, (Single*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Variant(UInt32 id, Single* addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVariantfvEXT((UInt32)id, (Single*)addr);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(Int32 id, Int32[] addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* addr_ptr = addr)
                    {
                        Delegates.glVariantivEXT((UInt32)id, (Int32*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(Int32 id, ref Int32 addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* addr_ptr = &addr)
                    {
                        Delegates.glVariantivEXT((UInt32)id, (Int32*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Variant(Int32 id, Int32* addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVariantivEXT((UInt32)id, (Int32*)addr);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(UInt32 id, Int32[] addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* addr_ptr = addr)
                    {
                        Delegates.glVariantivEXT((UInt32)id, (Int32*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(UInt32 id, ref Int32 addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* addr_ptr = &addr)
                    {
                        Delegates.glVariantivEXT((UInt32)id, (Int32*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Variant(UInt32 id, Int32* addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVariantivEXT((UInt32)id, (Int32*)addr);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VariantPointer(Int32 id, Chela.Graphics.GL2.ExtVertexShader type, Int32 stride, IntPtr addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVariantPointerEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VariantPointer<T3>(Int32 id, Chela.Graphics.GL2.ExtVertexShader type, Int32 stride, T3[] addr)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVariantPointerEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VariantPointer<T3>(Int32 id, Chela.Graphics.GL2.ExtVertexShader type, Int32 stride, T3[,] addr)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVariantPointerEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VariantPointer<T3>(Int32 id, Chela.Graphics.GL2.ExtVertexShader type, Int32 stride, T3[,,] addr)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVariantPointerEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VariantPointer<T3>(Int32 id, Chela.Graphics.GL2.ExtVertexShader type, Int32 stride, ref T3 addr)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVariantPointerEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                        addr = (T3)addr_ptr.Target;
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VariantPointer(UInt32 id, Chela.Graphics.GL2.ExtVertexShader type, UInt32 stride, IntPtr addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVariantPointerEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VariantPointer<T3>(UInt32 id, Chela.Graphics.GL2.ExtVertexShader type, UInt32 stride, T3[] addr)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVariantPointerEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VariantPointer<T3>(UInt32 id, Chela.Graphics.GL2.ExtVertexShader type, UInt32 stride, T3[,] addr)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVariantPointerEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VariantPointer<T3>(UInt32 id, Chela.Graphics.GL2.ExtVertexShader type, UInt32 stride, T3[,,] addr)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVariantPointerEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VariantPointer<T3>(UInt32 id, Chela.Graphics.GL2.ExtVertexShader type, UInt32 stride, ref T3 addr)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle addr_ptr = GCHandle.Alloc(addr, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVariantPointerEXT((UInt32)id, (Chela.Graphics.GL2.ExtVertexShader)type, (UInt32)stride, (IntPtr)addr_ptr.AddrOfPinnedObject());
                        addr = (T3)addr_ptr.Target;
                    }
                    finally
                    {
                        addr_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(Int32 id, Int16[] addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* addr_ptr = addr)
                    {
                        Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(Int32 id, ref Int16 addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* addr_ptr = &addr)
                    {
                        Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Variant(Int32 id, Int16* addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(UInt32 id, Int16[] addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* addr_ptr = addr)
                    {
                        Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(UInt32 id, ref Int16 addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* addr_ptr = &addr)
                    {
                        Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Variant(UInt32 id, Int16* addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVariantsvEXT((UInt32)id, (Int16*)addr);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(Int32 id, Byte[] addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* addr_ptr = addr)
                    {
                        Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(Int32 id, ref Byte addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* addr_ptr = &addr)
                    {
                        Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Variant(Int32 id, Byte* addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(UInt32 id, Byte[] addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* addr_ptr = addr)
                    {
                        Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(UInt32 id, ref Byte addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* addr_ptr = &addr)
                    {
                        Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Variant(UInt32 id, Byte* addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVariantubvEXT((UInt32)id, (Byte*)addr);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(UInt32 id, UInt32[] addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* addr_ptr = addr)
                    {
                        Delegates.glVariantuivEXT((UInt32)id, (UInt32*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(UInt32 id, ref UInt32 addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* addr_ptr = &addr)
                    {
                        Delegates.glVariantuivEXT((UInt32)id, (UInt32*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Variant(UInt32 id, UInt32* addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVariantuivEXT((UInt32)id, (UInt32*)addr);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(UInt32 id, UInt16[] addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt16* addr_ptr = addr)
                    {
                        Delegates.glVariantusvEXT((UInt32)id, (UInt16*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Variant(UInt32 id, ref UInt16 addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt16* addr_ptr = &addr)
                    {
                        Delegates.glVariantusvEXT((UInt32)id, (UInt16*)addr_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Variant(UInt32 id, UInt16* addr)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVariantusvEXT((UInt32)id, (UInt16*)addr);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI1(Int32 index, Int32 x)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttribI1iEXT((UInt32)index, (Int32)x);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI1(UInt32 index, Int32 x)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttribI1iEXT((UInt32)index, (Int32)x);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribI1(Int32 index, Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribI1ivEXT((UInt32)index, (Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribI1(UInt32 index, Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribI1ivEXT((UInt32)index, (Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI1(UInt32 index, UInt32 x)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttribI1uiEXT((UInt32)index, (UInt32)x);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribI1(UInt32 index, UInt32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribI1uivEXT((UInt32)index, (UInt32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI2(Int32 index, Int32 x, Int32 y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttribI2iEXT((UInt32)index, (Int32)x, (Int32)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI2(UInt32 index, Int32 x, Int32 y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttribI2iEXT((UInt32)index, (Int32)x, (Int32)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI2(Int32 index, Int32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI2(Int32 index, ref Int32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribI2(Int32 index, Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI2(UInt32 index, Int32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI2(UInt32 index, ref Int32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribI2(UInt32 index, Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribI2ivEXT((UInt32)index, (Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI2(UInt32 index, UInt32 x, UInt32 y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttribI2uiEXT((UInt32)index, (UInt32)x, (UInt32)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI2(UInt32 index, UInt32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI2uivEXT((UInt32)index, (UInt32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI2(UInt32 index, ref UInt32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI2uivEXT((UInt32)index, (UInt32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribI2(UInt32 index, UInt32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribI2uivEXT((UInt32)index, (UInt32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI3(Int32 index, Int32 x, Int32 y, Int32 z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttribI3iEXT((UInt32)index, (Int32)x, (Int32)y, (Int32)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI3(UInt32 index, Int32 x, Int32 y, Int32 z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttribI3iEXT((UInt32)index, (Int32)x, (Int32)y, (Int32)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI3(Int32 index, Int32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI3(Int32 index, ref Int32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribI3(Int32 index, Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI3(UInt32 index, Int32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI3(UInt32 index, ref Int32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribI3(UInt32 index, Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribI3ivEXT((UInt32)index, (Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI3(UInt32 index, UInt32 x, UInt32 y, UInt32 z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttribI3uiEXT((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI3(UInt32 index, UInt32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI3uivEXT((UInt32)index, (UInt32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI3(UInt32 index, ref UInt32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI3uivEXT((UInt32)index, (UInt32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribI3(UInt32 index, UInt32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribI3uivEXT((UInt32)index, (UInt32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI4(UInt32 index, SByte[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (SByte* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4bvEXT((UInt32)index, (SByte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI4(UInt32 index, ref SByte v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (SByte* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4bvEXT((UInt32)index, (SByte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribI4(UInt32 index, SByte* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribI4bvEXT((UInt32)index, (SByte*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI4(Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttribI4iEXT((UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI4(UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttribI4iEXT((UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI4(Int32 index, Int32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI4(Int32 index, ref Int32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribI4(Int32 index, Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI4(UInt32 index, Int32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI4(UInt32 index, ref Int32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribI4(UInt32 index, Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribI4ivEXT((UInt32)index, (Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI4(Int32 index, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI4(Int32 index, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribI4(Int32 index, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI4(UInt32 index, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI4(UInt32 index, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribI4(UInt32 index, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribI4svEXT((UInt32)index, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI4(Int32 index, Byte[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI4(Int32 index, ref Byte v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribI4(Int32 index, Byte* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI4(UInt32 index, Byte[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI4(UInt32 index, ref Byte v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribI4(UInt32 index, Byte* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribI4ubvEXT((UInt32)index, (Byte*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI4(UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttribI4uiEXT((UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI4(UInt32 index, UInt32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4uivEXT((UInt32)index, (UInt32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI4(UInt32 index, ref UInt32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4uivEXT((UInt32)index, (UInt32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribI4(UInt32 index, UInt32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribI4uivEXT((UInt32)index, (UInt32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI4(UInt32 index, UInt16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt16* v_ptr = v)
                    {
                        Delegates.glVertexAttribI4usvEXT((UInt32)index, (UInt16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribI4(UInt32 index, ref UInt16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribI4usvEXT((UInt32)index, (UInt16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribI4(UInt32 index, UInt16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribI4usvEXT((UInt32)index, (UInt16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribIPointer(Int32 index, Int32 size, Chela.Graphics.GL2.NvVertexProgram4 type, Int32 stride, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (Chela.Graphics.GL2.NvVertexProgram4)type, (Int32)stride, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribIPointer<T4>(Int32 index, Int32 size, Chela.Graphics.GL2.NvVertexProgram4 type, Int32 stride, T4[] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (Chela.Graphics.GL2.NvVertexProgram4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribIPointer<T4>(Int32 index, Int32 size, Chela.Graphics.GL2.NvVertexProgram4 type, Int32 stride, T4[,] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (Chela.Graphics.GL2.NvVertexProgram4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribIPointer<T4>(Int32 index, Int32 size, Chela.Graphics.GL2.NvVertexProgram4 type, Int32 stride, T4[,,] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (Chela.Graphics.GL2.NvVertexProgram4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribIPointer<T4>(Int32 index, Int32 size, Chela.Graphics.GL2.NvVertexProgram4 type, Int32 stride, ref T4 pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (Chela.Graphics.GL2.NvVertexProgram4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T4)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribIPointer(UInt32 index, Int32 size, Chela.Graphics.GL2.NvVertexProgram4 type, Int32 stride, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (Chela.Graphics.GL2.NvVertexProgram4)type, (Int32)stride, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribIPointer<T4>(UInt32 index, Int32 size, Chela.Graphics.GL2.NvVertexProgram4 type, Int32 stride, T4[] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (Chela.Graphics.GL2.NvVertexProgram4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribIPointer<T4>(UInt32 index, Int32 size, Chela.Graphics.GL2.NvVertexProgram4 type, Int32 stride, T4[,] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (Chela.Graphics.GL2.NvVertexProgram4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribIPointer<T4>(UInt32 index, Int32 size, Chela.Graphics.GL2.NvVertexProgram4 type, Int32 stride, T4[,,] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (Chela.Graphics.GL2.NvVertexProgram4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribIPointer<T4>(UInt32 index, Int32 size, Chela.Graphics.GL2.NvVertexProgram4 type, Int32 stride, ref T4 pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribIPointerEXT((UInt32)index, (Int32)size, (Chela.Graphics.GL2.NvVertexProgram4)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T4)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexPointer(Int32 size, Chela.Graphics.GL2.VertexPointerType type, Int32 stride, Int32 count, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexPointerEXT((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexPointer<T4>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, Int32 stride, Int32 count, T4[] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexPointerEXT((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexPointer<T4>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, Int32 stride, Int32 count, T4[,] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexPointerEXT((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexPointer<T4>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, Int32 stride, Int32 count, T4[,,] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexPointerEXT((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexPointer<T4>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, Int32 stride, Int32 count, ref T4 pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexPointerEXT((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (Int32)stride, (Int32)count, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T4)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexWeight(Single weight)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexWeightfEXT((Single)weight);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexWeight(Single* weight)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexWeightfvEXT((Single*)weight);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexWeightPointer(Int32 size, Chela.Graphics.GL2.ExtVertexWeighting type, Int32 stride, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexWeightPointerEXT((Int32)size, (Chela.Graphics.GL2.ExtVertexWeighting)type, (Int32)stride, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexWeightPointer<T3>(Int32 size, Chela.Graphics.GL2.ExtVertexWeighting type, Int32 stride, T3[] pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexWeightPointerEXT((Int32)size, (Chela.Graphics.GL2.ExtVertexWeighting)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexWeightPointer<T3>(Int32 size, Chela.Graphics.GL2.ExtVertexWeighting type, Int32 stride, T3[,] pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexWeightPointerEXT((Int32)size, (Chela.Graphics.GL2.ExtVertexWeighting)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexWeightPointer<T3>(Int32 size, Chela.Graphics.GL2.ExtVertexWeighting type, Int32 stride, T3[,,] pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexWeightPointerEXT((Int32)size, (Chela.Graphics.GL2.ExtVertexWeighting)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexWeightPointer<T3>(Int32 size, Chela.Graphics.GL2.ExtVertexWeighting type, Int32 stride, ref T3 pointer)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexWeightPointerEXT((Int32)size, (Chela.Graphics.GL2.ExtVertexWeighting)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T3)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WriteMask(Int32 res, Int32 @in, Chela.Graphics.GL2.ExtVertexShader outX, Chela.Graphics.GL2.ExtVertexShader outY, Chela.Graphics.GL2.ExtVertexShader outZ, Chela.Graphics.GL2.ExtVertexShader outW)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glWriteMaskEXT((UInt32)res, (UInt32)@in, (Chela.Graphics.GL2.ExtVertexShader)outX, (Chela.Graphics.GL2.ExtVertexShader)outY, (Chela.Graphics.GL2.ExtVertexShader)outZ, (Chela.Graphics.GL2.ExtVertexShader)outW);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WriteMask(UInt32 res, UInt32 @in, Chela.Graphics.GL2.ExtVertexShader outX, Chela.Graphics.GL2.ExtVertexShader outY, Chela.Graphics.GL2.ExtVertexShader outZ, Chela.Graphics.GL2.ExtVertexShader outW)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glWriteMaskEXT((UInt32)res, (UInt32)@in, (Chela.Graphics.GL2.ExtVertexShader)outX, (Chela.Graphics.GL2.ExtVertexShader)outY, (Chela.Graphics.GL2.ExtVertexShader)outZ, (Chela.Graphics.GL2.ExtVertexShader)outW);
                }
                #if DEBUG
                }
                #endif
            }

        }

        public static partial class Gremedy
        {
            public static 
            void FrameTerminator()
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFrameTerminatorGREMEDY();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void StringMarker(Int32 len, IntPtr @string)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glStringMarkerGREMEDY((Int32)len, (IntPtr)@string);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void StringMarker<T1>(Int32 len, T1[] @string)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glStringMarkerGREMEDY((Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void StringMarker<T1>(Int32 len, T1[,] @string)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glStringMarkerGREMEDY((Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void StringMarker<T1>(Int32 len, T1[,,] @string)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glStringMarkerGREMEDY((Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void StringMarker<T1>(Int32 len, ref T1 @string)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @string_ptr = GCHandle.Alloc(@string, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glStringMarkerGREMEDY((Int32)len, (IntPtr)@string_ptr.AddrOfPinnedObject());
                        @string = (T1)@string_ptr.Target;
                    }
                    finally
                    {
                        @string_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

        }

        public static partial class HP
        {
            public static 
            void GetImageTransformParameter(Chela.Graphics.GL2.HpImageTransform target, Chela.Graphics.GL2.HpImageTransform pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetImageTransformParameterfvHP((Chela.Graphics.GL2.HpImageTransform)target, (Chela.Graphics.GL2.HpImageTransform)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetImageTransformParameter(Chela.Graphics.GL2.HpImageTransform target, Chela.Graphics.GL2.HpImageTransform pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetImageTransformParameterfvHP((Chela.Graphics.GL2.HpImageTransform)target, (Chela.Graphics.GL2.HpImageTransform)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetImageTransformParameter(Chela.Graphics.GL2.HpImageTransform target, Chela.Graphics.GL2.HpImageTransform pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetImageTransformParameterfvHP((Chela.Graphics.GL2.HpImageTransform)target, (Chela.Graphics.GL2.HpImageTransform)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetImageTransformParameter(Chela.Graphics.GL2.HpImageTransform target, Chela.Graphics.GL2.HpImageTransform pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetImageTransformParameterivHP((Chela.Graphics.GL2.HpImageTransform)target, (Chela.Graphics.GL2.HpImageTransform)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetImageTransformParameter(Chela.Graphics.GL2.HpImageTransform target, Chela.Graphics.GL2.HpImageTransform pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetImageTransformParameterivHP((Chela.Graphics.GL2.HpImageTransform)target, (Chela.Graphics.GL2.HpImageTransform)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetImageTransformParameter(Chela.Graphics.GL2.HpImageTransform target, Chela.Graphics.GL2.HpImageTransform pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetImageTransformParameterivHP((Chela.Graphics.GL2.HpImageTransform)target, (Chela.Graphics.GL2.HpImageTransform)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ImageTransformParameter(Chela.Graphics.GL2.HpImageTransform target, Chela.Graphics.GL2.HpImageTransform pname, Single param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glImageTransformParameterfHP((Chela.Graphics.GL2.HpImageTransform)target, (Chela.Graphics.GL2.HpImageTransform)pname, (Single)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ImageTransformParameter(Chela.Graphics.GL2.HpImageTransform target, Chela.Graphics.GL2.HpImageTransform pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glImageTransformParameterfvHP((Chela.Graphics.GL2.HpImageTransform)target, (Chela.Graphics.GL2.HpImageTransform)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ImageTransformParameter(Chela.Graphics.GL2.HpImageTransform target, Chela.Graphics.GL2.HpImageTransform pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glImageTransformParameterfvHP((Chela.Graphics.GL2.HpImageTransform)target, (Chela.Graphics.GL2.HpImageTransform)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ImageTransformParameter(Chela.Graphics.GL2.HpImageTransform target, Chela.Graphics.GL2.HpImageTransform pname, Int32 param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glImageTransformParameteriHP((Chela.Graphics.GL2.HpImageTransform)target, (Chela.Graphics.GL2.HpImageTransform)pname, (Int32)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ImageTransformParameter(Chela.Graphics.GL2.HpImageTransform target, Chela.Graphics.GL2.HpImageTransform pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glImageTransformParameterivHP((Chela.Graphics.GL2.HpImageTransform)target, (Chela.Graphics.GL2.HpImageTransform)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ImageTransformParameter(Chela.Graphics.GL2.HpImageTransform target, Chela.Graphics.GL2.HpImageTransform pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glImageTransformParameterivHP((Chela.Graphics.GL2.HpImageTransform)target, (Chela.Graphics.GL2.HpImageTransform)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

        }

        public static partial class Ibm
        {
            public static 
            void ColorPointerList(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, IntPtr pointer, Int32 ptrstride)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glColorPointerListIBM((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorPointerList<T3>(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, T3[] pointer, Int32 ptrstride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorPointerListIBM((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorPointerList<T3>(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, T3[,] pointer, Int32 ptrstride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorPointerListIBM((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorPointerList<T3>(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, T3[,,] pointer, Int32 ptrstride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorPointerListIBM((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorPointerList<T3>(Int32 size, Chela.Graphics.GL2.ColorPointerType type, Int32 stride, ref T3 pointer, Int32 ptrstride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorPointerListIBM((Int32)size, (Chela.Graphics.GL2.ColorPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                        pointer = (T3)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EdgeFlagPointerList(Int32 stride, bool[] pointer, Int32 ptrstride)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (bool* pointer_ptr = pointer)
                    {
                        Delegates.glEdgeFlagPointerListIBM((Int32)stride, (bool*)pointer_ptr, (Int32)ptrstride);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EdgeFlagPointerList(Int32 stride, ref bool pointer, Int32 ptrstride)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (bool* pointer_ptr = &pointer)
                    {
                        Delegates.glEdgeFlagPointerListIBM((Int32)stride, (bool*)pointer_ptr, (Int32)ptrstride);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void EdgeFlagPointerList(Int32 stride, bool* pointer, Int32 ptrstride)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glEdgeFlagPointerListIBM((Int32)stride, (bool*)pointer, (Int32)ptrstride);
                #if DEBUG
                }
                #endif
            }

            public static 
            void FogCoordPointerList(Chela.Graphics.GL2.IbmVertexArrayLists type, Int32 stride, IntPtr pointer, Int32 ptrstride)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFogCoordPointerListIBM((Chela.Graphics.GL2.IbmVertexArrayLists)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FogCoordPointerList<T2>(Chela.Graphics.GL2.IbmVertexArrayLists type, Int32 stride, T2[] pointer, Int32 ptrstride)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glFogCoordPointerListIBM((Chela.Graphics.GL2.IbmVertexArrayLists)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FogCoordPointerList<T2>(Chela.Graphics.GL2.IbmVertexArrayLists type, Int32 stride, T2[,] pointer, Int32 ptrstride)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glFogCoordPointerListIBM((Chela.Graphics.GL2.IbmVertexArrayLists)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FogCoordPointerList<T2>(Chela.Graphics.GL2.IbmVertexArrayLists type, Int32 stride, T2[,,] pointer, Int32 ptrstride)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glFogCoordPointerListIBM((Chela.Graphics.GL2.IbmVertexArrayLists)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FogCoordPointerList<T2>(Chela.Graphics.GL2.IbmVertexArrayLists type, Int32 stride, ref T2 pointer, Int32 ptrstride)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glFogCoordPointerListIBM((Chela.Graphics.GL2.IbmVertexArrayLists)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                        pointer = (T2)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void IndexPointerList(Chela.Graphics.GL2.IndexPointerType type, Int32 stride, IntPtr pointer, Int32 ptrstride)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glIndexPointerListIBM((Chela.Graphics.GL2.IndexPointerType)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void IndexPointerList<T2>(Chela.Graphics.GL2.IndexPointerType type, Int32 stride, T2[] pointer, Int32 ptrstride)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glIndexPointerListIBM((Chela.Graphics.GL2.IndexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void IndexPointerList<T2>(Chela.Graphics.GL2.IndexPointerType type, Int32 stride, T2[,] pointer, Int32 ptrstride)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glIndexPointerListIBM((Chela.Graphics.GL2.IndexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void IndexPointerList<T2>(Chela.Graphics.GL2.IndexPointerType type, Int32 stride, T2[,,] pointer, Int32 ptrstride)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glIndexPointerListIBM((Chela.Graphics.GL2.IndexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void IndexPointerList<T2>(Chela.Graphics.GL2.IndexPointerType type, Int32 stride, ref T2 pointer, Int32 ptrstride)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glIndexPointerListIBM((Chela.Graphics.GL2.IndexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                        pointer = (T2)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiModeDrawArrays(Chela.Graphics.GL2.BeginMode[] mode, Int32[] first, Int32[] count, Int32 primcount, Int32 modestride)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.GL2.BeginMode* mode_ptr = mode)
                    fixed (Int32* first_ptr = first)
                    fixed (Int32* count_ptr = count)
                    {
                        Delegates.glMultiModeDrawArraysIBM((Chela.Graphics.GL2.BeginMode*)mode_ptr, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiModeDrawArrays(ref Chela.Graphics.GL2.BeginMode mode, ref Int32 first, ref Int32 count, Int32 primcount, Int32 modestride)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.GL2.BeginMode* mode_ptr = &mode)
                    fixed (Int32* first_ptr = &first)
                    fixed (Int32* count_ptr = &count)
                    {
                        Delegates.glMultiModeDrawArraysIBM((Chela.Graphics.GL2.BeginMode*)mode_ptr, (Int32*)first_ptr, (Int32*)count_ptr, (Int32)primcount, (Int32)modestride);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiModeDrawArrays(Chela.Graphics.GL2.BeginMode* mode, Int32* first, Int32* count, Int32 primcount, Int32 modestride)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiModeDrawArraysIBM((Chela.Graphics.GL2.BeginMode*)mode, (Int32*)first, (Int32*)count, (Int32)primcount, (Int32)modestride);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiModeDrawElements(Chela.Graphics.GL2.BeginMode[] mode, Int32[] count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices, Int32 primcount, Int32 modestride)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.GL2.BeginMode* mode_ptr = mode)
                    fixed (Int32* count_ptr = count)
                    {
                        Delegates.glMultiModeDrawElementsIBM((Chela.Graphics.GL2.BeginMode*)mode_ptr, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices, (Int32)primcount, (Int32)modestride);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiModeDrawElements<T3>(Chela.Graphics.GL2.BeginMode[] mode, Int32[] count, Chela.Graphics.GL2.DrawElementsType type, T3[] indices, Int32 primcount, Int32 modestride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.GL2.BeginMode* mode_ptr = mode)
                    fixed (Int32* count_ptr = count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiModeDrawElementsIBM((Chela.Graphics.GL2.BeginMode*)mode_ptr, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiModeDrawElements<T3>(Chela.Graphics.GL2.BeginMode[] mode, Int32[] count, Chela.Graphics.GL2.DrawElementsType type, T3[,] indices, Int32 primcount, Int32 modestride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.GL2.BeginMode* mode_ptr = mode)
                    fixed (Int32* count_ptr = count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiModeDrawElementsIBM((Chela.Graphics.GL2.BeginMode*)mode_ptr, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiModeDrawElements<T3>(Chela.Graphics.GL2.BeginMode[] mode, Int32[] count, Chela.Graphics.GL2.DrawElementsType type, T3[,,] indices, Int32 primcount, Int32 modestride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.GL2.BeginMode* mode_ptr = mode)
                    fixed (Int32* count_ptr = count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiModeDrawElementsIBM((Chela.Graphics.GL2.BeginMode*)mode_ptr, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiModeDrawElements<T3>(Chela.Graphics.GL2.BeginMode[] mode, Int32[] count, Chela.Graphics.GL2.DrawElementsType type, ref T3 indices, Int32 primcount, Int32 modestride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.GL2.BeginMode* mode_ptr = mode)
                    fixed (Int32* count_ptr = count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiModeDrawElementsIBM((Chela.Graphics.GL2.BeginMode*)mode_ptr, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
                            indices = (T3)indices_ptr.Target;
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiModeDrawElements(ref Chela.Graphics.GL2.BeginMode mode, ref Int32 count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices, Int32 primcount, Int32 modestride)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.GL2.BeginMode* mode_ptr = &mode)
                    fixed (Int32* count_ptr = &count)
                    {
                        Delegates.glMultiModeDrawElementsIBM((Chela.Graphics.GL2.BeginMode*)mode_ptr, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices, (Int32)primcount, (Int32)modestride);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiModeDrawElements<T3>(ref Chela.Graphics.GL2.BeginMode mode, ref Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[] indices, Int32 primcount, Int32 modestride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.GL2.BeginMode* mode_ptr = &mode)
                    fixed (Int32* count_ptr = &count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiModeDrawElementsIBM((Chela.Graphics.GL2.BeginMode*)mode_ptr, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiModeDrawElements<T3>(ref Chela.Graphics.GL2.BeginMode mode, ref Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[,] indices, Int32 primcount, Int32 modestride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.GL2.BeginMode* mode_ptr = &mode)
                    fixed (Int32* count_ptr = &count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiModeDrawElementsIBM((Chela.Graphics.GL2.BeginMode*)mode_ptr, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiModeDrawElements<T3>(ref Chela.Graphics.GL2.BeginMode mode, ref Int32 count, Chela.Graphics.GL2.DrawElementsType type, T3[,,] indices, Int32 primcount, Int32 modestride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.GL2.BeginMode* mode_ptr = &mode)
                    fixed (Int32* count_ptr = &count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiModeDrawElementsIBM((Chela.Graphics.GL2.BeginMode*)mode_ptr, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiModeDrawElements<T3>(ref Chela.Graphics.GL2.BeginMode mode, ref Int32 count, Chela.Graphics.GL2.DrawElementsType type, ref T3 indices, Int32 primcount, Int32 modestride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.GL2.BeginMode* mode_ptr = &mode)
                    fixed (Int32* count_ptr = &count)
                    {
                        GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glMultiModeDrawElementsIBM((Chela.Graphics.GL2.BeginMode*)mode_ptr, (Int32*)count_ptr, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
                            indices = (T3)indices_ptr.Target;
                        }
                        finally
                        {
                            indices_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiModeDrawElements(Chela.Graphics.GL2.BeginMode* mode, Int32* count, Chela.Graphics.GL2.DrawElementsType type, IntPtr indices, Int32 primcount, Int32 modestride)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiModeDrawElementsIBM((Chela.Graphics.GL2.BeginMode*)mode, (Int32*)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices, (Int32)primcount, (Int32)modestride);
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiModeDrawElements<T3>(Chela.Graphics.GL2.BeginMode* mode, Int32* count, Chela.Graphics.GL2.DrawElementsType type, T3[] indices, Int32 primcount, Int32 modestride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiModeDrawElementsIBM((Chela.Graphics.GL2.BeginMode*)mode, (Int32*)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
                }
                finally
                {
                    indices_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiModeDrawElements<T3>(Chela.Graphics.GL2.BeginMode* mode, Int32* count, Chela.Graphics.GL2.DrawElementsType type, T3[,] indices, Int32 primcount, Int32 modestride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiModeDrawElementsIBM((Chela.Graphics.GL2.BeginMode*)mode, (Int32*)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
                }
                finally
                {
                    indices_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiModeDrawElements<T3>(Chela.Graphics.GL2.BeginMode* mode, Int32* count, Chela.Graphics.GL2.DrawElementsType type, T3[,,] indices, Int32 primcount, Int32 modestride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiModeDrawElementsIBM((Chela.Graphics.GL2.BeginMode*)mode, (Int32*)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
                }
                finally
                {
                    indices_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiModeDrawElements<T3>(Chela.Graphics.GL2.BeginMode* mode, Int32* count, Chela.Graphics.GL2.DrawElementsType type, ref T3 indices, Int32 primcount, Int32 modestride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glMultiModeDrawElementsIBM((Chela.Graphics.GL2.BeginMode*)mode, (Int32*)count, (Chela.Graphics.GL2.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject(), (Int32)primcount, (Int32)modestride);
                    indices = (T3)indices_ptr.Target;
                }
                finally
                {
                    indices_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalPointerList(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, IntPtr pointer, Int32 ptrstride)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNormalPointerListIBM((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalPointerList<T2>(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, T2[] pointer, Int32 ptrstride)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNormalPointerListIBM((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalPointerList<T2>(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, T2[,] pointer, Int32 ptrstride)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNormalPointerListIBM((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalPointerList<T2>(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, T2[,,] pointer, Int32 ptrstride)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNormalPointerListIBM((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalPointerList<T2>(Chela.Graphics.GL2.NormalPointerType type, Int32 stride, ref T2 pointer, Int32 ptrstride)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNormalPointerListIBM((Chela.Graphics.GL2.NormalPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                        pointer = (T2)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColorPointerList(Int32 size, Chela.Graphics.GL2.IbmVertexArrayLists type, Int32 stride, IntPtr pointer, Int32 ptrstride)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSecondaryColorPointerListIBM((Int32)size, (Chela.Graphics.GL2.IbmVertexArrayLists)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColorPointerList<T3>(Int32 size, Chela.Graphics.GL2.IbmVertexArrayLists type, Int32 stride, T3[] pointer, Int32 ptrstride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSecondaryColorPointerListIBM((Int32)size, (Chela.Graphics.GL2.IbmVertexArrayLists)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColorPointerList<T3>(Int32 size, Chela.Graphics.GL2.IbmVertexArrayLists type, Int32 stride, T3[,] pointer, Int32 ptrstride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSecondaryColorPointerListIBM((Int32)size, (Chela.Graphics.GL2.IbmVertexArrayLists)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColorPointerList<T3>(Int32 size, Chela.Graphics.GL2.IbmVertexArrayLists type, Int32 stride, T3[,,] pointer, Int32 ptrstride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSecondaryColorPointerListIBM((Int32)size, (Chela.Graphics.GL2.IbmVertexArrayLists)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColorPointerList<T3>(Int32 size, Chela.Graphics.GL2.IbmVertexArrayLists type, Int32 stride, ref T3 pointer, Int32 ptrstride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glSecondaryColorPointerListIBM((Int32)size, (Chela.Graphics.GL2.IbmVertexArrayLists)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                        pointer = (T3)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoordPointerList(Int32 size, Chela.Graphics.GL2.TexCoordPointerType type, Int32 stride, IntPtr pointer, Int32 ptrstride)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexCoordPointerListIBM((Int32)size, (Chela.Graphics.GL2.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoordPointerList<T3>(Int32 size, Chela.Graphics.GL2.TexCoordPointerType type, Int32 stride, T3[] pointer, Int32 ptrstride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexCoordPointerListIBM((Int32)size, (Chela.Graphics.GL2.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoordPointerList<T3>(Int32 size, Chela.Graphics.GL2.TexCoordPointerType type, Int32 stride, T3[,] pointer, Int32 ptrstride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexCoordPointerListIBM((Int32)size, (Chela.Graphics.GL2.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoordPointerList<T3>(Int32 size, Chela.Graphics.GL2.TexCoordPointerType type, Int32 stride, T3[,,] pointer, Int32 ptrstride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexCoordPointerListIBM((Int32)size, (Chela.Graphics.GL2.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoordPointerList<T3>(Int32 size, Chela.Graphics.GL2.TexCoordPointerType type, Int32 stride, ref T3 pointer, Int32 ptrstride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexCoordPointerListIBM((Int32)size, (Chela.Graphics.GL2.TexCoordPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                        pointer = (T3)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexPointerList(Int32 size, Chela.Graphics.GL2.VertexPointerType type, Int32 stride, IntPtr pointer, Int32 ptrstride)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexPointerListIBM((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (Int32)stride, (IntPtr)pointer, (Int32)ptrstride);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexPointerList<T3>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, Int32 stride, T3[] pointer, Int32 ptrstride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexPointerListIBM((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexPointerList<T3>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, Int32 stride, T3[,] pointer, Int32 ptrstride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexPointerListIBM((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexPointerList<T3>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, Int32 stride, T3[,,] pointer, Int32 ptrstride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexPointerListIBM((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexPointerList<T3>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, Int32 stride, ref T3 pointer, Int32 ptrstride)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexPointerListIBM((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject(), (Int32)ptrstride);
                        pointer = (T3)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

        }

        public static partial class Ingr
        {
            public static 
            void BlendFuncSeparate(Chela.Graphics.GL2.All sfactorRGB, Chela.Graphics.GL2.All dfactorRGB, Chela.Graphics.GL2.All sfactorAlpha, Chela.Graphics.GL2.All dfactorAlpha)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBlendFuncSeparateINGR((Chela.Graphics.GL2.All)sfactorRGB, (Chela.Graphics.GL2.All)dfactorRGB, (Chela.Graphics.GL2.All)sfactorAlpha, (Chela.Graphics.GL2.All)dfactorAlpha);
                }
                #if DEBUG
                }
                #endif
            }

        }

        public static partial class Intel
        {
            public static 
            void ColorPointer(Int32 size, Chela.Graphics.GL2.VertexPointerType type, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glColorPointervINTEL((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorPointer<T2>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, T2[] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorPointervINTEL((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorPointer<T2>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, T2[,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorPointervINTEL((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorPointer<T2>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, T2[,,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorPointervINTEL((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorPointer<T2>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, ref T2 pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorPointervINTEL((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T2)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalPointer(Chela.Graphics.GL2.NormalPointerType type, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNormalPointervINTEL((Chela.Graphics.GL2.NormalPointerType)type, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalPointer<T1>(Chela.Graphics.GL2.NormalPointerType type, T1[] pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNormalPointervINTEL((Chela.Graphics.GL2.NormalPointerType)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalPointer<T1>(Chela.Graphics.GL2.NormalPointerType type, T1[,] pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNormalPointervINTEL((Chela.Graphics.GL2.NormalPointerType)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalPointer<T1>(Chela.Graphics.GL2.NormalPointerType type, T1[,,] pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNormalPointervINTEL((Chela.Graphics.GL2.NormalPointerType)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void NormalPointer<T1>(Chela.Graphics.GL2.NormalPointerType type, ref T1 pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glNormalPointervINTEL((Chela.Graphics.GL2.NormalPointerType)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T1)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoordPointer(Int32 size, Chela.Graphics.GL2.VertexPointerType type, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexCoordPointervINTEL((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoordPointer<T2>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, T2[] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexCoordPointervINTEL((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoordPointer<T2>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, T2[,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexCoordPointervINTEL((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoordPointer<T2>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, T2[,,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexCoordPointervINTEL((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoordPointer<T2>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, ref T2 pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexCoordPointervINTEL((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T2)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexPointer(Int32 size, Chela.Graphics.GL2.VertexPointerType type, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexPointervINTEL((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexPointer<T2>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, T2[] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexPointervINTEL((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexPointer<T2>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, T2[,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexPointervINTEL((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexPointer<T2>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, T2[,,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexPointervINTEL((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexPointer<T2>(Int32 size, Chela.Graphics.GL2.VertexPointerType type, ref T2 pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexPointervINTEL((Int32)size, (Chela.Graphics.GL2.VertexPointerType)type, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T2)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

        }

        public static partial class Mesa
        {
            public static 
            void ResizeBuffers()
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glResizeBuffersMESA();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(Double x, Double y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glWindowPos2dMESA((Double)x, (Double)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glWindowPos2dvMESA((Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glWindowPos2dvMESA((Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void WindowPos2(Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWindowPos2dvMESA((Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(Single x, Single y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glWindowPos2fMESA((Single)x, (Single)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glWindowPos2fvMESA((Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glWindowPos2fvMESA((Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void WindowPos2(Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWindowPos2fvMESA((Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(Int32 x, Int32 y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glWindowPos2iMESA((Int32)x, (Int32)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(Int32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glWindowPos2ivMESA((Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(ref Int32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glWindowPos2ivMESA((Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void WindowPos2(Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWindowPos2ivMESA((Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(Int16 x, Int16 y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glWindowPos2sMESA((Int16)x, (Int16)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glWindowPos2svMESA((Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos2(ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glWindowPos2svMESA((Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void WindowPos2(Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWindowPos2svMESA((Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(Double x, Double y, Double z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glWindowPos3dMESA((Double)x, (Double)y, (Double)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glWindowPos3dvMESA((Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glWindowPos3dvMESA((Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void WindowPos3(Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWindowPos3dvMESA((Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glWindowPos3fMESA((Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glWindowPos3fvMESA((Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glWindowPos3fvMESA((Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void WindowPos3(Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWindowPos3fvMESA((Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(Int32 x, Int32 y, Int32 z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glWindowPos3iMESA((Int32)x, (Int32)y, (Int32)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(Int32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glWindowPos3ivMESA((Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(ref Int32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glWindowPos3ivMESA((Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void WindowPos3(Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWindowPos3ivMESA((Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(Int16 x, Int16 y, Int16 z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glWindowPos3sMESA((Int16)x, (Int16)y, (Int16)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glWindowPos3svMESA((Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos3(ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glWindowPos3svMESA((Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void WindowPos3(Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWindowPos3svMESA((Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos4(Double x, Double y, Double z, Double w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glWindowPos4dMESA((Double)x, (Double)y, (Double)z, (Double)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos4(Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glWindowPos4dvMESA((Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos4(ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glWindowPos4dvMESA((Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void WindowPos4(Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWindowPos4dvMESA((Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos4(Single x, Single y, Single z, Single w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glWindowPos4fMESA((Single)x, (Single)y, (Single)z, (Single)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos4(Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glWindowPos4fvMESA((Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos4(ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glWindowPos4fvMESA((Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void WindowPos4(Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWindowPos4fvMESA((Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos4(Int32 x, Int32 y, Int32 z, Int32 w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glWindowPos4iMESA((Int32)x, (Int32)y, (Int32)z, (Int32)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos4(Int32[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = v)
                    {
                        Delegates.glWindowPos4ivMESA((Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos4(ref Int32 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* v_ptr = &v)
                    {
                        Delegates.glWindowPos4ivMESA((Int32*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void WindowPos4(Int32* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWindowPos4ivMESA((Int32*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos4(Int16 x, Int16 y, Int16 z, Int16 w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glWindowPos4sMESA((Int16)x, (Int16)y, (Int16)z, (Int16)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos4(Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glWindowPos4svMESA((Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void WindowPos4(ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glWindowPos4svMESA((Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void WindowPos4(Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glWindowPos4svMESA((Int16*)v);
                #if DEBUG
                }
                #endif
            }

        }

        public static partial class NV
        {
            public static 
            void ActiveVarying(Int32 program, String name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        Delegates.glActiveVaryingNV((UInt32)program, name_ptr.Address);
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ActiveVarying(UInt32 program, String name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        Delegates.glActiveVaryingNV((UInt32)program, name_ptr.Address);
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool AreProgramsResident(Int32 n, Int32[] programs, bool[] residences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* programs_ptr = programs)
                    fixed (bool* residences_ptr = residences)
                    {
                        return Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (bool*)residences_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool AreProgramsResident(Int32 n, ref Int32 programs, out bool residences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* programs_ptr = &programs)
                    fixed (bool* residences_ptr = &residences)
                    {
                        bool retval = Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (bool*)residences_ptr);
                        residences = *residences_ptr;
                        return retval;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe bool AreProgramsResident(Int32 n, Int32* programs, bool* residences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                return Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs, (bool*)residences);
                #if DEBUG
                }
                #endif
            }

            public static 
            bool AreProgramsResident(Int32 n, UInt32[] programs, bool[] residences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* programs_ptr = programs)
                    fixed (bool* residences_ptr = residences)
                    {
                        return Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (bool*)residences_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool AreProgramsResident(Int32 n, ref UInt32 programs, out bool residences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* programs_ptr = &programs)
                    fixed (bool* residences_ptr = &residences)
                    {
                        bool retval = Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs_ptr, (bool*)residences_ptr);
                        residences = *residences_ptr;
                        return retval;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe bool AreProgramsResident(Int32 n, UInt32* programs, bool* residences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                return Delegates.glAreProgramsResidentNV((Int32)n, (UInt32*)programs, (bool*)residences);
                #if DEBUG
                }
                #endif
            }

            public static 
            void BeginConditionalRender(Int32 id, Chela.Graphics.GL2.NvConditionalRender mode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBeginConditionalRenderNV((UInt32)id, (Chela.Graphics.GL2.NvConditionalRender)mode);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BeginConditionalRender(UInt32 id, Chela.Graphics.GL2.NvConditionalRender mode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBeginConditionalRenderNV((UInt32)id, (Chela.Graphics.GL2.NvConditionalRender)mode);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BeginOcclusionQuery(Int32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBeginOcclusionQueryNV((UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BeginOcclusionQuery(UInt32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBeginOcclusionQueryNV((UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BeginTransformFeedback(Chela.Graphics.GL2.NvTransformFeedback primitiveMode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBeginTransformFeedbackNV((Chela.Graphics.GL2.NvTransformFeedback)primitiveMode);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindBufferBase(Chela.Graphics.GL2.NvTransformFeedback target, Int32 index, Int32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindBufferBaseNV((Chela.Graphics.GL2.NvTransformFeedback)target, (UInt32)index, (UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindBufferBase(Chela.Graphics.GL2.NvTransformFeedback target, UInt32 index, UInt32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindBufferBaseNV((Chela.Graphics.GL2.NvTransformFeedback)target, (UInt32)index, (UInt32)buffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindBufferOffset(Chela.Graphics.GL2.NvTransformFeedback target, Int32 index, Int32 buffer, IntPtr offset)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindBufferOffsetNV((Chela.Graphics.GL2.NvTransformFeedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindBufferOffset(Chela.Graphics.GL2.NvTransformFeedback target, UInt32 index, UInt32 buffer, IntPtr offset)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindBufferOffsetNV((Chela.Graphics.GL2.NvTransformFeedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindBufferRange(Chela.Graphics.GL2.NvTransformFeedback target, Int32 index, Int32 buffer, IntPtr offset, IntPtr size)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindBufferRangeNV((Chela.Graphics.GL2.NvTransformFeedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindBufferRange(Chela.Graphics.GL2.NvTransformFeedback target, UInt32 index, UInt32 buffer, IntPtr offset, IntPtr size)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindBufferRangeNV((Chela.Graphics.GL2.NvTransformFeedback)target, (UInt32)index, (UInt32)buffer, (IntPtr)offset, (IntPtr)size);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindProgram(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindProgramNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindProgram(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindProgramNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindTransformFeedback(Chela.Graphics.GL2.NvTransformFeedback2 target, Int32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindTransformFeedbackNV((Chela.Graphics.GL2.NvTransformFeedback2)target, (UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BindTransformFeedback(Chela.Graphics.GL2.NvTransformFeedback2 target, UInt32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBindTransformFeedbackNV((Chela.Graphics.GL2.NvTransformFeedback2)target, (UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ClearDepth(Double depth)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glClearDepthdNV((Double)depth);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Color3h(Chela.Graphics.Half red, Chela.Graphics.Half green, Chela.Graphics.Half blue)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glColor3hNV((Chela.Graphics.Half)red, (Chela.Graphics.Half)green, (Chela.Graphics.Half)blue);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Color3h(Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glColor3hvNV((Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Color3h(ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glColor3hvNV((Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Color3h(Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glColor3hvNV((Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Color4h(Chela.Graphics.Half red, Chela.Graphics.Half green, Chela.Graphics.Half blue, Chela.Graphics.Half alpha)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glColor4hNV((Chela.Graphics.Half)red, (Chela.Graphics.Half)green, (Chela.Graphics.Half)blue, (Chela.Graphics.Half)alpha);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Color4h(Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glColor4hvNV((Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Color4h(ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glColor4hvNV((Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Color4h(Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glColor4hvNV((Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void CombinerInput(Chela.Graphics.GL2.NvRegisterCombiners stage, Chela.Graphics.GL2.NvRegisterCombiners portion, Chela.Graphics.GL2.NvRegisterCombiners variable, Chela.Graphics.GL2.NvRegisterCombiners input, Chela.Graphics.GL2.NvRegisterCombiners mapping, Chela.Graphics.GL2.NvRegisterCombiners componentUsage)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCombinerInputNV((Chela.Graphics.GL2.NvRegisterCombiners)stage, (Chela.Graphics.GL2.NvRegisterCombiners)portion, (Chela.Graphics.GL2.NvRegisterCombiners)variable, (Chela.Graphics.GL2.NvRegisterCombiners)input, (Chela.Graphics.GL2.NvRegisterCombiners)mapping, (Chela.Graphics.GL2.NvRegisterCombiners)componentUsage);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CombinerOutput(Chela.Graphics.GL2.NvRegisterCombiners stage, Chela.Graphics.GL2.NvRegisterCombiners portion, Chela.Graphics.GL2.NvRegisterCombiners abOutput, Chela.Graphics.GL2.NvRegisterCombiners cdOutput, Chela.Graphics.GL2.NvRegisterCombiners sumOutput, Chela.Graphics.GL2.NvRegisterCombiners scale, Chela.Graphics.GL2.NvRegisterCombiners bias, bool abDotProduct, bool cdDotProduct, bool muxSum)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCombinerOutputNV((Chela.Graphics.GL2.NvRegisterCombiners)stage, (Chela.Graphics.GL2.NvRegisterCombiners)portion, (Chela.Graphics.GL2.NvRegisterCombiners)abOutput, (Chela.Graphics.GL2.NvRegisterCombiners)cdOutput, (Chela.Graphics.GL2.NvRegisterCombiners)sumOutput, (Chela.Graphics.GL2.NvRegisterCombiners)scale, (Chela.Graphics.GL2.NvRegisterCombiners)bias, (bool)abDotProduct, (bool)cdDotProduct, (bool)muxSum);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CombinerParameter(Chela.Graphics.GL2.NvRegisterCombiners pname, Single param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCombinerParameterfNV((Chela.Graphics.GL2.NvRegisterCombiners)pname, (Single)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CombinerParameter(Chela.Graphics.GL2.NvRegisterCombiners pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glCombinerParameterfvNV((Chela.Graphics.GL2.NvRegisterCombiners)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void CombinerParameter(Chela.Graphics.GL2.NvRegisterCombiners pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glCombinerParameterfvNV((Chela.Graphics.GL2.NvRegisterCombiners)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void CombinerParameter(Chela.Graphics.GL2.NvRegisterCombiners pname, Int32 param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCombinerParameteriNV((Chela.Graphics.GL2.NvRegisterCombiners)pname, (Int32)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CombinerParameter(Chela.Graphics.GL2.NvRegisterCombiners pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glCombinerParameterivNV((Chela.Graphics.GL2.NvRegisterCombiners)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void CombinerParameter(Chela.Graphics.GL2.NvRegisterCombiners pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glCombinerParameterivNV((Chela.Graphics.GL2.NvRegisterCombiners)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void CombinerStageParameter(Chela.Graphics.GL2.NvRegisterCombiners2 stage, Chela.Graphics.GL2.NvRegisterCombiners2 pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glCombinerStageParameterfvNV((Chela.Graphics.GL2.NvRegisterCombiners2)stage, (Chela.Graphics.GL2.NvRegisterCombiners2)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CombinerStageParameter(Chela.Graphics.GL2.NvRegisterCombiners2 stage, Chela.Graphics.GL2.NvRegisterCombiners2 pname, ref Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glCombinerStageParameterfvNV((Chela.Graphics.GL2.NvRegisterCombiners2)stage, (Chela.Graphics.GL2.NvRegisterCombiners2)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void CombinerStageParameter(Chela.Graphics.GL2.NvRegisterCombiners2 stage, Chela.Graphics.GL2.NvRegisterCombiners2 pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glCombinerStageParameterfvNV((Chela.Graphics.GL2.NvRegisterCombiners2)stage, (Chela.Graphics.GL2.NvRegisterCombiners2)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteFences(Int32 n, Int32[] fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* fences_ptr = fences)
                    {
                        Delegates.glDeleteFencesNV((Int32)n, (UInt32*)fences_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteFences(Int32 n, ref Int32 fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* fences_ptr = &fences)
                    {
                        Delegates.glDeleteFencesNV((Int32)n, (UInt32*)fences_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteFences(Int32 n, Int32* fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteFencesNV((Int32)n, (UInt32*)fences);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteFences(Int32 n, UInt32[] fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* fences_ptr = fences)
                    {
                        Delegates.glDeleteFencesNV((Int32)n, (UInt32*)fences_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteFences(Int32 n, ref UInt32 fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* fences_ptr = &fences)
                    {
                        Delegates.glDeleteFencesNV((Int32)n, (UInt32*)fences_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteFences(Int32 n, UInt32* fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteFencesNV((Int32)n, (UInt32*)fences);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteOcclusionQueries(Int32 n, Int32[] ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* ids_ptr = ids)
                    {
                        Delegates.glDeleteOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteOcclusionQueries(Int32 n, ref Int32 ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* ids_ptr = &ids)
                    {
                        Delegates.glDeleteOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteOcclusionQueries(Int32 n, Int32* ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteOcclusionQueriesNV((Int32)n, (UInt32*)ids);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteOcclusionQueries(Int32 n, UInt32[] ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* ids_ptr = ids)
                    {
                        Delegates.glDeleteOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteOcclusionQueries(Int32 n, ref UInt32 ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* ids_ptr = &ids)
                    {
                        Delegates.glDeleteOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteOcclusionQueries(Int32 n, UInt32* ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteOcclusionQueriesNV((Int32)n, (UInt32*)ids);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteProgram(Int32 n, Int32[] programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* programs_ptr = programs)
                    {
                        Delegates.glDeleteProgramsNV((Int32)n, (UInt32*)programs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteProgram(Int32 n, ref Int32 programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* programs_ptr = &programs)
                    {
                        Delegates.glDeleteProgramsNV((Int32)n, (UInt32*)programs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteProgram(Int32 n, Int32* programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteProgramsNV((Int32)n, (UInt32*)programs);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteProgram(Int32 n, UInt32[] programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* programs_ptr = programs)
                    {
                        Delegates.glDeleteProgramsNV((Int32)n, (UInt32*)programs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteProgram(Int32 n, ref UInt32 programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* programs_ptr = &programs)
                    {
                        Delegates.glDeleteProgramsNV((Int32)n, (UInt32*)programs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteProgram(Int32 n, UInt32* programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteProgramsNV((Int32)n, (UInt32*)programs);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteTransformFeedback(Int32 n, Int32[] ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* ids_ptr = ids)
                    {
                        Delegates.glDeleteTransformFeedbacksNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteTransformFeedback(Int32 n, ref Int32 ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* ids_ptr = &ids)
                    {
                        Delegates.glDeleteTransformFeedbacksNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteTransformFeedback(Int32 n, Int32* ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteTransformFeedbacksNV((Int32)n, (UInt32*)ids);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteTransformFeedback(Int32 n, UInt32[] ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* ids_ptr = ids)
                    {
                        Delegates.glDeleteTransformFeedbacksNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteTransformFeedback(Int32 n, ref UInt32 ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* ids_ptr = &ids)
                    {
                        Delegates.glDeleteTransformFeedbacksNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteTransformFeedback(Int32 n, UInt32* ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteTransformFeedbacksNV((Int32)n, (UInt32*)ids);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DepthBounds(Double zmin, Double zmax)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDepthBoundsdNV((Double)zmin, (Double)zmax);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DepthRange(Double zNear, Double zFar)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDepthRangedNV((Double)zNear, (Double)zFar);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawTransformFeedback(Chela.Graphics.GL2.NvTransformFeedback2 mode, Int32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDrawTransformFeedbackNV((Chela.Graphics.GL2.NvTransformFeedback2)mode, (UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawTransformFeedback(Chela.Graphics.GL2.NvTransformFeedback2 mode, UInt32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDrawTransformFeedbackNV((Chela.Graphics.GL2.NvTransformFeedback2)mode, (UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EndConditionalRender()
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEndConditionalRenderNV();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EndOcclusionQuery()
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEndOcclusionQueryNV();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EndTransformFeedback()
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEndTransformFeedbackNV();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EvalMap(Chela.Graphics.GL2.NvEvaluators target, Chela.Graphics.GL2.NvEvaluators mode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEvalMapsNV((Chela.Graphics.GL2.NvEvaluators)target, (Chela.Graphics.GL2.NvEvaluators)mode);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ExecuteProgram(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 id, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glExecuteProgramNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)id, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ExecuteProgram(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 id, ref Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glExecuteProgramNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)id, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ExecuteProgram(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 id, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glExecuteProgramNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)id, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ExecuteProgram(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 id, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glExecuteProgramNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)id, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ExecuteProgram(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 id, ref Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glExecuteProgramNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)id, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ExecuteProgram(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 id, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glExecuteProgramNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)id, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void FinalCombinerInput(Chela.Graphics.GL2.NvRegisterCombiners variable, Chela.Graphics.GL2.NvRegisterCombiners input, Chela.Graphics.GL2.NvRegisterCombiners mapping, Chela.Graphics.GL2.NvRegisterCombiners componentUsage)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFinalCombinerInputNV((Chela.Graphics.GL2.NvRegisterCombiners)variable, (Chela.Graphics.GL2.NvRegisterCombiners)input, (Chela.Graphics.GL2.NvRegisterCombiners)mapping, (Chela.Graphics.GL2.NvRegisterCombiners)componentUsage);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FinishFence(Int32 fence)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFinishFenceNV((UInt32)fence);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FinishFence(UInt32 fence)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFinishFenceNV((UInt32)fence);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FlushPixelDataRange(Chela.Graphics.GL2.NvPixelDataRange target)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFlushPixelDataRangeNV((Chela.Graphics.GL2.NvPixelDataRange)target);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FlushVertexArrayRange()
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFlushVertexArrayRangeNV();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FogCoordh(Chela.Graphics.Half fog)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFogCoordhNV((Chela.Graphics.Half)fog);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void FogCoordh(Chela.Graphics.Half* fog)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glFogCoordhvNV((Chela.Graphics.Half*)fog);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenFences(Int32 n, Int32[] fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* fences_ptr = fences)
                    {
                        Delegates.glGenFencesNV((Int32)n, (UInt32*)fences_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenFences(Int32 n, out Int32 fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* fences_ptr = &fences)
                    {
                        Delegates.glGenFencesNV((Int32)n, (UInt32*)fences_ptr);
                        fences = *fences_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenFences(Int32 n, Int32* fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenFencesNV((Int32)n, (UInt32*)fences);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenFences(Int32 n, UInt32[] fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* fences_ptr = fences)
                    {
                        Delegates.glGenFencesNV((Int32)n, (UInt32*)fences_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenFences(Int32 n, out UInt32 fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* fences_ptr = &fences)
                    {
                        Delegates.glGenFencesNV((Int32)n, (UInt32*)fences_ptr);
                        fences = *fences_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenFences(Int32 n, UInt32* fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenFencesNV((Int32)n, (UInt32*)fences);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenOcclusionQueries(Int32 n, Int32[] ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* ids_ptr = ids)
                    {
                        Delegates.glGenOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenOcclusionQueries(Int32 n, out Int32 ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* ids_ptr = &ids)
                    {
                        Delegates.glGenOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                        ids = *ids_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenOcclusionQueries(Int32 n, Int32* ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenOcclusionQueriesNV((Int32)n, (UInt32*)ids);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenOcclusionQueries(Int32 n, UInt32[] ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* ids_ptr = ids)
                    {
                        Delegates.glGenOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenOcclusionQueries(Int32 n, out UInt32 ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* ids_ptr = &ids)
                    {
                        Delegates.glGenOcclusionQueriesNV((Int32)n, (UInt32*)ids_ptr);
                        ids = *ids_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenOcclusionQueries(Int32 n, UInt32* ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenOcclusionQueriesNV((Int32)n, (UInt32*)ids);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenProgram(Int32 n, Int32[] programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* programs_ptr = programs)
                    {
                        Delegates.glGenProgramsNV((Int32)n, (UInt32*)programs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenProgram(Int32 n, out Int32 programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* programs_ptr = &programs)
                    {
                        Delegates.glGenProgramsNV((Int32)n, (UInt32*)programs_ptr);
                        programs = *programs_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenProgram(Int32 n, Int32* programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenProgramsNV((Int32)n, (UInt32*)programs);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenProgram(Int32 n, UInt32[] programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* programs_ptr = programs)
                    {
                        Delegates.glGenProgramsNV((Int32)n, (UInt32*)programs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenProgram(Int32 n, out UInt32 programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* programs_ptr = &programs)
                    {
                        Delegates.glGenProgramsNV((Int32)n, (UInt32*)programs_ptr);
                        programs = *programs_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenProgram(Int32 n, UInt32* programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenProgramsNV((Int32)n, (UInt32*)programs);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenTransformFeedback(Int32 n, Int32[] ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* ids_ptr = ids)
                    {
                        Delegates.glGenTransformFeedbacksNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenTransformFeedback(Int32 n, out Int32 ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* ids_ptr = &ids)
                    {
                        Delegates.glGenTransformFeedbacksNV((Int32)n, (UInt32*)ids_ptr);
                        ids = *ids_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenTransformFeedback(Int32 n, Int32* ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenTransformFeedbacksNV((Int32)n, (UInt32*)ids);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenTransformFeedback(Int32 n, UInt32[] ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* ids_ptr = ids)
                    {
                        Delegates.glGenTransformFeedbacksNV((Int32)n, (UInt32*)ids_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenTransformFeedback(Int32 n, out UInt32 ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* ids_ptr = &ids)
                    {
                        Delegates.glGenTransformFeedbacksNV((Int32)n, (UInt32*)ids_ptr);
                        ids = *ids_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenTransformFeedback(Int32 n, UInt32* ids)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenTransformFeedbacksNV((Int32)n, (UInt32*)ids);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetActiveVarying(Int32 program, Int32 index, Int32 bufSize, out Int32 length, out Int32 size, out Chela.Graphics.GL2.NvTransformFeedback type, StringBuilder name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (Chela.Graphics.GL2.NvTransformFeedback* type_ptr = &type)
                    {
                        StringHandle name_ptr = StringHandle.Alloc(name);
                        try
                        {
                            Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (Chela.Graphics.GL2.NvTransformFeedback*)type_ptr, name_ptr.Address);
                            length = *length_ptr;
                            size = *size_ptr;
                            type = *type_ptr;
                        }
                        finally
                        {
                            name_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetActiveVarying(Int32 program, Int32 index, Int32 bufSize, Int32* length, Int32* size, Chela.Graphics.GL2.NvTransformFeedback* type, StringBuilder name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (Chela.Graphics.GL2.NvTransformFeedback*)type, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetActiveVarying(UInt32 program, UInt32 index, Int32 bufSize, out Int32 length, out Int32 size, out Chela.Graphics.GL2.NvTransformFeedback type, StringBuilder name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Int32* size_ptr = &size)
                    fixed (Chela.Graphics.GL2.NvTransformFeedback* type_ptr = &type)
                    {
                        StringHandle name_ptr = StringHandle.Alloc(name);
                        try
                        {
                            Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length_ptr, (Int32*)size_ptr, (Chela.Graphics.GL2.NvTransformFeedback*)type_ptr, name_ptr.Address);
                            length = *length_ptr;
                            size = *size_ptr;
                            type = *type_ptr;
                        }
                        finally
                        {
                            name_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetActiveVarying(UInt32 program, UInt32 index, Int32 bufSize, Int32* length, Int32* size, Chela.Graphics.GL2.NvTransformFeedback* type, StringBuilder name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    Delegates.glGetActiveVaryingNV((UInt32)program, (UInt32)index, (Int32)bufSize, (Int32*)length, (Int32*)size, (Chela.Graphics.GL2.NvTransformFeedback*)type, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCombinerInputParameter(Chela.Graphics.GL2.NvRegisterCombiners stage, Chela.Graphics.GL2.NvRegisterCombiners portion, Chela.Graphics.GL2.NvRegisterCombiners variable, Chela.Graphics.GL2.NvRegisterCombiners pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetCombinerInputParameterfvNV((Chela.Graphics.GL2.NvRegisterCombiners)stage, (Chela.Graphics.GL2.NvRegisterCombiners)portion, (Chela.Graphics.GL2.NvRegisterCombiners)variable, (Chela.Graphics.GL2.NvRegisterCombiners)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCombinerInputParameter(Chela.Graphics.GL2.NvRegisterCombiners stage, Chela.Graphics.GL2.NvRegisterCombiners portion, Chela.Graphics.GL2.NvRegisterCombiners variable, Chela.Graphics.GL2.NvRegisterCombiners pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetCombinerInputParameterfvNV((Chela.Graphics.GL2.NvRegisterCombiners)stage, (Chela.Graphics.GL2.NvRegisterCombiners)portion, (Chela.Graphics.GL2.NvRegisterCombiners)variable, (Chela.Graphics.GL2.NvRegisterCombiners)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetCombinerInputParameter(Chela.Graphics.GL2.NvRegisterCombiners stage, Chela.Graphics.GL2.NvRegisterCombiners portion, Chela.Graphics.GL2.NvRegisterCombiners variable, Chela.Graphics.GL2.NvRegisterCombiners pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetCombinerInputParameterfvNV((Chela.Graphics.GL2.NvRegisterCombiners)stage, (Chela.Graphics.GL2.NvRegisterCombiners)portion, (Chela.Graphics.GL2.NvRegisterCombiners)variable, (Chela.Graphics.GL2.NvRegisterCombiners)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCombinerInputParameter(Chela.Graphics.GL2.NvRegisterCombiners stage, Chela.Graphics.GL2.NvRegisterCombiners portion, Chela.Graphics.GL2.NvRegisterCombiners variable, Chela.Graphics.GL2.NvRegisterCombiners pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetCombinerInputParameterivNV((Chela.Graphics.GL2.NvRegisterCombiners)stage, (Chela.Graphics.GL2.NvRegisterCombiners)portion, (Chela.Graphics.GL2.NvRegisterCombiners)variable, (Chela.Graphics.GL2.NvRegisterCombiners)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCombinerInputParameter(Chela.Graphics.GL2.NvRegisterCombiners stage, Chela.Graphics.GL2.NvRegisterCombiners portion, Chela.Graphics.GL2.NvRegisterCombiners variable, Chela.Graphics.GL2.NvRegisterCombiners pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetCombinerInputParameterivNV((Chela.Graphics.GL2.NvRegisterCombiners)stage, (Chela.Graphics.GL2.NvRegisterCombiners)portion, (Chela.Graphics.GL2.NvRegisterCombiners)variable, (Chela.Graphics.GL2.NvRegisterCombiners)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetCombinerInputParameter(Chela.Graphics.GL2.NvRegisterCombiners stage, Chela.Graphics.GL2.NvRegisterCombiners portion, Chela.Graphics.GL2.NvRegisterCombiners variable, Chela.Graphics.GL2.NvRegisterCombiners pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetCombinerInputParameterivNV((Chela.Graphics.GL2.NvRegisterCombiners)stage, (Chela.Graphics.GL2.NvRegisterCombiners)portion, (Chela.Graphics.GL2.NvRegisterCombiners)variable, (Chela.Graphics.GL2.NvRegisterCombiners)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCombinerOutputParameter(Chela.Graphics.GL2.NvRegisterCombiners stage, Chela.Graphics.GL2.NvRegisterCombiners portion, Chela.Graphics.GL2.NvRegisterCombiners pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetCombinerOutputParameterfvNV((Chela.Graphics.GL2.NvRegisterCombiners)stage, (Chela.Graphics.GL2.NvRegisterCombiners)portion, (Chela.Graphics.GL2.NvRegisterCombiners)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCombinerOutputParameter(Chela.Graphics.GL2.NvRegisterCombiners stage, Chela.Graphics.GL2.NvRegisterCombiners portion, Chela.Graphics.GL2.NvRegisterCombiners pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetCombinerOutputParameterfvNV((Chela.Graphics.GL2.NvRegisterCombiners)stage, (Chela.Graphics.GL2.NvRegisterCombiners)portion, (Chela.Graphics.GL2.NvRegisterCombiners)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetCombinerOutputParameter(Chela.Graphics.GL2.NvRegisterCombiners stage, Chela.Graphics.GL2.NvRegisterCombiners portion, Chela.Graphics.GL2.NvRegisterCombiners pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetCombinerOutputParameterfvNV((Chela.Graphics.GL2.NvRegisterCombiners)stage, (Chela.Graphics.GL2.NvRegisterCombiners)portion, (Chela.Graphics.GL2.NvRegisterCombiners)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCombinerOutputParameter(Chela.Graphics.GL2.NvRegisterCombiners stage, Chela.Graphics.GL2.NvRegisterCombiners portion, Chela.Graphics.GL2.NvRegisterCombiners pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetCombinerOutputParameterivNV((Chela.Graphics.GL2.NvRegisterCombiners)stage, (Chela.Graphics.GL2.NvRegisterCombiners)portion, (Chela.Graphics.GL2.NvRegisterCombiners)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCombinerOutputParameter(Chela.Graphics.GL2.NvRegisterCombiners stage, Chela.Graphics.GL2.NvRegisterCombiners portion, Chela.Graphics.GL2.NvRegisterCombiners pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetCombinerOutputParameterivNV((Chela.Graphics.GL2.NvRegisterCombiners)stage, (Chela.Graphics.GL2.NvRegisterCombiners)portion, (Chela.Graphics.GL2.NvRegisterCombiners)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetCombinerOutputParameter(Chela.Graphics.GL2.NvRegisterCombiners stage, Chela.Graphics.GL2.NvRegisterCombiners portion, Chela.Graphics.GL2.NvRegisterCombiners pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetCombinerOutputParameterivNV((Chela.Graphics.GL2.NvRegisterCombiners)stage, (Chela.Graphics.GL2.NvRegisterCombiners)portion, (Chela.Graphics.GL2.NvRegisterCombiners)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCombinerStageParameter(Chela.Graphics.GL2.NvRegisterCombiners2 stage, Chela.Graphics.GL2.NvRegisterCombiners2 pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetCombinerStageParameterfvNV((Chela.Graphics.GL2.NvRegisterCombiners2)stage, (Chela.Graphics.GL2.NvRegisterCombiners2)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetCombinerStageParameter(Chela.Graphics.GL2.NvRegisterCombiners2 stage, Chela.Graphics.GL2.NvRegisterCombiners2 pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetCombinerStageParameterfvNV((Chela.Graphics.GL2.NvRegisterCombiners2)stage, (Chela.Graphics.GL2.NvRegisterCombiners2)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetCombinerStageParameter(Chela.Graphics.GL2.NvRegisterCombiners2 stage, Chela.Graphics.GL2.NvRegisterCombiners2 pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetCombinerStageParameterfvNV((Chela.Graphics.GL2.NvRegisterCombiners2)stage, (Chela.Graphics.GL2.NvRegisterCombiners2)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFence(Int32 fence, Chela.Graphics.GL2.NvFence pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFenceivNV((UInt32)fence, (Chela.Graphics.GL2.NvFence)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFence(Int32 fence, Chela.Graphics.GL2.NvFence pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFenceivNV((UInt32)fence, (Chela.Graphics.GL2.NvFence)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetFence(Int32 fence, Chela.Graphics.GL2.NvFence pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetFenceivNV((UInt32)fence, (Chela.Graphics.GL2.NvFence)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFence(UInt32 fence, Chela.Graphics.GL2.NvFence pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFenceivNV((UInt32)fence, (Chela.Graphics.GL2.NvFence)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFence(UInt32 fence, Chela.Graphics.GL2.NvFence pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFenceivNV((UInt32)fence, (Chela.Graphics.GL2.NvFence)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetFence(UInt32 fence, Chela.Graphics.GL2.NvFence pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetFenceivNV((UInt32)fence, (Chela.Graphics.GL2.NvFence)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFinalCombinerInputParameter(Chela.Graphics.GL2.NvRegisterCombiners variable, Chela.Graphics.GL2.NvRegisterCombiners pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetFinalCombinerInputParameterfvNV((Chela.Graphics.GL2.NvRegisterCombiners)variable, (Chela.Graphics.GL2.NvRegisterCombiners)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFinalCombinerInputParameter(Chela.Graphics.GL2.NvRegisterCombiners variable, Chela.Graphics.GL2.NvRegisterCombiners pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetFinalCombinerInputParameterfvNV((Chela.Graphics.GL2.NvRegisterCombiners)variable, (Chela.Graphics.GL2.NvRegisterCombiners)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetFinalCombinerInputParameter(Chela.Graphics.GL2.NvRegisterCombiners variable, Chela.Graphics.GL2.NvRegisterCombiners pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetFinalCombinerInputParameterfvNV((Chela.Graphics.GL2.NvRegisterCombiners)variable, (Chela.Graphics.GL2.NvRegisterCombiners)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFinalCombinerInputParameter(Chela.Graphics.GL2.NvRegisterCombiners variable, Chela.Graphics.GL2.NvRegisterCombiners pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFinalCombinerInputParameterivNV((Chela.Graphics.GL2.NvRegisterCombiners)variable, (Chela.Graphics.GL2.NvRegisterCombiners)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFinalCombinerInputParameter(Chela.Graphics.GL2.NvRegisterCombiners variable, Chela.Graphics.GL2.NvRegisterCombiners pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFinalCombinerInputParameterivNV((Chela.Graphics.GL2.NvRegisterCombiners)variable, (Chela.Graphics.GL2.NvRegisterCombiners)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetFinalCombinerInputParameter(Chela.Graphics.GL2.NvRegisterCombiners variable, Chela.Graphics.GL2.NvRegisterCombiners pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetFinalCombinerInputParameterivNV((Chela.Graphics.GL2.NvRegisterCombiners)variable, (Chela.Graphics.GL2.NvRegisterCombiners)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMapAttribParameter(Chela.Graphics.GL2.NvEvaluators target, Int32 index, Chela.Graphics.GL2.NvEvaluators pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMapAttribParameterfvNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMapAttribParameter(Chela.Graphics.GL2.NvEvaluators target, Int32 index, Chela.Graphics.GL2.NvEvaluators pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMapAttribParameterfvNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetMapAttribParameter(Chela.Graphics.GL2.NvEvaluators target, Int32 index, Chela.Graphics.GL2.NvEvaluators pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetMapAttribParameterfvNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMapAttribParameter(Chela.Graphics.GL2.NvEvaluators target, UInt32 index, Chela.Graphics.GL2.NvEvaluators pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMapAttribParameterfvNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMapAttribParameter(Chela.Graphics.GL2.NvEvaluators target, UInt32 index, Chela.Graphics.GL2.NvEvaluators pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMapAttribParameterfvNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetMapAttribParameter(Chela.Graphics.GL2.NvEvaluators target, UInt32 index, Chela.Graphics.GL2.NvEvaluators pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetMapAttribParameterfvNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMapAttribParameter(Chela.Graphics.GL2.NvEvaluators target, Int32 index, Chela.Graphics.GL2.NvEvaluators pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMapAttribParameterivNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMapAttribParameter(Chela.Graphics.GL2.NvEvaluators target, Int32 index, Chela.Graphics.GL2.NvEvaluators pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMapAttribParameterivNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetMapAttribParameter(Chela.Graphics.GL2.NvEvaluators target, Int32 index, Chela.Graphics.GL2.NvEvaluators pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetMapAttribParameterivNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMapAttribParameter(Chela.Graphics.GL2.NvEvaluators target, UInt32 index, Chela.Graphics.GL2.NvEvaluators pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMapAttribParameterivNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMapAttribParameter(Chela.Graphics.GL2.NvEvaluators target, UInt32 index, Chela.Graphics.GL2.NvEvaluators pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMapAttribParameterivNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetMapAttribParameter(Chela.Graphics.GL2.NvEvaluators target, UInt32 index, Chela.Graphics.GL2.NvEvaluators pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetMapAttribParameterivNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMapControlPoints(Chela.Graphics.GL2.NvEvaluators target, Int32 index, Chela.Graphics.GL2.NvEvaluators type, Int32 ustride, Int32 vstride, bool packed, IntPtr points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetMapControlPointsNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (bool)packed, (IntPtr)points);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMapControlPoints<T6>(Chela.Graphics.GL2.NvEvaluators target, Int32 index, Chela.Graphics.GL2.NvEvaluators type, Int32 ustride, Int32 vstride, bool packed, T6[] points)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle points_ptr = GCHandle.Alloc(points, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetMapControlPointsNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        points_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMapControlPoints<T6>(Chela.Graphics.GL2.NvEvaluators target, Int32 index, Chela.Graphics.GL2.NvEvaluators type, Int32 ustride, Int32 vstride, bool packed, T6[,] points)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle points_ptr = GCHandle.Alloc(points, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetMapControlPointsNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        points_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMapControlPoints<T6>(Chela.Graphics.GL2.NvEvaluators target, Int32 index, Chela.Graphics.GL2.NvEvaluators type, Int32 ustride, Int32 vstride, bool packed, T6[,,] points)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle points_ptr = GCHandle.Alloc(points, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetMapControlPointsNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        points_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMapControlPoints<T6>(Chela.Graphics.GL2.NvEvaluators target, Int32 index, Chela.Graphics.GL2.NvEvaluators type, Int32 ustride, Int32 vstride, bool packed, ref T6 points)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle points_ptr = GCHandle.Alloc(points, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetMapControlPointsNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                        points = (T6)points_ptr.Target;
                    }
                    finally
                    {
                        points_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMapControlPoints(Chela.Graphics.GL2.NvEvaluators target, UInt32 index, Chela.Graphics.GL2.NvEvaluators type, Int32 ustride, Int32 vstride, bool packed, IntPtr points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetMapControlPointsNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (bool)packed, (IntPtr)points);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMapControlPoints<T6>(Chela.Graphics.GL2.NvEvaluators target, UInt32 index, Chela.Graphics.GL2.NvEvaluators type, Int32 ustride, Int32 vstride, bool packed, T6[] points)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle points_ptr = GCHandle.Alloc(points, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetMapControlPointsNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        points_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMapControlPoints<T6>(Chela.Graphics.GL2.NvEvaluators target, UInt32 index, Chela.Graphics.GL2.NvEvaluators type, Int32 ustride, Int32 vstride, bool packed, T6[,] points)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle points_ptr = GCHandle.Alloc(points, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetMapControlPointsNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        points_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMapControlPoints<T6>(Chela.Graphics.GL2.NvEvaluators target, UInt32 index, Chela.Graphics.GL2.NvEvaluators type, Int32 ustride, Int32 vstride, bool packed, T6[,,] points)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle points_ptr = GCHandle.Alloc(points, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetMapControlPointsNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        points_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMapControlPoints<T6>(Chela.Graphics.GL2.NvEvaluators target, UInt32 index, Chela.Graphics.GL2.NvEvaluators type, Int32 ustride, Int32 vstride, bool packed, ref T6 points)
                where T6 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle points_ptr = GCHandle.Alloc(points, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetMapControlPointsNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                        points = (T6)points_ptr.Target;
                    }
                    finally
                    {
                        points_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMapParameter(Chela.Graphics.GL2.NvEvaluators target, Chela.Graphics.GL2.NvEvaluators pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetMapParameterfvNV((Chela.Graphics.GL2.NvEvaluators)target, (Chela.Graphics.GL2.NvEvaluators)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMapParameter(Chela.Graphics.GL2.NvEvaluators target, Chela.Graphics.GL2.NvEvaluators pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetMapParameterfvNV((Chela.Graphics.GL2.NvEvaluators)target, (Chela.Graphics.GL2.NvEvaluators)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetMapParameter(Chela.Graphics.GL2.NvEvaluators target, Chela.Graphics.GL2.NvEvaluators pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetMapParameterfvNV((Chela.Graphics.GL2.NvEvaluators)target, (Chela.Graphics.GL2.NvEvaluators)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMapParameter(Chela.Graphics.GL2.NvEvaluators target, Chela.Graphics.GL2.NvEvaluators pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetMapParameterivNV((Chela.Graphics.GL2.NvEvaluators)target, (Chela.Graphics.GL2.NvEvaluators)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMapParameter(Chela.Graphics.GL2.NvEvaluators target, Chela.Graphics.GL2.NvEvaluators pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetMapParameterivNV((Chela.Graphics.GL2.NvEvaluators)target, (Chela.Graphics.GL2.NvEvaluators)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetMapParameter(Chela.Graphics.GL2.NvEvaluators target, Chela.Graphics.GL2.NvEvaluators pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetMapParameterivNV((Chela.Graphics.GL2.NvEvaluators)target, (Chela.Graphics.GL2.NvEvaluators)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultisample(Chela.Graphics.GL2.NvExplicitMultisample pname, Int32 index, Single[] val)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* val_ptr = val)
                    {
                        Delegates.glGetMultisamplefvNV((Chela.Graphics.GL2.NvExplicitMultisample)pname, (UInt32)index, (Single*)val_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultisample(Chela.Graphics.GL2.NvExplicitMultisample pname, Int32 index, out Single val)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* val_ptr = &val)
                    {
                        Delegates.glGetMultisamplefvNV((Chela.Graphics.GL2.NvExplicitMultisample)pname, (UInt32)index, (Single*)val_ptr);
                        val = *val_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetMultisample(Chela.Graphics.GL2.NvExplicitMultisample pname, Int32 index, Single* val)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetMultisamplefvNV((Chela.Graphics.GL2.NvExplicitMultisample)pname, (UInt32)index, (Single*)val);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultisample(Chela.Graphics.GL2.NvExplicitMultisample pname, UInt32 index, Single[] val)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* val_ptr = val)
                    {
                        Delegates.glGetMultisamplefvNV((Chela.Graphics.GL2.NvExplicitMultisample)pname, (UInt32)index, (Single*)val_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetMultisample(Chela.Graphics.GL2.NvExplicitMultisample pname, UInt32 index, out Single val)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* val_ptr = &val)
                    {
                        Delegates.glGetMultisamplefvNV((Chela.Graphics.GL2.NvExplicitMultisample)pname, (UInt32)index, (Single*)val_ptr);
                        val = *val_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetMultisample(Chela.Graphics.GL2.NvExplicitMultisample pname, UInt32 index, Single* val)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetMultisamplefvNV((Chela.Graphics.GL2.NvExplicitMultisample)pname, (UInt32)index, (Single*)val);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetOcclusionQuery(Int32 id, Chela.Graphics.GL2.NvOcclusionQuery pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetOcclusionQueryivNV((UInt32)id, (Chela.Graphics.GL2.NvOcclusionQuery)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetOcclusionQuery(Int32 id, Chela.Graphics.GL2.NvOcclusionQuery pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetOcclusionQueryivNV((UInt32)id, (Chela.Graphics.GL2.NvOcclusionQuery)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetOcclusionQuery(Int32 id, Chela.Graphics.GL2.NvOcclusionQuery pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetOcclusionQueryivNV((UInt32)id, (Chela.Graphics.GL2.NvOcclusionQuery)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetOcclusionQuery(UInt32 id, Chela.Graphics.GL2.NvOcclusionQuery pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetOcclusionQueryivNV((UInt32)id, (Chela.Graphics.GL2.NvOcclusionQuery)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetOcclusionQuery(UInt32 id, Chela.Graphics.GL2.NvOcclusionQuery pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetOcclusionQueryivNV((UInt32)id, (Chela.Graphics.GL2.NvOcclusionQuery)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetOcclusionQuery(UInt32 id, Chela.Graphics.GL2.NvOcclusionQuery pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetOcclusionQueryivNV((UInt32)id, (Chela.Graphics.GL2.NvOcclusionQuery)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetOcclusionQuery(UInt32 id, Chela.Graphics.GL2.NvOcclusionQuery pname, UInt32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetOcclusionQueryuivNV((UInt32)id, (Chela.Graphics.GL2.NvOcclusionQuery)pname, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetOcclusionQuery(UInt32 id, Chela.Graphics.GL2.NvOcclusionQuery pname, out UInt32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetOcclusionQueryuivNV((UInt32)id, (Chela.Graphics.GL2.NvOcclusionQuery)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetOcclusionQuery(UInt32 id, Chela.Graphics.GL2.NvOcclusionQuery pname, UInt32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetOcclusionQueryuivNV((UInt32)id, (Chela.Graphics.GL2.NvOcclusionQuery)pname, (UInt32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramEnvParameterI(Chela.Graphics.GL2.NvGpuProgram4 target, Int32 index, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterIivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramEnvParameterI(Chela.Graphics.GL2.NvGpuProgram4 target, Int32 index, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterIivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramEnvParameterI(Chela.Graphics.GL2.NvGpuProgram4 target, Int32 index, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramEnvParameterIivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramEnvParameterI(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterIivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramEnvParameterI(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterIivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramEnvParameterI(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramEnvParameterIivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramEnvParameterI(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, UInt32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetProgramEnvParameterIuivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramEnvParameterI(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, out UInt32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramEnvParameterIuivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramEnvParameterI(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, UInt32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramEnvParameterIuivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgram(Int32 id, Chela.Graphics.GL2.NvVertexProgram pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetProgramivNV((UInt32)id, (Chela.Graphics.GL2.NvVertexProgram)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgram(Int32 id, Chela.Graphics.GL2.NvVertexProgram pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramivNV((UInt32)id, (Chela.Graphics.GL2.NvVertexProgram)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgram(Int32 id, Chela.Graphics.GL2.NvVertexProgram pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramivNV((UInt32)id, (Chela.Graphics.GL2.NvVertexProgram)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgram(UInt32 id, Chela.Graphics.GL2.NvVertexProgram pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetProgramivNV((UInt32)id, (Chela.Graphics.GL2.NvVertexProgram)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgram(UInt32 id, Chela.Graphics.GL2.NvVertexProgram pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramivNV((UInt32)id, (Chela.Graphics.GL2.NvVertexProgram)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgram(UInt32 id, Chela.Graphics.GL2.NvVertexProgram pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramivNV((UInt32)id, (Chela.Graphics.GL2.NvVertexProgram)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramLocalParameterI(Chela.Graphics.GL2.NvGpuProgram4 target, Int32 index, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterIivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramLocalParameterI(Chela.Graphics.GL2.NvGpuProgram4 target, Int32 index, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterIivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramLocalParameterI(Chela.Graphics.GL2.NvGpuProgram4 target, Int32 index, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramLocalParameterIivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramLocalParameterI(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterIivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramLocalParameterI(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterIivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramLocalParameterI(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramLocalParameterIivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramLocalParameterI(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, UInt32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetProgramLocalParameterIuivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramLocalParameterI(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, out UInt32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramLocalParameterIuivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramLocalParameterI(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, UInt32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramLocalParameterIuivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramNamedParameter(Int32 id, Int32 len, ref Byte name, out Double @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramNamedParameter(Int32 id, Int32 len, Byte* name, Double[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Double* @params_ptr = @params)
                {
                    Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)@params_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramNamedParameter(Int32 id, Int32 len, Byte* name, Double* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramNamedParameter(UInt32 id, Int32 len, ref Byte name, out Double @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramNamedParameter(UInt32 id, Int32 len, Byte* name, Double[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Double* @params_ptr = @params)
                {
                    Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)@params_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramNamedParameter(UInt32 id, Int32 len, Byte* name, Double* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramNamedParameterdvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramNamedParameter(Int32 id, Int32 len, ref Byte name, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramNamedParameter(Int32 id, Int32 len, Byte* name, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)@params_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramNamedParameter(Int32 id, Int32 len, Byte* name, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramNamedParameter(UInt32 id, Int32 len, ref Byte name, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramNamedParameter(UInt32 id, Int32 len, Byte* name, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)@params_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramNamedParameter(UInt32 id, Int32 len, Byte* name, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramNamedParameterfvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramParameter(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Chela.Graphics.GL2.AssemblyProgramParameterArb pname, Double[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetProgramParameterdvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Chela.Graphics.GL2.AssemblyProgramParameterArb)pname, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramParameter(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Chela.Graphics.GL2.AssemblyProgramParameterArb pname, out Double @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramParameterdvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Chela.Graphics.GL2.AssemblyProgramParameterArb)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramParameter(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Chela.Graphics.GL2.AssemblyProgramParameterArb pname, Double* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramParameterdvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Chela.Graphics.GL2.AssemblyProgramParameterArb)pname, (Double*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramParameter(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Chela.Graphics.GL2.AssemblyProgramParameterArb pname, Double[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = @params)
                    {
                        Delegates.glGetProgramParameterdvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Chela.Graphics.GL2.AssemblyProgramParameterArb)pname, (Double*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramParameter(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Chela.Graphics.GL2.AssemblyProgramParameterArb pname, out Double @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramParameterdvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Chela.Graphics.GL2.AssemblyProgramParameterArb)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramParameter(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Chela.Graphics.GL2.AssemblyProgramParameterArb pname, Double* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramParameterdvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Chela.Graphics.GL2.AssemblyProgramParameterArb)pname, (Double*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramParameter(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Chela.Graphics.GL2.AssemblyProgramParameterArb pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetProgramParameterfvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Chela.Graphics.GL2.AssemblyProgramParameterArb)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramParameter(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Chela.Graphics.GL2.AssemblyProgramParameterArb pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramParameterfvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Chela.Graphics.GL2.AssemblyProgramParameterArb)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramParameter(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Chela.Graphics.GL2.AssemblyProgramParameterArb pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramParameterfvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Chela.Graphics.GL2.AssemblyProgramParameterArb)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramParameter(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Chela.Graphics.GL2.AssemblyProgramParameterArb pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetProgramParameterfvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Chela.Graphics.GL2.AssemblyProgramParameterArb)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramParameter(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Chela.Graphics.GL2.AssemblyProgramParameterArb pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetProgramParameterfvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Chela.Graphics.GL2.AssemblyProgramParameterArb)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramParameter(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Chela.Graphics.GL2.AssemblyProgramParameterArb pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramParameterfvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Chela.Graphics.GL2.AssemblyProgramParameterArb)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramString(Int32 id, Chela.Graphics.GL2.NvVertexProgram pname, Byte[] program)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* program_ptr = program)
                    {
                        Delegates.glGetProgramStringNV((UInt32)id, (Chela.Graphics.GL2.NvVertexProgram)pname, (Byte*)program_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramString(Int32 id, Chela.Graphics.GL2.NvVertexProgram pname, out Byte program)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* program_ptr = &program)
                    {
                        Delegates.glGetProgramStringNV((UInt32)id, (Chela.Graphics.GL2.NvVertexProgram)pname, (Byte*)program_ptr);
                        program = *program_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramString(Int32 id, Chela.Graphics.GL2.NvVertexProgram pname, Byte* program)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramStringNV((UInt32)id, (Chela.Graphics.GL2.NvVertexProgram)pname, (Byte*)program);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramString(UInt32 id, Chela.Graphics.GL2.NvVertexProgram pname, Byte[] program)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* program_ptr = program)
                    {
                        Delegates.glGetProgramStringNV((UInt32)id, (Chela.Graphics.GL2.NvVertexProgram)pname, (Byte*)program_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramString(UInt32 id, Chela.Graphics.GL2.NvVertexProgram pname, out Byte program)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* program_ptr = &program)
                    {
                        Delegates.glGetProgramStringNV((UInt32)id, (Chela.Graphics.GL2.NvVertexProgram)pname, (Byte*)program_ptr);
                        program = *program_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramString(UInt32 id, Chela.Graphics.GL2.NvVertexProgram pname, Byte* program)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramStringNV((UInt32)id, (Chela.Graphics.GL2.NvVertexProgram)pname, (Byte*)program);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTrackMatrix(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 address, Chela.Graphics.GL2.AssemblyProgramParameterArb pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTrackMatrixivNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)address, (Chela.Graphics.GL2.AssemblyProgramParameterArb)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetTrackMatrix(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 address, Chela.Graphics.GL2.AssemblyProgramParameterArb pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetTrackMatrixivNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)address, (Chela.Graphics.GL2.AssemblyProgramParameterArb)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTrackMatrix(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 address, Chela.Graphics.GL2.AssemblyProgramParameterArb pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetTrackMatrixivNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)address, (Chela.Graphics.GL2.AssemblyProgramParameterArb)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetTrackMatrix(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 address, Chela.Graphics.GL2.AssemblyProgramParameterArb pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetTrackMatrixivNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)address, (Chela.Graphics.GL2.AssemblyProgramParameterArb)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTransformFeedbackVarying(Int32 program, Int32 index, out Int32 location)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* location_ptr = &location)
                    {
                        Delegates.glGetTransformFeedbackVaryingNV((UInt32)program, (UInt32)index, (Int32*)location_ptr);
                        location = *location_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetTransformFeedbackVarying(Int32 program, Int32 index, Int32* location)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetTransformFeedbackVaryingNV((UInt32)program, (UInt32)index, (Int32*)location);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTransformFeedbackVarying(UInt32 program, UInt32 index, out Int32 location)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* location_ptr = &location)
                    {
                        Delegates.glGetTransformFeedbackVaryingNV((UInt32)program, (UInt32)index, (Int32*)location_ptr);
                        location = *location_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetTransformFeedbackVarying(UInt32 program, UInt32 index, Int32* location)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetTransformFeedbackVaryingNV((UInt32)program, (UInt32)index, (Int32*)location);
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 GetVaryingLocation(Int32 program, String name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        return Delegates.glGetVaryingLocationNV((UInt32)program, name_ptr.Address);
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 GetVaryingLocation(UInt32 program, String name)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        return Delegates.glGetVaryingLocationNV((UInt32)program, name_ptr.Address);
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.NvVertexProgram pname, out Double @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribdvNV((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.NvVertexProgram pname, Double* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVertexAttribdvNV((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram)pname, (Double*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.NvVertexProgram pname, out Double @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribdvNV((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram)pname, (Double*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.NvVertexProgram pname, Double* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVertexAttribdvNV((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram)pname, (Double*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.NvVertexProgram pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribfvNV((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.NvVertexProgram pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVertexAttribfvNV((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.NvVertexProgram pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribfvNV((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.NvVertexProgram pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVertexAttribfvNV((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.NvVertexProgram pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribivNV((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVertexAttrib(Int32 index, Chela.Graphics.GL2.NvVertexProgram pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVertexAttribivNV((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.NvVertexProgram pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVertexAttribivNV((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVertexAttrib(UInt32 index, Chela.Graphics.GL2.NvVertexProgram pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVertexAttribivNV((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribPointer(Int32 index, Chela.Graphics.GL2.NvVertexProgram pname, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetVertexAttribPointervNV((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram)pname, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribPointer<T2>(Int32 index, Chela.Graphics.GL2.NvVertexProgram pname, T2[] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointervNV((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribPointer<T2>(Int32 index, Chela.Graphics.GL2.NvVertexProgram pname, T2[,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointervNV((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribPointer<T2>(Int32 index, Chela.Graphics.GL2.NvVertexProgram pname, T2[,,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointervNV((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribPointer<T2>(Int32 index, Chela.Graphics.GL2.NvVertexProgram pname, ref T2 pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointervNV((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T2)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribPointer(UInt32 index, Chela.Graphics.GL2.NvVertexProgram pname, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetVertexAttribPointervNV((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram)pname, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribPointer<T2>(UInt32 index, Chela.Graphics.GL2.NvVertexProgram pname, T2[] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointervNV((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribPointer<T2>(UInt32 index, Chela.Graphics.GL2.NvVertexProgram pname, T2[,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointervNV((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribPointer<T2>(UInt32 index, Chela.Graphics.GL2.NvVertexProgram pname, T2[,,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointervNV((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVertexAttribPointer<T2>(UInt32 index, Chela.Graphics.GL2.NvVertexProgram pname, ref T2 pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetVertexAttribPointervNV((UInt32)index, (Chela.Graphics.GL2.NvVertexProgram)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T2)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVideoi64(Int32 video_slot, Chela.Graphics.GL2.NvPresentVideo pname, Int64[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int64* @params_ptr = @params)
                    {
                        Delegates.glGetVideoi64vNV((UInt32)video_slot, (Chela.Graphics.GL2.NvPresentVideo)pname, (Int64*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVideoi64(Int32 video_slot, Chela.Graphics.GL2.NvPresentVideo pname, out Int64 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int64* @params_ptr = &@params)
                    {
                        Delegates.glGetVideoi64vNV((UInt32)video_slot, (Chela.Graphics.GL2.NvPresentVideo)pname, (Int64*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVideoi64(Int32 video_slot, Chela.Graphics.GL2.NvPresentVideo pname, Int64* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVideoi64vNV((UInt32)video_slot, (Chela.Graphics.GL2.NvPresentVideo)pname, (Int64*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVideoi64(UInt32 video_slot, Chela.Graphics.GL2.NvPresentVideo pname, Int64[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int64* @params_ptr = @params)
                    {
                        Delegates.glGetVideoi64vNV((UInt32)video_slot, (Chela.Graphics.GL2.NvPresentVideo)pname, (Int64*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVideoi64(UInt32 video_slot, Chela.Graphics.GL2.NvPresentVideo pname, out Int64 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int64* @params_ptr = &@params)
                    {
                        Delegates.glGetVideoi64vNV((UInt32)video_slot, (Chela.Graphics.GL2.NvPresentVideo)pname, (Int64*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVideoi64(UInt32 video_slot, Chela.Graphics.GL2.NvPresentVideo pname, Int64* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVideoi64vNV((UInt32)video_slot, (Chela.Graphics.GL2.NvPresentVideo)pname, (Int64*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVideo(Int32 video_slot, Chela.Graphics.GL2.NvPresentVideo pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetVideoivNV((UInt32)video_slot, (Chela.Graphics.GL2.NvPresentVideo)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVideo(Int32 video_slot, Chela.Graphics.GL2.NvPresentVideo pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVideoivNV((UInt32)video_slot, (Chela.Graphics.GL2.NvPresentVideo)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVideo(Int32 video_slot, Chela.Graphics.GL2.NvPresentVideo pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVideoivNV((UInt32)video_slot, (Chela.Graphics.GL2.NvPresentVideo)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVideo(UInt32 video_slot, Chela.Graphics.GL2.NvPresentVideo pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetVideoivNV((UInt32)video_slot, (Chela.Graphics.GL2.NvPresentVideo)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVideo(UInt32 video_slot, Chela.Graphics.GL2.NvPresentVideo pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetVideoivNV((UInt32)video_slot, (Chela.Graphics.GL2.NvPresentVideo)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVideo(UInt32 video_slot, Chela.Graphics.GL2.NvPresentVideo pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVideoivNV((UInt32)video_slot, (Chela.Graphics.GL2.NvPresentVideo)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVideoui64(Int32 video_slot, Chela.Graphics.GL2.NvPresentVideo pname, Int64[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int64* @params_ptr = @params)
                    {
                        Delegates.glGetVideoui64vNV((UInt32)video_slot, (Chela.Graphics.GL2.NvPresentVideo)pname, (UInt64*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVideoui64(Int32 video_slot, Chela.Graphics.GL2.NvPresentVideo pname, out Int64 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int64* @params_ptr = &@params)
                    {
                        Delegates.glGetVideoui64vNV((UInt32)video_slot, (Chela.Graphics.GL2.NvPresentVideo)pname, (UInt64*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVideoui64(Int32 video_slot, Chela.Graphics.GL2.NvPresentVideo pname, Int64* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVideoui64vNV((UInt32)video_slot, (Chela.Graphics.GL2.NvPresentVideo)pname, (UInt64*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVideoui64(UInt32 video_slot, Chela.Graphics.GL2.NvPresentVideo pname, UInt64[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt64* @params_ptr = @params)
                    {
                        Delegates.glGetVideoui64vNV((UInt32)video_slot, (Chela.Graphics.GL2.NvPresentVideo)pname, (UInt64*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVideoui64(UInt32 video_slot, Chela.Graphics.GL2.NvPresentVideo pname, out UInt64 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt64* @params_ptr = &@params)
                    {
                        Delegates.glGetVideoui64vNV((UInt32)video_slot, (Chela.Graphics.GL2.NvPresentVideo)pname, (UInt64*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVideoui64(UInt32 video_slot, Chela.Graphics.GL2.NvPresentVideo pname, UInt64* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVideoui64vNV((UInt32)video_slot, (Chela.Graphics.GL2.NvPresentVideo)pname, (UInt64*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVideo(UInt32 video_slot, Chela.Graphics.GL2.NvPresentVideo pname, UInt32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glGetVideouivNV((UInt32)video_slot, (Chela.Graphics.GL2.NvPresentVideo)pname, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetVideo(UInt32 video_slot, Chela.Graphics.GL2.NvPresentVideo pname, out UInt32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glGetVideouivNV((UInt32)video_slot, (Chela.Graphics.GL2.NvPresentVideo)pname, (UInt32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetVideo(UInt32 video_slot, Chela.Graphics.GL2.NvPresentVideo pname, UInt32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetVideouivNV((UInt32)video_slot, (Chela.Graphics.GL2.NvPresentVideo)pname, (UInt32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsFence(Int32 fence)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsFenceNV((UInt32)fence);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsFence(UInt32 fence)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsFenceNV((UInt32)fence);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsOcclusionQuery(Int32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsOcclusionQueryNV((UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsOcclusionQuery(UInt32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsOcclusionQueryNV((UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsProgram(Int32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsProgramNV((UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsProgram(UInt32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsProgramNV((UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsTransformFeedback(Int32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsTransformFeedbackNV((UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsTransformFeedback(UInt32 id)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsTransformFeedbackNV((UInt32)id);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void LoadProgram(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 id, Int32 len, Byte[] program)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* program_ptr = program)
                    {
                        Delegates.glLoadProgramNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)id, (Int32)len, (Byte*)program_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void LoadProgram(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 id, Int32 len, ref Byte program)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* program_ptr = &program)
                    {
                        Delegates.glLoadProgramNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)id, (Int32)len, (Byte*)program_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void LoadProgram(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 id, Int32 len, Byte* program)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glLoadProgramNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)id, (Int32)len, (Byte*)program);
                #if DEBUG
                }
                #endif
            }

            public static 
            void LoadProgram(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 id, Int32 len, Byte[] program)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* program_ptr = program)
                    {
                        Delegates.glLoadProgramNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)id, (Int32)len, (Byte*)program_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void LoadProgram(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 id, Int32 len, ref Byte program)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* program_ptr = &program)
                    {
                        Delegates.glLoadProgramNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)id, (Int32)len, (Byte*)program_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void LoadProgram(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 id, Int32 len, Byte* program)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glLoadProgramNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)id, (Int32)len, (Byte*)program);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapControlPoints(Chela.Graphics.GL2.NvEvaluators target, Int32 index, Chela.Graphics.GL2.NvEvaluators type, Int32 ustride, Int32 vstride, Int32 uorder, Int32 vorder, bool packed, IntPtr points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMapControlPointsNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (Int32)uorder, (Int32)vorder, (bool)packed, (IntPtr)points);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapControlPoints<T8>(Chela.Graphics.GL2.NvEvaluators target, Int32 index, Chela.Graphics.GL2.NvEvaluators type, Int32 ustride, Int32 vstride, Int32 uorder, Int32 vorder, bool packed, T8[] points)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle points_ptr = GCHandle.Alloc(points, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMapControlPointsNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (Int32)uorder, (Int32)vorder, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        points_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapControlPoints<T8>(Chela.Graphics.GL2.NvEvaluators target, Int32 index, Chela.Graphics.GL2.NvEvaluators type, Int32 ustride, Int32 vstride, Int32 uorder, Int32 vorder, bool packed, T8[,] points)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle points_ptr = GCHandle.Alloc(points, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMapControlPointsNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (Int32)uorder, (Int32)vorder, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        points_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapControlPoints<T8>(Chela.Graphics.GL2.NvEvaluators target, Int32 index, Chela.Graphics.GL2.NvEvaluators type, Int32 ustride, Int32 vstride, Int32 uorder, Int32 vorder, bool packed, T8[,,] points)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle points_ptr = GCHandle.Alloc(points, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMapControlPointsNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (Int32)uorder, (Int32)vorder, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        points_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapControlPoints<T8>(Chela.Graphics.GL2.NvEvaluators target, Int32 index, Chela.Graphics.GL2.NvEvaluators type, Int32 ustride, Int32 vstride, Int32 uorder, Int32 vorder, bool packed, ref T8 points)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle points_ptr = GCHandle.Alloc(points, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMapControlPointsNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (Int32)uorder, (Int32)vorder, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                        points = (T8)points_ptr.Target;
                    }
                    finally
                    {
                        points_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapControlPoints(Chela.Graphics.GL2.NvEvaluators target, UInt32 index, Chela.Graphics.GL2.NvEvaluators type, Int32 ustride, Int32 vstride, Int32 uorder, Int32 vorder, bool packed, IntPtr points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMapControlPointsNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (Int32)uorder, (Int32)vorder, (bool)packed, (IntPtr)points);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapControlPoints<T8>(Chela.Graphics.GL2.NvEvaluators target, UInt32 index, Chela.Graphics.GL2.NvEvaluators type, Int32 ustride, Int32 vstride, Int32 uorder, Int32 vorder, bool packed, T8[] points)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle points_ptr = GCHandle.Alloc(points, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMapControlPointsNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (Int32)uorder, (Int32)vorder, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        points_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapControlPoints<T8>(Chela.Graphics.GL2.NvEvaluators target, UInt32 index, Chela.Graphics.GL2.NvEvaluators type, Int32 ustride, Int32 vstride, Int32 uorder, Int32 vorder, bool packed, T8[,] points)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle points_ptr = GCHandle.Alloc(points, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMapControlPointsNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (Int32)uorder, (Int32)vorder, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        points_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapControlPoints<T8>(Chela.Graphics.GL2.NvEvaluators target, UInt32 index, Chela.Graphics.GL2.NvEvaluators type, Int32 ustride, Int32 vstride, Int32 uorder, Int32 vorder, bool packed, T8[,,] points)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle points_ptr = GCHandle.Alloc(points, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMapControlPointsNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (Int32)uorder, (Int32)vorder, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        points_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapControlPoints<T8>(Chela.Graphics.GL2.NvEvaluators target, UInt32 index, Chela.Graphics.GL2.NvEvaluators type, Int32 ustride, Int32 vstride, Int32 uorder, Int32 vorder, bool packed, ref T8 points)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle points_ptr = GCHandle.Alloc(points, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glMapControlPointsNV((Chela.Graphics.GL2.NvEvaluators)target, (UInt32)index, (Chela.Graphics.GL2.NvEvaluators)type, (Int32)ustride, (Int32)vstride, (Int32)uorder, (Int32)vorder, (bool)packed, (IntPtr)points_ptr.AddrOfPinnedObject());
                        points = (T8)points_ptr.Target;
                    }
                    finally
                    {
                        points_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapParameter(Chela.Graphics.GL2.NvEvaluators target, Chela.Graphics.GL2.NvEvaluators pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glMapParameterfvNV((Chela.Graphics.GL2.NvEvaluators)target, (Chela.Graphics.GL2.NvEvaluators)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapParameter(Chela.Graphics.GL2.NvEvaluators target, Chela.Graphics.GL2.NvEvaluators pname, ref Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glMapParameterfvNV((Chela.Graphics.GL2.NvEvaluators)target, (Chela.Graphics.GL2.NvEvaluators)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MapParameter(Chela.Graphics.GL2.NvEvaluators target, Chela.Graphics.GL2.NvEvaluators pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMapParameterfvNV((Chela.Graphics.GL2.NvEvaluators)target, (Chela.Graphics.GL2.NvEvaluators)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapParameter(Chela.Graphics.GL2.NvEvaluators target, Chela.Graphics.GL2.NvEvaluators pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glMapParameterivNV((Chela.Graphics.GL2.NvEvaluators)target, (Chela.Graphics.GL2.NvEvaluators)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MapParameter(Chela.Graphics.GL2.NvEvaluators target, Chela.Graphics.GL2.NvEvaluators pname, ref Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glMapParameterivNV((Chela.Graphics.GL2.NvEvaluators)target, (Chela.Graphics.GL2.NvEvaluators)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MapParameter(Chela.Graphics.GL2.NvEvaluators target, Chela.Graphics.GL2.NvEvaluators pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMapParameterivNV((Chela.Graphics.GL2.NvEvaluators)target, (Chela.Graphics.GL2.NvEvaluators)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord1h(Chela.Graphics.GL2.TextureUnit target, Chela.Graphics.Half s)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexCoord1hNV((Chela.Graphics.GL2.TextureUnit)target, (Chela.Graphics.Half)s);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexCoord1h(Chela.Graphics.GL2.TextureUnit target, Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexCoord1hvNV((Chela.Graphics.GL2.TextureUnit)target, (Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord2h(Chela.Graphics.GL2.TextureUnit target, Chela.Graphics.Half s, Chela.Graphics.Half t)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexCoord2hNV((Chela.Graphics.GL2.TextureUnit)target, (Chela.Graphics.Half)s, (Chela.Graphics.Half)t);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord2h(Chela.Graphics.GL2.TextureUnit target, Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord2hvNV((Chela.Graphics.GL2.TextureUnit)target, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord2h(Chela.Graphics.GL2.TextureUnit target, ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord2hvNV((Chela.Graphics.GL2.TextureUnit)target, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexCoord2h(Chela.Graphics.GL2.TextureUnit target, Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexCoord2hvNV((Chela.Graphics.GL2.TextureUnit)target, (Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord3h(Chela.Graphics.GL2.TextureUnit target, Chela.Graphics.Half s, Chela.Graphics.Half t, Chela.Graphics.Half r)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexCoord3hNV((Chela.Graphics.GL2.TextureUnit)target, (Chela.Graphics.Half)s, (Chela.Graphics.Half)t, (Chela.Graphics.Half)r);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord3h(Chela.Graphics.GL2.TextureUnit target, Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord3hvNV((Chela.Graphics.GL2.TextureUnit)target, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord3h(Chela.Graphics.GL2.TextureUnit target, ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord3hvNV((Chela.Graphics.GL2.TextureUnit)target, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexCoord3h(Chela.Graphics.GL2.TextureUnit target, Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexCoord3hvNV((Chela.Graphics.GL2.TextureUnit)target, (Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord4h(Chela.Graphics.GL2.TextureUnit target, Chela.Graphics.Half s, Chela.Graphics.Half t, Chela.Graphics.Half r, Chela.Graphics.Half q)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glMultiTexCoord4hNV((Chela.Graphics.GL2.TextureUnit)target, (Chela.Graphics.Half)s, (Chela.Graphics.Half)t, (Chela.Graphics.Half)r, (Chela.Graphics.Half)q);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord4h(Chela.Graphics.GL2.TextureUnit target, Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glMultiTexCoord4hvNV((Chela.Graphics.GL2.TextureUnit)target, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void MultiTexCoord4h(Chela.Graphics.GL2.TextureUnit target, ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glMultiTexCoord4hvNV((Chela.Graphics.GL2.TextureUnit)target, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void MultiTexCoord4h(Chela.Graphics.GL2.TextureUnit target, Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glMultiTexCoord4hvNV((Chela.Graphics.GL2.TextureUnit)target, (Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Normal3h(Chela.Graphics.Half nx, Chela.Graphics.Half ny, Chela.Graphics.Half nz)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNormal3hNV((Chela.Graphics.Half)nx, (Chela.Graphics.Half)ny, (Chela.Graphics.Half)nz);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Normal3h(Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glNormal3hvNV((Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Normal3h(ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glNormal3hvNV((Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Normal3h(Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glNormal3hvNV((Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void PauseTransformFeedback()
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPauseTransformFeedbackNV();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PixelDataRange(Chela.Graphics.GL2.NvPixelDataRange target, Int32 length, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPixelDataRangeNV((Chela.Graphics.GL2.NvPixelDataRange)target, (Int32)length, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PixelDataRange<T2>(Chela.Graphics.GL2.NvPixelDataRange target, Int32 length, T2[] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glPixelDataRangeNV((Chela.Graphics.GL2.NvPixelDataRange)target, (Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PixelDataRange<T2>(Chela.Graphics.GL2.NvPixelDataRange target, Int32 length, T2[,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glPixelDataRangeNV((Chela.Graphics.GL2.NvPixelDataRange)target, (Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PixelDataRange<T2>(Chela.Graphics.GL2.NvPixelDataRange target, Int32 length, T2[,,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glPixelDataRangeNV((Chela.Graphics.GL2.NvPixelDataRange)target, (Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PixelDataRange<T2>(Chela.Graphics.GL2.NvPixelDataRange target, Int32 length, ref T2 pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glPixelDataRangeNV((Chela.Graphics.GL2.NvPixelDataRange)target, (Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T2)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PointParameter(Chela.Graphics.GL2.NvPointSprite pname, Int32 param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPointParameteriNV((Chela.Graphics.GL2.NvPointSprite)pname, (Int32)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PointParameter(Chela.Graphics.GL2.NvPointSprite pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glPointParameterivNV((Chela.Graphics.GL2.NvPointSprite)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void PointParameter(Chela.Graphics.GL2.NvPointSprite pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glPointParameterivNV((Chela.Graphics.GL2.NvPointSprite)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void PresentFrameDualFill(Int32 video_slot, Int64 minPresentTime, Int32 beginPresentTimeId, Int32 presentDurationId, Chela.Graphics.GL2.NvPresentVideo type, Chela.Graphics.GL2.NvPresentVideo target0, Int32 fill0, Chela.Graphics.GL2.NvPresentVideo target1, Int32 fill1, Chela.Graphics.GL2.NvPresentVideo target2, Int32 fill2, Chela.Graphics.GL2.NvPresentVideo target3, Int32 fill3)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPresentFrameDualFillNV((UInt32)video_slot, (UInt64)minPresentTime, (UInt32)beginPresentTimeId, (UInt32)presentDurationId, (Chela.Graphics.GL2.NvPresentVideo)type, (Chela.Graphics.GL2.NvPresentVideo)target0, (UInt32)fill0, (Chela.Graphics.GL2.NvPresentVideo)target1, (UInt32)fill1, (Chela.Graphics.GL2.NvPresentVideo)target2, (UInt32)fill2, (Chela.Graphics.GL2.NvPresentVideo)target3, (UInt32)fill3);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PresentFrameDualFill(UInt32 video_slot, UInt64 minPresentTime, UInt32 beginPresentTimeId, UInt32 presentDurationId, Chela.Graphics.GL2.NvPresentVideo type, Chela.Graphics.GL2.NvPresentVideo target0, UInt32 fill0, Chela.Graphics.GL2.NvPresentVideo target1, UInt32 fill1, Chela.Graphics.GL2.NvPresentVideo target2, UInt32 fill2, Chela.Graphics.GL2.NvPresentVideo target3, UInt32 fill3)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPresentFrameDualFillNV((UInt32)video_slot, (UInt64)minPresentTime, (UInt32)beginPresentTimeId, (UInt32)presentDurationId, (Chela.Graphics.GL2.NvPresentVideo)type, (Chela.Graphics.GL2.NvPresentVideo)target0, (UInt32)fill0, (Chela.Graphics.GL2.NvPresentVideo)target1, (UInt32)fill1, (Chela.Graphics.GL2.NvPresentVideo)target2, (UInt32)fill2, (Chela.Graphics.GL2.NvPresentVideo)target3, (UInt32)fill3);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PresentFrameKeye(Int32 video_slot, Int64 minPresentTime, Int32 beginPresentTimeId, Int32 presentDurationId, Chela.Graphics.GL2.NvPresentVideo type, Chela.Graphics.GL2.NvPresentVideo target0, Int32 fill0, Int32 key0, Chela.Graphics.GL2.NvPresentVideo target1, Int32 fill1, Int32 key1)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPresentFrameKeyedNV((UInt32)video_slot, (UInt64)minPresentTime, (UInt32)beginPresentTimeId, (UInt32)presentDurationId, (Chela.Graphics.GL2.NvPresentVideo)type, (Chela.Graphics.GL2.NvPresentVideo)target0, (UInt32)fill0, (UInt32)key0, (Chela.Graphics.GL2.NvPresentVideo)target1, (UInt32)fill1, (UInt32)key1);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PresentFrameKeye(UInt32 video_slot, UInt64 minPresentTime, UInt32 beginPresentTimeId, UInt32 presentDurationId, Chela.Graphics.GL2.NvPresentVideo type, Chela.Graphics.GL2.NvPresentVideo target0, UInt32 fill0, UInt32 key0, Chela.Graphics.GL2.NvPresentVideo target1, UInt32 fill1, UInt32 key1)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPresentFrameKeyedNV((UInt32)video_slot, (UInt64)minPresentTime, (UInt32)beginPresentTimeId, (UInt32)presentDurationId, (Chela.Graphics.GL2.NvPresentVideo)type, (Chela.Graphics.GL2.NvPresentVideo)target0, (UInt32)fill0, (UInt32)key0, (Chela.Graphics.GL2.NvPresentVideo)target1, (UInt32)fill1, (UInt32)key1);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PrimitiveRestartIndex(Int32 index)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPrimitiveRestartIndexNV((UInt32)index);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PrimitiveRestartIndex(UInt32 index)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPrimitiveRestartIndexNV((UInt32)index);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PrimitiveRestart()
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPrimitiveRestartNV();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramBufferParameters(Chela.Graphics.GL2.NvParameterBufferObject target, Int32 buffer, Int32 index, Int32 count, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramBufferParametersfvNV((Chela.Graphics.GL2.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramBufferParameters(Chela.Graphics.GL2.NvParameterBufferObject target, Int32 buffer, Int32 index, Int32 count, ref Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramBufferParametersfvNV((Chela.Graphics.GL2.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramBufferParameters(Chela.Graphics.GL2.NvParameterBufferObject target, Int32 buffer, Int32 index, Int32 count, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramBufferParametersfvNV((Chela.Graphics.GL2.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramBufferParameters(Chela.Graphics.GL2.NvParameterBufferObject target, UInt32 buffer, UInt32 index, Int32 count, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glProgramBufferParametersfvNV((Chela.Graphics.GL2.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramBufferParameters(Chela.Graphics.GL2.NvParameterBufferObject target, UInt32 buffer, UInt32 index, Int32 count, ref Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glProgramBufferParametersfvNV((Chela.Graphics.GL2.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramBufferParameters(Chela.Graphics.GL2.NvParameterBufferObject target, UInt32 buffer, UInt32 index, Int32 count, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramBufferParametersfvNV((Chela.Graphics.GL2.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramBufferParametersI(Chela.Graphics.GL2.NvParameterBufferObject target, Int32 buffer, Int32 index, Int32 count, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glProgramBufferParametersIivNV((Chela.Graphics.GL2.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramBufferParametersI(Chela.Graphics.GL2.NvParameterBufferObject target, Int32 buffer, Int32 index, Int32 count, ref Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glProgramBufferParametersIivNV((Chela.Graphics.GL2.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramBufferParametersI(Chela.Graphics.GL2.NvParameterBufferObject target, Int32 buffer, Int32 index, Int32 count, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramBufferParametersIivNV((Chela.Graphics.GL2.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramBufferParametersI(Chela.Graphics.GL2.NvParameterBufferObject target, UInt32 buffer, UInt32 index, Int32 count, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glProgramBufferParametersIivNV((Chela.Graphics.GL2.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramBufferParametersI(Chela.Graphics.GL2.NvParameterBufferObject target, UInt32 buffer, UInt32 index, Int32 count, ref Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glProgramBufferParametersIivNV((Chela.Graphics.GL2.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramBufferParametersI(Chela.Graphics.GL2.NvParameterBufferObject target, UInt32 buffer, UInt32 index, Int32 count, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramBufferParametersIivNV((Chela.Graphics.GL2.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramBufferParametersI(Chela.Graphics.GL2.NvParameterBufferObject target, UInt32 buffer, UInt32 index, Int32 count, UInt32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glProgramBufferParametersIuivNV((Chela.Graphics.GL2.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramBufferParametersI(Chela.Graphics.GL2.NvParameterBufferObject target, UInt32 buffer, UInt32 index, Int32 count, ref UInt32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glProgramBufferParametersIuivNV((Chela.Graphics.GL2.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramBufferParametersI(Chela.Graphics.GL2.NvParameterBufferObject target, UInt32 buffer, UInt32 index, Int32 count, UInt32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramBufferParametersIuivNV((Chela.Graphics.GL2.NvParameterBufferObject)target, (UInt32)buffer, (UInt32)index, (Int32)count, (UInt32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramEnvParameterI4iNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramEnvParameterI4iNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, Int32 index, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameterI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, Int32 index, ref Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameterI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramEnvParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, Int32 index, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramEnvParameterI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameterI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, ref Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameterI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramEnvParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramEnvParameterI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramEnvParameterI4uiNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, UInt32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParameterI4uivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, ref UInt32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParameterI4uivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramEnvParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, UInt32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramEnvParameterI4uivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParametersI4(Chela.Graphics.GL2.NvGpuProgram4 target, Int32 index, Int32 count, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParametersI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParametersI4(Chela.Graphics.GL2.NvGpuProgram4 target, Int32 index, Int32 count, ref Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParametersI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramEnvParametersI4(Chela.Graphics.GL2.NvGpuProgram4 target, Int32 index, Int32 count, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramEnvParametersI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParametersI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, Int32 count, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParametersI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParametersI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, Int32 count, ref Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParametersI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramEnvParametersI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, Int32 count, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramEnvParametersI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParametersI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, Int32 count, UInt32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glProgramEnvParametersI4uivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramEnvParametersI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, Int32 count, ref UInt32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glProgramEnvParametersI4uivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramEnvParametersI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, Int32 count, UInt32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramEnvParametersI4uivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32)count, (UInt32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, Int32 index, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramLocalParameterI4iNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, Int32 x, Int32 y, Int32 z, Int32 w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramLocalParameterI4iNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, Int32 index, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameterI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, Int32 index, ref Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameterI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramLocalParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, Int32 index, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramLocalParameterI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameterI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, ref Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameterI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramLocalParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramLocalParameterI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, UInt32 x, UInt32 y, UInt32 z, UInt32 w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramLocalParameterI4uiNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (UInt32)x, (UInt32)y, (UInt32)z, (UInt32)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, UInt32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParameterI4uivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, ref UInt32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParameterI4uivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramLocalParameterI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, UInt32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramLocalParameterI4uivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (UInt32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParametersI4(Chela.Graphics.GL2.NvGpuProgram4 target, Int32 index, Int32 count, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParametersI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParametersI4(Chela.Graphics.GL2.NvGpuProgram4 target, Int32 index, Int32 count, ref Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParametersI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramLocalParametersI4(Chela.Graphics.GL2.NvGpuProgram4 target, Int32 index, Int32 count, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramLocalParametersI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParametersI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, Int32 count, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParametersI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParametersI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, Int32 count, ref Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParametersI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramLocalParametersI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, Int32 count, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramLocalParametersI4ivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32)count, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParametersI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, Int32 count, UInt32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = @params)
                    {
                        Delegates.glProgramLocalParametersI4uivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramLocalParametersI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, Int32 count, ref UInt32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* @params_ptr = &@params)
                    {
                        Delegates.glProgramLocalParametersI4uivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32)count, (UInt32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramLocalParametersI4(Chela.Graphics.GL2.NvGpuProgram4 target, UInt32 index, Int32 count, UInt32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramLocalParametersI4uivNV((Chela.Graphics.GL2.NvGpuProgram4)target, (UInt32)index, (Int32)count, (UInt32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramNamedParameter4(Int32 id, Int32 len, ref Byte name, Double x, Double y, Double z, Double w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    {
                        Delegates.glProgramNamedParameter4dNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double)x, (Double)y, (Double)z, (Double)w);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramNamedParameter4(Int32 id, Int32 len, Byte* name, Double x, Double y, Double z, Double w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramNamedParameter4dNV((UInt32)id, (Int32)len, (Byte*)name, (Double)x, (Double)y, (Double)z, (Double)w);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramNamedParameter4(UInt32 id, Int32 len, ref Byte name, Double x, Double y, Double z, Double w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    {
                        Delegates.glProgramNamedParameter4dNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double)x, (Double)y, (Double)z, (Double)w);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramNamedParameter4(UInt32 id, Int32 len, Byte* name, Double x, Double y, Double z, Double w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramNamedParameter4dNV((UInt32)id, (Int32)len, (Byte*)name, (Double)x, (Double)y, (Double)z, (Double)w);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramNamedParameter4(Int32 id, Int32 len, ref Byte name, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramNamedParameter4(Int32 id, Int32 len, Byte* name, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Double* v_ptr = v)
                {
                    Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)v_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramNamedParameter4(Int32 id, Int32 len, Byte* name, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramNamedParameter4(UInt32 id, Int32 len, ref Byte name, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramNamedParameter4(UInt32 id, Int32 len, Byte* name, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Double* v_ptr = v)
                {
                    Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)v_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramNamedParameter4(UInt32 id, Int32 len, Byte* name, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramNamedParameter4dvNV((UInt32)id, (Int32)len, (Byte*)name, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramNamedParameter4(Int32 id, Int32 len, ref Byte name, Single x, Single y, Single z, Single w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    {
                        Delegates.glProgramNamedParameter4fNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single)x, (Single)y, (Single)z, (Single)w);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramNamedParameter4(Int32 id, Int32 len, Byte* name, Single x, Single y, Single z, Single w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramNamedParameter4fNV((UInt32)id, (Int32)len, (Byte*)name, (Single)x, (Single)y, (Single)z, (Single)w);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramNamedParameter4(UInt32 id, Int32 len, ref Byte name, Single x, Single y, Single z, Single w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    {
                        Delegates.glProgramNamedParameter4fNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single)x, (Single)y, (Single)z, (Single)w);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramNamedParameter4(UInt32 id, Int32 len, Byte* name, Single x, Single y, Single z, Single w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramNamedParameter4fNV((UInt32)id, (Int32)len, (Byte*)name, (Single)x, (Single)y, (Single)z, (Single)w);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramNamedParameter4(Int32 id, Int32 len, ref Byte name, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramNamedParameter4(Int32 id, Int32 len, Byte* name, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Single* v_ptr = v)
                {
                    Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)v_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramNamedParameter4(Int32 id, Int32 len, Byte* name, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramNamedParameter4(UInt32 id, Int32 len, ref Byte name, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* name_ptr = &name)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramNamedParameter4(UInt32 id, Int32 len, Byte* name, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Single* v_ptr = v)
                {
                    Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)v_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramNamedParameter4(UInt32 id, Int32 len, Byte* name, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramNamedParameter4fvNV((UInt32)id, (Int32)len, (Byte*)name, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Double x, Double y, Double z, Double w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramParameter4dNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Double x, Double y, Double z, Double w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramParameter4dNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glProgramParameter4dvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glProgramParameter4dvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramParameter4dvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glProgramParameter4dvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glProgramParameter4dvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramParameter4dvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Single x, Single y, Single z, Single w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramParameter4fNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Single x, Single y, Single z, Single w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramParameter4fNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glProgramParameter4fvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glProgramParameter4fvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramParameter4fvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glProgramParameter4fvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glProgramParameter4fvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramParameter4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramParameter4fvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameters4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Int32 count, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glProgramParameters4dvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (UInt32)count, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameters4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Int32 count, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glProgramParameters4dvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (UInt32)count, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramParameters4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Int32 count, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramParameters4dvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (UInt32)count, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameters4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, UInt32 count, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glProgramParameters4dvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (UInt32)count, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameters4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, UInt32 count, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glProgramParameters4dvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (UInt32)count, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramParameters4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, UInt32 count, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramParameters4dvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (UInt32)count, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameters4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Int32 count, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glProgramParameters4fvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (UInt32)count, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameters4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Int32 count, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glProgramParameters4fvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (UInt32)count, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramParameters4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 index, Int32 count, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramParameters4fvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (UInt32)count, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameters4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, UInt32 count, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glProgramParameters4fvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (UInt32)count, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramParameters4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, UInt32 count, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glProgramParameters4fvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (UInt32)count, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ProgramParameters4(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 index, UInt32 count, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glProgramParameters4fvNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)index, (UInt32)count, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramVertexLimit(Chela.Graphics.GL2.NvGeometryProgram4 target, Int32 limit)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramVertexLimitNV((Chela.Graphics.GL2.NvGeometryProgram4)target, (Int32)limit);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void RenderbufferStorageMultisampleCoverage(Chela.Graphics.GL2.RenderbufferTarget target, Int32 coverageSamples, Int32 colorSamples, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glRenderbufferStorageMultisampleCoverageNV((Chela.Graphics.GL2.RenderbufferTarget)target, (Int32)coverageSamples, (Int32)colorSamples, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void RequestResidentProgram(Int32 n, Int32[] programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* programs_ptr = programs)
                    {
                        Delegates.glRequestResidentProgramsNV((Int32)n, (UInt32*)programs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void RequestResidentProgram(Int32 n, ref Int32 programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* programs_ptr = &programs)
                    {
                        Delegates.glRequestResidentProgramsNV((Int32)n, (UInt32*)programs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void RequestResidentProgram(Int32 n, Int32* programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glRequestResidentProgramsNV((Int32)n, (UInt32*)programs);
                #if DEBUG
                }
                #endif
            }

            public static 
            void RequestResidentProgram(Int32 n, UInt32[] programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* programs_ptr = programs)
                    {
                        Delegates.glRequestResidentProgramsNV((Int32)n, (UInt32*)programs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void RequestResidentProgram(Int32 n, ref UInt32 programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* programs_ptr = &programs)
                    {
                        Delegates.glRequestResidentProgramsNV((Int32)n, (UInt32*)programs_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void RequestResidentProgram(Int32 n, UInt32* programs)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glRequestResidentProgramsNV((Int32)n, (UInt32*)programs);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ResumeTransformFeedback()
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glResumeTransformFeedbackNV();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SampleMaskIndexed(Int32 index, Int32 mask)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSampleMaskIndexedNV((UInt32)index, (UInt32)mask);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SampleMaskIndexed(UInt32 index, UInt32 mask)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSampleMaskIndexedNV((UInt32)index, (UInt32)mask);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3h(Chela.Graphics.Half red, Chela.Graphics.Half green, Chela.Graphics.Half blue)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSecondaryColor3hNV((Chela.Graphics.Half)red, (Chela.Graphics.Half)green, (Chela.Graphics.Half)blue);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3h(Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glSecondaryColor3hvNV((Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SecondaryColor3h(ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glSecondaryColor3hvNV((Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void SecondaryColor3h(Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glSecondaryColor3hvNV((Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetFence(Int32 fence, Chela.Graphics.GL2.NvFence condition)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSetFenceNV((UInt32)fence, (Chela.Graphics.GL2.NvFence)condition);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetFence(UInt32 fence, Chela.Graphics.GL2.NvFence condition)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSetFenceNV((UInt32)fence, (Chela.Graphics.GL2.NvFence)condition);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool TestFence(Int32 fence)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glTestFenceNV((UInt32)fence);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool TestFence(UInt32 fence)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glTestFenceNV((UInt32)fence);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord1h(Chela.Graphics.Half s)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexCoord1hNV((Chela.Graphics.Half)s);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TexCoord1h(Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTexCoord1hvNV((Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord2h(Chela.Graphics.Half s, Chela.Graphics.Half t)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexCoord2hNV((Chela.Graphics.Half)s, (Chela.Graphics.Half)t);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord2h(Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glTexCoord2hvNV((Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord2h(ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glTexCoord2hvNV((Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TexCoord2h(Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTexCoord2hvNV((Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord3h(Chela.Graphics.Half s, Chela.Graphics.Half t, Chela.Graphics.Half r)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexCoord3hNV((Chela.Graphics.Half)s, (Chela.Graphics.Half)t, (Chela.Graphics.Half)r);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord3h(Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glTexCoord3hvNV((Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord3h(ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glTexCoord3hvNV((Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TexCoord3h(Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTexCoord3hvNV((Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord4h(Chela.Graphics.Half s, Chela.Graphics.Half t, Chela.Graphics.Half r, Chela.Graphics.Half q)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexCoord4hNV((Chela.Graphics.Half)s, (Chela.Graphics.Half)t, (Chela.Graphics.Half)r, (Chela.Graphics.Half)q);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord4h(Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glTexCoord4hvNV((Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord4h(ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glTexCoord4hvNV((Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TexCoord4h(Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTexCoord4hvNV((Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexRenderbuffer(Chela.Graphics.GL2.TextureTarget target, Int32 renderbuffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexRenderbufferNV((Chela.Graphics.GL2.TextureTarget)target, (UInt32)renderbuffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexRenderbuffer(Chela.Graphics.GL2.TextureTarget target, UInt32 renderbuffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexRenderbufferNV((Chela.Graphics.GL2.TextureTarget)target, (UInt32)renderbuffer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TrackMatrix(Chela.Graphics.GL2.AssemblyProgramTargetArb target, Int32 address, Chela.Graphics.GL2.NvVertexProgram matrix, Chela.Graphics.GL2.NvVertexProgram transform)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTrackMatrixNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)address, (Chela.Graphics.GL2.NvVertexProgram)matrix, (Chela.Graphics.GL2.NvVertexProgram)transform);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TrackMatrix(Chela.Graphics.GL2.AssemblyProgramTargetArb target, UInt32 address, Chela.Graphics.GL2.NvVertexProgram matrix, Chela.Graphics.GL2.NvVertexProgram transform)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTrackMatrixNV((Chela.Graphics.GL2.AssemblyProgramTargetArb)target, (UInt32)address, (Chela.Graphics.GL2.NvVertexProgram)matrix, (Chela.Graphics.GL2.NvVertexProgram)transform);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TransformFeedbackAttrib(Int32 count, Int32[] attribs, Chela.Graphics.GL2.NvTransformFeedback bufferMode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* attribs_ptr = attribs)
                    {
                        Delegates.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs_ptr, (Chela.Graphics.GL2.NvTransformFeedback)bufferMode);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TransformFeedbackAttrib(Int32 count, ref Int32 attribs, Chela.Graphics.GL2.NvTransformFeedback bufferMode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* attribs_ptr = &attribs)
                    {
                        Delegates.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs_ptr, (Chela.Graphics.GL2.NvTransformFeedback)bufferMode);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TransformFeedbackAttrib(Int32 count, Int32* attribs, Chela.Graphics.GL2.NvTransformFeedback bufferMode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs, (Chela.Graphics.GL2.NvTransformFeedback)bufferMode);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TransformFeedbackAttrib(UInt32 count, Int32[] attribs, Chela.Graphics.GL2.NvTransformFeedback bufferMode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* attribs_ptr = attribs)
                    {
                        Delegates.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs_ptr, (Chela.Graphics.GL2.NvTransformFeedback)bufferMode);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TransformFeedbackAttrib(UInt32 count, ref Int32 attribs, Chela.Graphics.GL2.NvTransformFeedback bufferMode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* attribs_ptr = &attribs)
                    {
                        Delegates.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs_ptr, (Chela.Graphics.GL2.NvTransformFeedback)bufferMode);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TransformFeedbackAttrib(UInt32 count, Int32* attribs, Chela.Graphics.GL2.NvTransformFeedback bufferMode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTransformFeedbackAttribsNV((UInt32)count, (Int32*)attribs, (Chela.Graphics.GL2.NvTransformFeedback)bufferMode);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TransformFeedbackVaryings(Int32 program, Int32 count, String[] varyings, Chela.Graphics.GL2.NvTransformFeedback bufferMode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    StringHandle varyings_ptr = StringHandle.Alloc(varyings);
                    try
                    {
                        Delegates.glTransformFeedbackVaryingsNV((UInt32)program, (Int32)count, varyings_ptr.ArrayAddress, (Chela.Graphics.GL2.NvTransformFeedback)bufferMode);
                    }
                    finally
                    {
                        varyings_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TransformFeedbackVaryings(UInt32 program, Int32 count, String[] varyings, Chela.Graphics.GL2.NvTransformFeedback bufferMode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    StringHandle varyings_ptr = StringHandle.Alloc(varyings);
                    try
                    {
                        Delegates.glTransformFeedbackVaryingsNV((UInt32)program, (Int32)count, varyings_ptr.ArrayAddress, (Chela.Graphics.GL2.NvTransformFeedback)bufferMode);
                    }
                    finally
                    {
                        varyings_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Vertex2h(Chela.Graphics.Half x, Chela.Graphics.Half y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertex2hNV((Chela.Graphics.Half)x, (Chela.Graphics.Half)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Vertex2h(Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glVertex2hvNV((Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Vertex2h(ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glVertex2hvNV((Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Vertex2h(Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertex2hvNV((Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Vertex3h(Chela.Graphics.Half x, Chela.Graphics.Half y, Chela.Graphics.Half z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertex3hNV((Chela.Graphics.Half)x, (Chela.Graphics.Half)y, (Chela.Graphics.Half)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Vertex3h(Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glVertex3hvNV((Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Vertex3h(ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glVertex3hvNV((Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Vertex3h(Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertex3hvNV((Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Vertex4h(Chela.Graphics.Half x, Chela.Graphics.Half y, Chela.Graphics.Half z, Chela.Graphics.Half w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertex4hNV((Chela.Graphics.Half)x, (Chela.Graphics.Half)y, (Chela.Graphics.Half)z, (Chela.Graphics.Half)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Vertex4h(Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glVertex4hvNV((Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Vertex4h(ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glVertex4hvNV((Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Vertex4h(Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertex4hvNV((Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexArrayRange(Int32 length, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexArrayRangeNV((Int32)length, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexArrayRange<T1>(Int32 length, T1[] pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexArrayRangeNV((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexArrayRange<T1>(Int32 length, T1[,] pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexArrayRangeNV((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexArrayRange<T1>(Int32 length, T1[,,] pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexArrayRangeNV((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexArrayRange<T1>(Int32 length, ref T1 pointer)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexArrayRangeNV((Int32)length, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T1)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib1(Int32 index, Double x)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib1dNV((UInt32)index, (Double)x);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib1(UInt32 index, Double x)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib1dNV((UInt32)index, (Double)x);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib1(Int32 index, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib1dvNV((UInt32)index, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib1(UInt32 index, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib1dvNV((UInt32)index, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib1(Int32 index, Single x)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib1fNV((UInt32)index, (Single)x);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib1(UInt32 index, Single x)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib1fNV((UInt32)index, (Single)x);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib1(Int32 index, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib1fvNV((UInt32)index, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib1(UInt32 index, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib1fvNV((UInt32)index, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib1h(Int32 index, Chela.Graphics.Half x)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib1hNV((UInt32)index, (Chela.Graphics.Half)x);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib1h(UInt32 index, Chela.Graphics.Half x)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib1hNV((UInt32)index, (Chela.Graphics.Half)x);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib1h(Int32 index, Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib1hvNV((UInt32)index, (Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib1h(UInt32 index, Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib1hvNV((UInt32)index, (Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib1(Int32 index, Int16 x)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib1sNV((UInt32)index, (Int16)x);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib1(UInt32 index, Int16 x)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib1sNV((UInt32)index, (Int16)x);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib1(Int32 index, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib1svNV((UInt32)index, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib1(UInt32 index, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib1svNV((UInt32)index, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(Int32 index, Double x, Double y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib2dNV((UInt32)index, (Double)x, (Double)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(UInt32 index, Double x, Double y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib2dNV((UInt32)index, (Double)x, (Double)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(Int32 index, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(Int32 index, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib2(Int32 index, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib2dvNV((UInt32)index, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(UInt32 index, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(UInt32 index, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib2(UInt32 index, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib2dvNV((UInt32)index, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(Int32 index, Single x, Single y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib2fNV((UInt32)index, (Single)x, (Single)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(UInt32 index, Single x, Single y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib2fNV((UInt32)index, (Single)x, (Single)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(Int32 index, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(Int32 index, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib2(Int32 index, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib2fvNV((UInt32)index, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(UInt32 index, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(UInt32 index, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib2(UInt32 index, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib2fvNV((UInt32)index, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2h(Int32 index, Chela.Graphics.Half x, Chela.Graphics.Half y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib2hNV((UInt32)index, (Chela.Graphics.Half)x, (Chela.Graphics.Half)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2h(UInt32 index, Chela.Graphics.Half x, Chela.Graphics.Half y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib2hNV((UInt32)index, (Chela.Graphics.Half)x, (Chela.Graphics.Half)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2h(Int32 index, Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2hvNV((UInt32)index, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2h(Int32 index, ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2hvNV((UInt32)index, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib2h(Int32 index, Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib2hvNV((UInt32)index, (Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2h(UInt32 index, Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2hvNV((UInt32)index, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2h(UInt32 index, ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2hvNV((UInt32)index, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib2h(UInt32 index, Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib2hvNV((UInt32)index, (Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(Int32 index, Int16 x, Int16 y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib2sNV((UInt32)index, (Int16)x, (Int16)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(UInt32 index, Int16 x, Int16 y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib2sNV((UInt32)index, (Int16)x, (Int16)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(Int32 index, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(Int32 index, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib2(Int32 index, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib2svNV((UInt32)index, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(UInt32 index, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib2svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib2(UInt32 index, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib2svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib2(UInt32 index, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib2svNV((UInt32)index, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(Int32 index, Double x, Double y, Double z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib3dNV((UInt32)index, (Double)x, (Double)y, (Double)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(UInt32 index, Double x, Double y, Double z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib3dNV((UInt32)index, (Double)x, (Double)y, (Double)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(Int32 index, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(Int32 index, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib3(Int32 index, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib3dvNV((UInt32)index, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(UInt32 index, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(UInt32 index, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib3(UInt32 index, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib3dvNV((UInt32)index, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(Int32 index, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib3fNV((UInt32)index, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(UInt32 index, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib3fNV((UInt32)index, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(Int32 index, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(Int32 index, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib3(Int32 index, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib3fvNV((UInt32)index, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(UInt32 index, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(UInt32 index, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib3(UInt32 index, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib3fvNV((UInt32)index, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3h(Int32 index, Chela.Graphics.Half x, Chela.Graphics.Half y, Chela.Graphics.Half z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib3hNV((UInt32)index, (Chela.Graphics.Half)x, (Chela.Graphics.Half)y, (Chela.Graphics.Half)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3h(UInt32 index, Chela.Graphics.Half x, Chela.Graphics.Half y, Chela.Graphics.Half z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib3hNV((UInt32)index, (Chela.Graphics.Half)x, (Chela.Graphics.Half)y, (Chela.Graphics.Half)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3h(Int32 index, Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3hvNV((UInt32)index, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3h(Int32 index, ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3hvNV((UInt32)index, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib3h(Int32 index, Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib3hvNV((UInt32)index, (Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3h(UInt32 index, Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3hvNV((UInt32)index, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3h(UInt32 index, ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3hvNV((UInt32)index, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib3h(UInt32 index, Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib3hvNV((UInt32)index, (Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(Int32 index, Int16 x, Int16 y, Int16 z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib3sNV((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(UInt32 index, Int16 x, Int16 y, Int16 z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib3sNV((UInt32)index, (Int16)x, (Int16)y, (Int16)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(Int32 index, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(Int32 index, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib3(Int32 index, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib3svNV((UInt32)index, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(UInt32 index, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib3svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib3(UInt32 index, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib3svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib3(UInt32 index, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib3svNV((UInt32)index, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, Double x, Double y, Double z, Double w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib4dNV((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, Double x, Double y, Double z, Double w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib4dNV((UInt32)index, (Double)x, (Double)y, (Double)z, (Double)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4(Int32 index, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4dvNV((UInt32)index, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4dvNV((UInt32)index, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4(UInt32 index, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4dvNV((UInt32)index, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, Single x, Single y, Single z, Single w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib4fNV((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, Single x, Single y, Single z, Single w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib4fNV((UInt32)index, (Single)x, (Single)y, (Single)z, (Single)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4(Int32 index, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4fvNV((UInt32)index, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4fvNV((UInt32)index, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4(UInt32 index, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4fvNV((UInt32)index, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4h(Int32 index, Chela.Graphics.Half x, Chela.Graphics.Half y, Chela.Graphics.Half z, Chela.Graphics.Half w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib4hNV((UInt32)index, (Chela.Graphics.Half)x, (Chela.Graphics.Half)y, (Chela.Graphics.Half)z, (Chela.Graphics.Half)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4h(UInt32 index, Chela.Graphics.Half x, Chela.Graphics.Half y, Chela.Graphics.Half z, Chela.Graphics.Half w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib4hNV((UInt32)index, (Chela.Graphics.Half)x, (Chela.Graphics.Half)y, (Chela.Graphics.Half)z, (Chela.Graphics.Half)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4h(Int32 index, Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4hvNV((UInt32)index, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4h(Int32 index, ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4hvNV((UInt32)index, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4h(Int32 index, Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4hvNV((UInt32)index, (Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4h(UInt32 index, Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4hvNV((UInt32)index, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4h(UInt32 index, ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4hvNV((UInt32)index, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4h(UInt32 index, Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4hvNV((UInt32)index, (Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, Int16 x, Int16 y, Int16 z, Int16 w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib4sNV((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, Int16 x, Int16 y, Int16 z, Int16 w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib4sNV((UInt32)index, (Int16)x, (Int16)y, (Int16)z, (Int16)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4(Int32 index, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4svNV((UInt32)index, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4svNV((UInt32)index, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4(UInt32 index, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4svNV((UInt32)index, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, Byte x, Byte y, Byte z, Byte w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib4ubNV((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, Byte x, Byte y, Byte z, Byte w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttrib4ubNV((UInt32)index, (Byte)x, (Byte)y, (Byte)z, (Byte)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, Byte[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(Int32 index, ref Byte v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4(Int32 index, Byte* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, Byte[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttrib4(UInt32 index, ref Byte v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttrib4(UInt32 index, Byte* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttrib4ubvNV((UInt32)index, (Byte*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribPointer(Int32 index, Int32 fsize, Chela.Graphics.GL2.VertexAttribParameterArb type, Int32 stride, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttribPointerNV((UInt32)index, (Int32)fsize, (Chela.Graphics.GL2.VertexAttribParameterArb)type, (Int32)stride, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribPointer<T4>(Int32 index, Int32 fsize, Chela.Graphics.GL2.VertexAttribParameterArb type, Int32 stride, T4[] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointerNV((UInt32)index, (Int32)fsize, (Chela.Graphics.GL2.VertexAttribParameterArb)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribPointer<T4>(Int32 index, Int32 fsize, Chela.Graphics.GL2.VertexAttribParameterArb type, Int32 stride, T4[,] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointerNV((UInt32)index, (Int32)fsize, (Chela.Graphics.GL2.VertexAttribParameterArb)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribPointer<T4>(Int32 index, Int32 fsize, Chela.Graphics.GL2.VertexAttribParameterArb type, Int32 stride, T4[,,] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointerNV((UInt32)index, (Int32)fsize, (Chela.Graphics.GL2.VertexAttribParameterArb)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribPointer<T4>(Int32 index, Int32 fsize, Chela.Graphics.GL2.VertexAttribParameterArb type, Int32 stride, ref T4 pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointerNV((UInt32)index, (Int32)fsize, (Chela.Graphics.GL2.VertexAttribParameterArb)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T4)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribPointer(UInt32 index, Int32 fsize, Chela.Graphics.GL2.VertexAttribParameterArb type, Int32 stride, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexAttribPointerNV((UInt32)index, (Int32)fsize, (Chela.Graphics.GL2.VertexAttribParameterArb)type, (Int32)stride, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribPointer<T4>(UInt32 index, Int32 fsize, Chela.Graphics.GL2.VertexAttribParameterArb type, Int32 stride, T4[] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointerNV((UInt32)index, (Int32)fsize, (Chela.Graphics.GL2.VertexAttribParameterArb)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribPointer<T4>(UInt32 index, Int32 fsize, Chela.Graphics.GL2.VertexAttribParameterArb type, Int32 stride, T4[,] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointerNV((UInt32)index, (Int32)fsize, (Chela.Graphics.GL2.VertexAttribParameterArb)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribPointer<T4>(UInt32 index, Int32 fsize, Chela.Graphics.GL2.VertexAttribParameterArb type, Int32 stride, T4[,,] pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointerNV((UInt32)index, (Int32)fsize, (Chela.Graphics.GL2.VertexAttribParameterArb)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribPointer<T4>(UInt32 index, Int32 fsize, Chela.Graphics.GL2.VertexAttribParameterArb type, Int32 stride, ref T4 pointer)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glVertexAttribPointerNV((UInt32)index, (Int32)fsize, (Chela.Graphics.GL2.VertexAttribParameterArb)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T4)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs1(Int32 index, Int32 count, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs1(Int32 index, Int32 count, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs1(Int32 index, Int32 count, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs1(UInt32 index, Int32 count, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs1(UInt32 index, Int32 count, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs1(UInt32 index, Int32 count, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs1dvNV((UInt32)index, (Int32)count, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs1(Int32 index, Int32 count, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs1(Int32 index, Int32 count, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs1(Int32 index, Int32 count, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs1(UInt32 index, Int32 count, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs1(UInt32 index, Int32 count, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs1(UInt32 index, Int32 count, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs1fvNV((UInt32)index, (Int32)count, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs1h(Int32 index, Int32 n, Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs1h(Int32 index, Int32 n, ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs1h(Int32 index, Int32 n, Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs1h(UInt32 index, Int32 n, Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs1h(UInt32 index, Int32 n, ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs1h(UInt32 index, Int32 n, Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs1hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs1(Int32 index, Int32 count, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs1(Int32 index, Int32 count, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs1(Int32 index, Int32 count, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs1(UInt32 index, Int32 count, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs1(UInt32 index, Int32 count, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs1(UInt32 index, Int32 count, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs1svNV((UInt32)index, (Int32)count, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs2(Int32 index, Int32 count, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs2(Int32 index, Int32 count, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs2(Int32 index, Int32 count, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs2(UInt32 index, Int32 count, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs2(UInt32 index, Int32 count, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs2(UInt32 index, Int32 count, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs2dvNV((UInt32)index, (Int32)count, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs2(Int32 index, Int32 count, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs2(Int32 index, Int32 count, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs2(Int32 index, Int32 count, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs2(UInt32 index, Int32 count, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs2(UInt32 index, Int32 count, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs2(UInt32 index, Int32 count, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs2fvNV((UInt32)index, (Int32)count, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs2h(Int32 index, Int32 n, Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs2h(Int32 index, Int32 n, ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs2h(Int32 index, Int32 n, Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs2h(UInt32 index, Int32 n, Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs2h(UInt32 index, Int32 n, ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs2h(UInt32 index, Int32 n, Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs2hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs2(Int32 index, Int32 count, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs2(Int32 index, Int32 count, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs2(Int32 index, Int32 count, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs2(UInt32 index, Int32 count, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs2(UInt32 index, Int32 count, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs2(UInt32 index, Int32 count, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs2svNV((UInt32)index, (Int32)count, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs3(Int32 index, Int32 count, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs3(Int32 index, Int32 count, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs3(Int32 index, Int32 count, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs3(UInt32 index, Int32 count, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs3(UInt32 index, Int32 count, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs3(UInt32 index, Int32 count, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs3dvNV((UInt32)index, (Int32)count, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs3(Int32 index, Int32 count, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs3(Int32 index, Int32 count, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs3(Int32 index, Int32 count, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs3(UInt32 index, Int32 count, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs3(UInt32 index, Int32 count, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs3(UInt32 index, Int32 count, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs3fvNV((UInt32)index, (Int32)count, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs3h(Int32 index, Int32 n, Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs3h(Int32 index, Int32 n, ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs3h(Int32 index, Int32 n, Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs3h(UInt32 index, Int32 n, Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs3h(UInt32 index, Int32 n, ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs3h(UInt32 index, Int32 n, Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs3hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs3(Int32 index, Int32 count, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs3(Int32 index, Int32 count, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs3(Int32 index, Int32 count, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs3(UInt32 index, Int32 count, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs3(UInt32 index, Int32 count, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs3(UInt32 index, Int32 count, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs3svNV((UInt32)index, (Int32)count, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs4(Int32 index, Int32 count, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs4(Int32 index, Int32 count, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs4(Int32 index, Int32 count, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs4(UInt32 index, Int32 count, Double[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs4(UInt32 index, Int32 count, ref Double v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs4(UInt32 index, Int32 count, Double* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs4dvNV((UInt32)index, (Int32)count, (Double*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs4(Int32 index, Int32 count, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs4(Int32 index, Int32 count, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs4(Int32 index, Int32 count, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs4(UInt32 index, Int32 count, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs4(UInt32 index, Int32 count, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs4(UInt32 index, Int32 count, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs4fvNV((UInt32)index, (Int32)count, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs4h(Int32 index, Int32 n, Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs4h(Int32 index, Int32 n, ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs4h(Int32 index, Int32 n, Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs4h(UInt32 index, Int32 n, Chela.Graphics.Half[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs4h(UInt32 index, Int32 n, ref Chela.Graphics.Half v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Chela.Graphics.Half* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs4h(UInt32 index, Int32 n, Chela.Graphics.Half* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs4hvNV((UInt32)index, (Int32)n, (Chela.Graphics.Half*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs4(Int32 index, Int32 count, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs4(Int32 index, Int32 count, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs4(Int32 index, Int32 count, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs4(UInt32 index, Int32 count, Int16[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs4(UInt32 index, Int32 count, ref Int16 v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs4(UInt32 index, Int32 count, Int16* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs4svNV((UInt32)index, (Int32)count, (Int16*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs4(Int32 index, Int32 count, Byte[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs4(Int32 index, Int32 count, ref Byte v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs4(Int32 index, Int32 count, Byte* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs4(UInt32 index, Int32 count, Byte[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = v)
                    {
                        Delegates.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexAttribs4(UInt32 index, Int32 count, ref Byte v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* v_ptr = &v)
                    {
                        Delegates.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexAttribs4(UInt32 index, Int32 count, Byte* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexAttribs4ubvNV((UInt32)index, (Int32)count, (Byte*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void VertexWeighth(Chela.Graphics.Half weight)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glVertexWeighthNV((Chela.Graphics.Half)weight);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void VertexWeighth(Chela.Graphics.Half* weight)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glVertexWeighthvNV((Chela.Graphics.Half*)weight);
                #if DEBUG
                }
                #endif
            }

        }

        public static partial class Pgi
        {
            public static 
            void Hint(Chela.Graphics.GL2.PgiMiscHints target, Int32 mode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glHintPGI((Chela.Graphics.GL2.PgiMiscHints)target, (Int32)mode);
                }
                #if DEBUG
                }
                #endif
            }

        }

        public static partial class Sgi
        {
            public static 
            void ColorTableParameter(Chela.Graphics.GL2.SgiColorTable target, Chela.Graphics.GL2.SgiColorTable pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glColorTableParameterfvSGI((Chela.Graphics.GL2.SgiColorTable)target, (Chela.Graphics.GL2.SgiColorTable)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorTableParameter(Chela.Graphics.GL2.SgiColorTable target, Chela.Graphics.GL2.SgiColorTable pname, ref Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glColorTableParameterfvSGI((Chela.Graphics.GL2.SgiColorTable)target, (Chela.Graphics.GL2.SgiColorTable)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ColorTableParameter(Chela.Graphics.GL2.SgiColorTable target, Chela.Graphics.GL2.SgiColorTable pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glColorTableParameterfvSGI((Chela.Graphics.GL2.SgiColorTable)target, (Chela.Graphics.GL2.SgiColorTable)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorTableParameter(Chela.Graphics.GL2.SgiColorTable target, Chela.Graphics.GL2.SgiColorTable pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glColorTableParameterivSGI((Chela.Graphics.GL2.SgiColorTable)target, (Chela.Graphics.GL2.SgiColorTable)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorTableParameter(Chela.Graphics.GL2.SgiColorTable target, Chela.Graphics.GL2.SgiColorTable pname, ref Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glColorTableParameterivSGI((Chela.Graphics.GL2.SgiColorTable)target, (Chela.Graphics.GL2.SgiColorTable)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ColorTableParameter(Chela.Graphics.GL2.SgiColorTable target, Chela.Graphics.GL2.SgiColorTable pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glColorTableParameterivSGI((Chela.Graphics.GL2.SgiColorTable)target, (Chela.Graphics.GL2.SgiColorTable)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorTable(Chela.Graphics.GL2.SgiColorTable target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr table)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glColorTableSGI((Chela.Graphics.GL2.SgiColorTable)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorTable<T5>(Chela.Graphics.GL2.SgiColorTable target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[] table)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorTableSGI((Chela.Graphics.GL2.SgiColorTable)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        table_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorTable<T5>(Chela.Graphics.GL2.SgiColorTable target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[,] table)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorTableSGI((Chela.Graphics.GL2.SgiColorTable)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        table_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorTable<T5>(Chela.Graphics.GL2.SgiColorTable target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T5[,,] table)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorTableSGI((Chela.Graphics.GL2.SgiColorTable)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        table_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ColorTable<T5>(Chela.Graphics.GL2.SgiColorTable target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T5 table)
                where T5 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glColorTableSGI((Chela.Graphics.GL2.SgiColorTable)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                        table = (T5)table_ptr.Target;
                    }
                    finally
                    {
                        table_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyColorTable(Chela.Graphics.GL2.SgiColorTable target, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyColorTableSGI((Chela.Graphics.GL2.SgiColorTable)target, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetColorTableParameter(Chela.Graphics.GL2.SgiColorTable target, Chela.Graphics.GL2.SgiColorTable pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetColorTableParameterfvSGI((Chela.Graphics.GL2.SgiColorTable)target, (Chela.Graphics.GL2.SgiColorTable)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetColorTableParameter(Chela.Graphics.GL2.SgiColorTable target, Chela.Graphics.GL2.SgiColorTable pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetColorTableParameterfvSGI((Chela.Graphics.GL2.SgiColorTable)target, (Chela.Graphics.GL2.SgiColorTable)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetColorTableParameter(Chela.Graphics.GL2.SgiColorTable target, Chela.Graphics.GL2.SgiColorTable pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetColorTableParameterfvSGI((Chela.Graphics.GL2.SgiColorTable)target, (Chela.Graphics.GL2.SgiColorTable)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetColorTableParameter(Chela.Graphics.GL2.SgiColorTable target, Chela.Graphics.GL2.SgiColorTable pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetColorTableParameterivSGI((Chela.Graphics.GL2.SgiColorTable)target, (Chela.Graphics.GL2.SgiColorTable)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetColorTableParameter(Chela.Graphics.GL2.SgiColorTable target, Chela.Graphics.GL2.SgiColorTable pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetColorTableParameterivSGI((Chela.Graphics.GL2.SgiColorTable)target, (Chela.Graphics.GL2.SgiColorTable)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetColorTableParameter(Chela.Graphics.GL2.SgiColorTable target, Chela.Graphics.GL2.SgiColorTable pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetColorTableParameterivSGI((Chela.Graphics.GL2.SgiColorTable)target, (Chela.Graphics.GL2.SgiColorTable)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetColorTable(Chela.Graphics.GL2.SgiColorTable target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr table)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetColorTableSGI((Chela.Graphics.GL2.SgiColorTable)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetColorTable<T3>(Chela.Graphics.GL2.SgiColorTable target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T3[] table)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetColorTableSGI((Chela.Graphics.GL2.SgiColorTable)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        table_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetColorTable<T3>(Chela.Graphics.GL2.SgiColorTable target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T3[,] table)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetColorTableSGI((Chela.Graphics.GL2.SgiColorTable)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        table_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetColorTable<T3>(Chela.Graphics.GL2.SgiColorTable target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T3[,,] table)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetColorTableSGI((Chela.Graphics.GL2.SgiColorTable)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        table_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetColorTable<T3>(Chela.Graphics.GL2.SgiColorTable target, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T3 table)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle table_ptr = GCHandle.Alloc(table, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetColorTableSGI((Chela.Graphics.GL2.SgiColorTable)target, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)table_ptr.AddrOfPinnedObject());
                        table = (T3)table_ptr.Target;
                    }
                    finally
                    {
                        table_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

        }

        public static partial class Sgis
        {
            public static 
            void DetailTexFunc(Chela.Graphics.GL2.TextureTarget target, Int32 n, Single[] points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glDetailTexFuncSGIS((Chela.Graphics.GL2.TextureTarget)target, (Int32)n, (Single*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DetailTexFunc(Chela.Graphics.GL2.TextureTarget target, Int32 n, ref Single points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glDetailTexFuncSGIS((Chela.Graphics.GL2.TextureTarget)target, (Int32)n, (Single*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DetailTexFunc(Chela.Graphics.GL2.TextureTarget target, Int32 n, Single* points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDetailTexFuncSGIS((Chela.Graphics.GL2.TextureTarget)target, (Int32)n, (Single*)points);
                #if DEBUG
                }
                #endif
            }

            public static 
            void FogFunc(Int32 n, Single[] points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glFogFuncSGIS((Int32)n, (Single*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FogFunc(Int32 n, ref Single points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glFogFuncSGIS((Int32)n, (Single*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void FogFunc(Int32 n, Single* points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glFogFuncSGIS((Int32)n, (Single*)points);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetDetailTexFunc(Chela.Graphics.GL2.TextureTarget target, Single[] points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glGetDetailTexFuncSGIS((Chela.Graphics.GL2.TextureTarget)target, (Single*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetDetailTexFunc(Chela.Graphics.GL2.TextureTarget target, out Single points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glGetDetailTexFuncSGIS((Chela.Graphics.GL2.TextureTarget)target, (Single*)points_ptr);
                        points = *points_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetDetailTexFunc(Chela.Graphics.GL2.TextureTarget target, Single* points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetDetailTexFuncSGIS((Chela.Graphics.GL2.TextureTarget)target, (Single*)points);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFogFunc(Single[] points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glGetFogFuncSGIS((Single*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFogFunc(out Single points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glGetFogFuncSGIS((Single*)points_ptr);
                        points = *points_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetFogFunc(Single* points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetFogFuncSGIS((Single*)points);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPixelTexGenParameter(Chela.Graphics.GL2.SgisPixelTexture pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetPixelTexGenParameterfvSGIS((Chela.Graphics.GL2.SgisPixelTexture)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPixelTexGenParameter(Chela.Graphics.GL2.SgisPixelTexture pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetPixelTexGenParameterfvSGIS((Chela.Graphics.GL2.SgisPixelTexture)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPixelTexGenParameter(Chela.Graphics.GL2.SgisPixelTexture pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetPixelTexGenParameterfvSGIS((Chela.Graphics.GL2.SgisPixelTexture)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPixelTexGenParameter(Chela.Graphics.GL2.SgisPixelTexture pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetPixelTexGenParameterivSGIS((Chela.Graphics.GL2.SgisPixelTexture)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPixelTexGenParameter(Chela.Graphics.GL2.SgisPixelTexture pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetPixelTexGenParameterivSGIS((Chela.Graphics.GL2.SgisPixelTexture)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPixelTexGenParameter(Chela.Graphics.GL2.SgisPixelTexture pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetPixelTexGenParameterivSGIS((Chela.Graphics.GL2.SgisPixelTexture)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetSharpenTexFunc(Chela.Graphics.GL2.TextureTarget target, Single[] points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glGetSharpenTexFuncSGIS((Chela.Graphics.GL2.TextureTarget)target, (Single*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetSharpenTexFunc(Chela.Graphics.GL2.TextureTarget target, out Single points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glGetSharpenTexFuncSGIS((Chela.Graphics.GL2.TextureTarget)target, (Single*)points_ptr);
                        points = *points_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetSharpenTexFunc(Chela.Graphics.GL2.TextureTarget target, Single* points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetSharpenTexFuncSGIS((Chela.Graphics.GL2.TextureTarget)target, (Single*)points);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTexFilterFunc(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.SgisTextureFilter4 filter, Single[] weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* weights_ptr = weights)
                    {
                        Delegates.glGetTexFilterFuncSGIS((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.SgisTextureFilter4)filter, (Single*)weights_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetTexFilterFunc(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.SgisTextureFilter4 filter, out Single weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* weights_ptr = &weights)
                    {
                        Delegates.glGetTexFilterFuncSGIS((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.SgisTextureFilter4)filter, (Single*)weights_ptr);
                        weights = *weights_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetTexFilterFunc(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.SgisTextureFilter4 filter, Single* weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetTexFilterFuncSGIS((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.SgisTextureFilter4)filter, (Single*)weights);
                #if DEBUG
                }
                #endif
            }

            public static 
            void PixelTexGenParameter(Chela.Graphics.GL2.SgisPixelTexture pname, Single param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPixelTexGenParameterfSGIS((Chela.Graphics.GL2.SgisPixelTexture)pname, (Single)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PixelTexGenParameter(Chela.Graphics.GL2.SgisPixelTexture pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glPixelTexGenParameterfvSGIS((Chela.Graphics.GL2.SgisPixelTexture)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void PixelTexGenParameter(Chela.Graphics.GL2.SgisPixelTexture pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glPixelTexGenParameterfvSGIS((Chela.Graphics.GL2.SgisPixelTexture)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void PixelTexGenParameter(Chela.Graphics.GL2.SgisPixelTexture pname, Int32 param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPixelTexGenParameteriSGIS((Chela.Graphics.GL2.SgisPixelTexture)pname, (Int32)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PixelTexGenParameter(Chela.Graphics.GL2.SgisPixelTexture pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glPixelTexGenParameterivSGIS((Chela.Graphics.GL2.SgisPixelTexture)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void PixelTexGenParameter(Chela.Graphics.GL2.SgisPixelTexture pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glPixelTexGenParameterivSGIS((Chela.Graphics.GL2.SgisPixelTexture)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void PointParameter(Chela.Graphics.GL2.SgisPointParameters pname, Single param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPointParameterfSGIS((Chela.Graphics.GL2.SgisPointParameters)pname, (Single)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PointParameter(Chela.Graphics.GL2.SgisPointParameters pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glPointParameterfvSGIS((Chela.Graphics.GL2.SgisPointParameters)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void PointParameter(Chela.Graphics.GL2.SgisPointParameters pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glPointParameterfvSGIS((Chela.Graphics.GL2.SgisPointParameters)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void SampleMask(Single value, bool invert)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSampleMaskSGIS((Single)value, (bool)invert);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SamplePattern(Chela.Graphics.GL2.SgisMultisample pattern)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSamplePatternSGIS((Chela.Graphics.GL2.SgisMultisample)pattern);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SharpenTexFunc(Chela.Graphics.GL2.TextureTarget target, Int32 n, Single[] points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glSharpenTexFuncSGIS((Chela.Graphics.GL2.TextureTarget)target, (Int32)n, (Single*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SharpenTexFunc(Chela.Graphics.GL2.TextureTarget target, Int32 n, ref Single points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glSharpenTexFuncSGIS((Chela.Graphics.GL2.TextureTarget)target, (Int32)n, (Single*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void SharpenTexFunc(Chela.Graphics.GL2.TextureTarget target, Int32 n, Single* points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glSharpenTexFuncSGIS((Chela.Graphics.GL2.TextureTarget)target, (Int32)n, (Single*)points);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexFilterFunc(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.SgisTextureFilter4 filter, Int32 n, Single[] weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* weights_ptr = weights)
                    {
                        Delegates.glTexFilterFuncSGIS((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.SgisTextureFilter4)filter, (Int32)n, (Single*)weights_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexFilterFunc(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.SgisTextureFilter4 filter, Int32 n, ref Single weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* weights_ptr = &weights)
                    {
                        Delegates.glTexFilterFuncSGIS((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.SgisTextureFilter4)filter, (Int32)n, (Single*)weights_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TexFilterFunc(Chela.Graphics.GL2.TextureTarget target, Chela.Graphics.GL2.SgisTextureFilter4 filter, Int32 n, Single* weights)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTexFilterFuncSGIS((Chela.Graphics.GL2.TextureTarget)target, (Chela.Graphics.GL2.SgisTextureFilter4)filter, (Int32)n, (Single*)weights);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexImage4D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 size4d, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexImage4DSGIS((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)size4d, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexImage4D<T10>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 size4d, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T10[] pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexImage4DSGIS((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)size4d, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexImage4D<T10>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 size4d, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T10[,] pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexImage4DSGIS((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)size4d, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexImage4D<T10>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 size4d, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T10[,,] pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexImage4DSGIS((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)size4d, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexImage4D<T10>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Chela.Graphics.GL2.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 depth, Int32 size4d, Int32 border, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T10 pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexImage4DSGIS((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Chela.Graphics.GL2.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)size4d, (Int32)border, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T10)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage4D(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 woffset, Int32 width, Int32 height, Int32 depth, Int32 size4d, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexSubImage4DSGIS((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)woffset, (Int32)width, (Int32)height, (Int32)depth, (Int32)size4d, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage4D<T12>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 woffset, Int32 width, Int32 height, Int32 depth, Int32 size4d, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T12[] pixels)
                where T12 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage4DSGIS((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)woffset, (Int32)width, (Int32)height, (Int32)depth, (Int32)size4d, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage4D<T12>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 woffset, Int32 width, Int32 height, Int32 depth, Int32 size4d, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T12[,] pixels)
                where T12 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage4DSGIS((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)woffset, (Int32)width, (Int32)height, (Int32)depth, (Int32)size4d, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage4D<T12>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 woffset, Int32 width, Int32 height, Int32 depth, Int32 size4d, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, T12[,,] pixels)
                where T12 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage4DSGIS((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)woffset, (Int32)width, (Int32)height, (Int32)depth, (Int32)size4d, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage4D<T12>(Chela.Graphics.GL2.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 woffset, Int32 width, Int32 height, Int32 depth, Int32 size4d, Chela.Graphics.GL2.PixelFormat format, Chela.Graphics.GL2.PixelType type, ref T12 pixels)
                where T12 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage4DSGIS((Chela.Graphics.GL2.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)woffset, (Int32)width, (Int32)height, (Int32)depth, (Int32)size4d, (Chela.Graphics.GL2.PixelFormat)format, (Chela.Graphics.GL2.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T12)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TextureColorMask(bool red, bool green, bool blue, bool alpha)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTextureColorMaskSGIS((bool)red, (bool)green, (bool)blue, (bool)alpha);
                }
                #if DEBUG
                }
                #endif
            }

        }

        public static partial class Sgix
        {
            public static 
            void AsyncMarker(Int32 marker)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glAsyncMarkerSGIX((UInt32)marker);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void AsyncMarker(UInt32 marker)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glAsyncMarkerSGIX((UInt32)marker);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeformationMap3(Chela.Graphics.GL2.SgixPolynomialFfd target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double w1, Double w2, Int32 wstride, Int32 worder, Double[] points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* points_ptr = points)
                    {
                        Delegates.glDeformationMap3dSGIX((Chela.Graphics.GL2.SgixPolynomialFfd)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double)w1, (Double)w2, (Int32)wstride, (Int32)worder, (Double*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeformationMap3(Chela.Graphics.GL2.SgixPolynomialFfd target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double w1, Double w2, Int32 wstride, Int32 worder, ref Double points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* points_ptr = &points)
                    {
                        Delegates.glDeformationMap3dSGIX((Chela.Graphics.GL2.SgixPolynomialFfd)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double)w1, (Double)w2, (Int32)wstride, (Int32)worder, (Double*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeformationMap3(Chela.Graphics.GL2.SgixPolynomialFfd target, Double u1, Double u2, Int32 ustride, Int32 uorder, Double v1, Double v2, Int32 vstride, Int32 vorder, Double w1, Double w2, Int32 wstride, Int32 worder, Double* points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeformationMap3dSGIX((Chela.Graphics.GL2.SgixPolynomialFfd)target, (Double)u1, (Double)u2, (Int32)ustride, (Int32)uorder, (Double)v1, (Double)v2, (Int32)vstride, (Int32)vorder, (Double)w1, (Double)w2, (Int32)wstride, (Int32)worder, (Double*)points);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeformationMap3(Chela.Graphics.GL2.SgixPolynomialFfd target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single w1, Single w2, Int32 wstride, Int32 worder, Single[] points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* points_ptr = points)
                    {
                        Delegates.glDeformationMap3fSGIX((Chela.Graphics.GL2.SgixPolynomialFfd)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single)w1, (Single)w2, (Int32)wstride, (Int32)worder, (Single*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeformationMap3(Chela.Graphics.GL2.SgixPolynomialFfd target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single w1, Single w2, Int32 wstride, Int32 worder, ref Single points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* points_ptr = &points)
                    {
                        Delegates.glDeformationMap3fSGIX((Chela.Graphics.GL2.SgixPolynomialFfd)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single)w1, (Single)w2, (Int32)wstride, (Int32)worder, (Single*)points_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeformationMap3(Chela.Graphics.GL2.SgixPolynomialFfd target, Single u1, Single u2, Int32 ustride, Int32 uorder, Single v1, Single v2, Int32 vstride, Int32 vorder, Single w1, Single w2, Int32 wstride, Int32 worder, Single* points)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeformationMap3fSGIX((Chela.Graphics.GL2.SgixPolynomialFfd)target, (Single)u1, (Single)u2, (Int32)ustride, (Int32)uorder, (Single)v1, (Single)v2, (Int32)vstride, (Int32)vorder, (Single)w1, (Single)w2, (Int32)wstride, (Int32)worder, (Single*)points);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Deform(Int32 mask)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDeformSGIX((UInt32)mask);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Deform(UInt32 mask)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDeformSGIX((UInt32)mask);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteAsyncMarkers(Int32 marker, Int32 range)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDeleteAsyncMarkersSGIX((UInt32)marker, (Int32)range);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteAsyncMarkers(UInt32 marker, Int32 range)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDeleteAsyncMarkersSGIX((UInt32)marker, (Int32)range);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 FinishAsync(out Int32 markerp)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* markerp_ptr = &markerp)
                    {
                        Int32 retval = Delegates.glFinishAsyncSGIX((UInt32*)markerp_ptr);
                        markerp = *markerp_ptr;
                        return retval;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe Int32 FinishAsync(Int32* markerp)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                return Delegates.glFinishAsyncSGIX((UInt32*)markerp);
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 FinishAsync(out UInt32 markerp)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* markerp_ptr = &markerp)
                    {
                        Int32 retval = Delegates.glFinishAsyncSGIX((UInt32*)markerp_ptr);
                        markerp = *markerp_ptr;
                        return retval;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe Int32 FinishAsync(UInt32* markerp)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                return Delegates.glFinishAsyncSGIX((UInt32*)markerp);
                #if DEBUG
                }
                #endif
            }

            public static 
            void FlushRaster()
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFlushRasterSGIX();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FragmentColorMaterial(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter mode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFragmentColorMaterialSGIX((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)mode);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FragmentLight(Chela.Graphics.GL2.SgixFragmentLighting light, Chela.Graphics.GL2.SgixFragmentLighting pname, Single param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFragmentLightfSGIX((Chela.Graphics.GL2.SgixFragmentLighting)light, (Chela.Graphics.GL2.SgixFragmentLighting)pname, (Single)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FragmentLight(Chela.Graphics.GL2.SgixFragmentLighting light, Chela.Graphics.GL2.SgixFragmentLighting pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glFragmentLightfvSGIX((Chela.Graphics.GL2.SgixFragmentLighting)light, (Chela.Graphics.GL2.SgixFragmentLighting)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void FragmentLight(Chela.Graphics.GL2.SgixFragmentLighting light, Chela.Graphics.GL2.SgixFragmentLighting pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glFragmentLightfvSGIX((Chela.Graphics.GL2.SgixFragmentLighting)light, (Chela.Graphics.GL2.SgixFragmentLighting)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void FragmentLight(Chela.Graphics.GL2.SgixFragmentLighting light, Chela.Graphics.GL2.SgixFragmentLighting pname, Int32 param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFragmentLightiSGIX((Chela.Graphics.GL2.SgixFragmentLighting)light, (Chela.Graphics.GL2.SgixFragmentLighting)pname, (Int32)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FragmentLight(Chela.Graphics.GL2.SgixFragmentLighting light, Chela.Graphics.GL2.SgixFragmentLighting pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glFragmentLightivSGIX((Chela.Graphics.GL2.SgixFragmentLighting)light, (Chela.Graphics.GL2.SgixFragmentLighting)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void FragmentLight(Chela.Graphics.GL2.SgixFragmentLighting light, Chela.Graphics.GL2.SgixFragmentLighting pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glFragmentLightivSGIX((Chela.Graphics.GL2.SgixFragmentLighting)light, (Chela.Graphics.GL2.SgixFragmentLighting)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void FragmentLightModel(Chela.Graphics.GL2.SgixFragmentLighting pname, Single param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFragmentLightModelfSGIX((Chela.Graphics.GL2.SgixFragmentLighting)pname, (Single)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FragmentLightModel(Chela.Graphics.GL2.SgixFragmentLighting pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glFragmentLightModelfvSGIX((Chela.Graphics.GL2.SgixFragmentLighting)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void FragmentLightModel(Chela.Graphics.GL2.SgixFragmentLighting pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glFragmentLightModelfvSGIX((Chela.Graphics.GL2.SgixFragmentLighting)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void FragmentLightModel(Chela.Graphics.GL2.SgixFragmentLighting pname, Int32 param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFragmentLightModeliSGIX((Chela.Graphics.GL2.SgixFragmentLighting)pname, (Int32)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FragmentLightModel(Chela.Graphics.GL2.SgixFragmentLighting pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glFragmentLightModelivSGIX((Chela.Graphics.GL2.SgixFragmentLighting)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void FragmentLightModel(Chela.Graphics.GL2.SgixFragmentLighting pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glFragmentLightModelivSGIX((Chela.Graphics.GL2.SgixFragmentLighting)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void FragmentMaterial(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, Single param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFragmentMaterialfSGIX((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Single)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FragmentMaterial(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glFragmentMaterialfvSGIX((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void FragmentMaterial(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glFragmentMaterialfvSGIX((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void FragmentMaterial(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, Int32 param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFragmentMaterialiSGIX((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Int32)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FragmentMaterial(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glFragmentMaterialivSGIX((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void FragmentMaterial(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glFragmentMaterialivSGIX((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void FrameZoom(Int32 factor)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFrameZoomSGIX((Int32)factor);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 GenAsyncMarkers(Int32 range)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glGenAsyncMarkersSGIX((Int32)range);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFragmentLight(Chela.Graphics.GL2.SgixFragmentLighting light, Chela.Graphics.GL2.SgixFragmentLighting pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetFragmentLightfvSGIX((Chela.Graphics.GL2.SgixFragmentLighting)light, (Chela.Graphics.GL2.SgixFragmentLighting)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFragmentLight(Chela.Graphics.GL2.SgixFragmentLighting light, Chela.Graphics.GL2.SgixFragmentLighting pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetFragmentLightfvSGIX((Chela.Graphics.GL2.SgixFragmentLighting)light, (Chela.Graphics.GL2.SgixFragmentLighting)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetFragmentLight(Chela.Graphics.GL2.SgixFragmentLighting light, Chela.Graphics.GL2.SgixFragmentLighting pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetFragmentLightfvSGIX((Chela.Graphics.GL2.SgixFragmentLighting)light, (Chela.Graphics.GL2.SgixFragmentLighting)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFragmentLight(Chela.Graphics.GL2.SgixFragmentLighting light, Chela.Graphics.GL2.SgixFragmentLighting pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFragmentLightivSGIX((Chela.Graphics.GL2.SgixFragmentLighting)light, (Chela.Graphics.GL2.SgixFragmentLighting)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFragmentLight(Chela.Graphics.GL2.SgixFragmentLighting light, Chela.Graphics.GL2.SgixFragmentLighting pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFragmentLightivSGIX((Chela.Graphics.GL2.SgixFragmentLighting)light, (Chela.Graphics.GL2.SgixFragmentLighting)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetFragmentLight(Chela.Graphics.GL2.SgixFragmentLighting light, Chela.Graphics.GL2.SgixFragmentLighting pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetFragmentLightivSGIX((Chela.Graphics.GL2.SgixFragmentLighting)light, (Chela.Graphics.GL2.SgixFragmentLighting)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFragmentMaterial(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetFragmentMaterialfvSGIX((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFragmentMaterial(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetFragmentMaterialfvSGIX((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetFragmentMaterial(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetFragmentMaterialfvSGIX((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFragmentMaterial(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFragmentMaterialivSGIX((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFragmentMaterial(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFragmentMaterialivSGIX((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetFragmentMaterial(Chela.Graphics.GL2.MaterialFace face, Chela.Graphics.GL2.MaterialParameter pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetFragmentMaterialivSGIX((Chela.Graphics.GL2.MaterialFace)face, (Chela.Graphics.GL2.MaterialParameter)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 GetInstruments()
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glGetInstrumentsSGIX();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetListParameter(Int32 list, Chela.Graphics.GL2.ListParameterName pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetListParameterfvSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetListParameter(Int32 list, Chela.Graphics.GL2.ListParameterName pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetListParameterfvSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetListParameter(Int32 list, Chela.Graphics.GL2.ListParameterName pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetListParameterfvSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetListParameter(UInt32 list, Chela.Graphics.GL2.ListParameterName pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glGetListParameterfvSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetListParameter(UInt32 list, Chela.Graphics.GL2.ListParameterName pname, out Single @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = &@params)
                    {
                        Delegates.glGetListParameterfvSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Single*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetListParameter(UInt32 list, Chela.Graphics.GL2.ListParameterName pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetListParameterfvSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetListParameter(Int32 list, Chela.Graphics.GL2.ListParameterName pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetListParameterivSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetListParameter(Int32 list, Chela.Graphics.GL2.ListParameterName pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetListParameterivSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetListParameter(Int32 list, Chela.Graphics.GL2.ListParameterName pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetListParameterivSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetListParameter(UInt32 list, Chela.Graphics.GL2.ListParameterName pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetListParameterivSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetListParameter(UInt32 list, Chela.Graphics.GL2.ListParameterName pname, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetListParameterivSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetListParameter(UInt32 list, Chela.Graphics.GL2.ListParameterName pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetListParameterivSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void IglooInterface(Chela.Graphics.GL2.All pname, IntPtr @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glIglooInterfaceSGIX((Chela.Graphics.GL2.All)pname, (IntPtr)@params);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void IglooInterface<T1>(Chela.Graphics.GL2.All pname, T1[] @params)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glIglooInterfaceSGIX((Chela.Graphics.GL2.All)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void IglooInterface<T1>(Chela.Graphics.GL2.All pname, T1[,] @params)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glIglooInterfaceSGIX((Chela.Graphics.GL2.All)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void IglooInterface<T1>(Chela.Graphics.GL2.All pname, T1[,,] @params)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glIglooInterfaceSGIX((Chela.Graphics.GL2.All)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void IglooInterface<T1>(Chela.Graphics.GL2.All pname, ref T1 @params)
                where T1 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glIglooInterfaceSGIX((Chela.Graphics.GL2.All)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                        @params = (T1)@params_ptr.Target;
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void InstrumentsBuffer(Int32 size, Int32[] buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* buffer_ptr = buffer)
                    {
                        Delegates.glInstrumentsBufferSGIX((Int32)size, (Int32*)buffer_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void InstrumentsBuffer(Int32 size, out Int32 buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* buffer_ptr = &buffer)
                    {
                        Delegates.glInstrumentsBufferSGIX((Int32)size, (Int32*)buffer_ptr);
                        buffer = *buffer_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void InstrumentsBuffer(Int32 size, Int32* buffer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glInstrumentsBufferSGIX((Int32)size, (Int32*)buffer);
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsAsyncMarker(Int32 marker)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsAsyncMarkerSGIX((UInt32)marker);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsAsyncMarker(UInt32 marker)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsAsyncMarkerSGIX((UInt32)marker);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void LightEnv(Chela.Graphics.GL2.SgixFragmentLighting pname, Int32 param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glLightEnviSGIX((Chela.Graphics.GL2.SgixFragmentLighting)pname, (Int32)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ListParameter(Int32 list, Chela.Graphics.GL2.ListParameterName pname, Single param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glListParameterfSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Single)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ListParameter(UInt32 list, Chela.Graphics.GL2.ListParameterName pname, Single param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glListParameterfSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Single)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ListParameter(Int32 list, Chela.Graphics.GL2.ListParameterName pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glListParameterfvSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ListParameter(Int32 list, Chela.Graphics.GL2.ListParameterName pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glListParameterfvSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ListParameter(UInt32 list, Chela.Graphics.GL2.ListParameterName pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glListParameterfvSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ListParameter(UInt32 list, Chela.Graphics.GL2.ListParameterName pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glListParameterfvSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ListParameter(Int32 list, Chela.Graphics.GL2.ListParameterName pname, Int32 param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glListParameteriSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Int32)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ListParameter(UInt32 list, Chela.Graphics.GL2.ListParameterName pname, Int32 param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glListParameteriSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Int32)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ListParameter(Int32 list, Chela.Graphics.GL2.ListParameterName pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glListParameterivSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ListParameter(Int32 list, Chela.Graphics.GL2.ListParameterName pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glListParameterivSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ListParameter(UInt32 list, Chela.Graphics.GL2.ListParameterName pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glListParameterivSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ListParameter(UInt32 list, Chela.Graphics.GL2.ListParameterName pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glListParameterivSGIX((UInt32)list, (Chela.Graphics.GL2.ListParameterName)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void LoadIdentityDeformationMap(Int32 mask)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glLoadIdentityDeformationMapSGIX((UInt32)mask);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void LoadIdentityDeformationMap(UInt32 mask)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glLoadIdentityDeformationMapSGIX((UInt32)mask);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void PixelTexGen(Chela.Graphics.GL2.SgixPixelTexture mode)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glPixelTexGenSGIX((Chela.Graphics.GL2.SgixPixelTexture)mode);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 PollAsync(out Int32 markerp)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* markerp_ptr = &markerp)
                    {
                        Int32 retval = Delegates.glPollAsyncSGIX((UInt32*)markerp_ptr);
                        markerp = *markerp_ptr;
                        return retval;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe Int32 PollAsync(Int32* markerp)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                return Delegates.glPollAsyncSGIX((UInt32*)markerp);
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 PollAsync(out UInt32 markerp)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* markerp_ptr = &markerp)
                    {
                        Int32 retval = Delegates.glPollAsyncSGIX((UInt32*)markerp_ptr);
                        markerp = *markerp_ptr;
                        return retval;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe Int32 PollAsync(UInt32* markerp)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                return Delegates.glPollAsyncSGIX((UInt32*)markerp);
                #if DEBUG
                }
                #endif
            }

            public static 
            Int32 PollInstruments(out Int32 marker_p)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* marker_p_ptr = &marker_p)
                    {
                        Int32 retval = Delegates.glPollInstrumentsSGIX((Int32*)marker_p_ptr);
                        marker_p = *marker_p_ptr;
                        return retval;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe Int32 PollInstruments(Int32* marker_p)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                return Delegates.glPollInstrumentsSGIX((Int32*)marker_p);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReadInstruments(Int32 marker)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glReadInstrumentsSGIX((Int32)marker);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReferencePlane(Double[] equation)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* equation_ptr = equation)
                    {
                        Delegates.glReferencePlaneSGIX((Double*)equation_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReferencePlane(ref Double equation)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Double* equation_ptr = &equation)
                    {
                        Delegates.glReferencePlaneSGIX((Double*)equation_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReferencePlane(Double* equation)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glReferencePlaneSGIX((Double*)equation);
                #if DEBUG
                }
                #endif
            }

            public static 
            void SpriteParameter(Chela.Graphics.GL2.SgixSprite pname, Single param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSpriteParameterfSGIX((Chela.Graphics.GL2.SgixSprite)pname, (Single)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SpriteParameter(Chela.Graphics.GL2.SgixSprite pname, Single[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* @params_ptr = @params)
                    {
                        Delegates.glSpriteParameterfvSGIX((Chela.Graphics.GL2.SgixSprite)pname, (Single*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void SpriteParameter(Chela.Graphics.GL2.SgixSprite pname, Single* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glSpriteParameterfvSGIX((Chela.Graphics.GL2.SgixSprite)pname, (Single*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void SpriteParameter(Chela.Graphics.GL2.SgixSprite pname, Int32 param)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSpriteParameteriSGIX((Chela.Graphics.GL2.SgixSprite)pname, (Int32)param);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SpriteParameter(Chela.Graphics.GL2.SgixSprite pname, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glSpriteParameterivSGIX((Chela.Graphics.GL2.SgixSprite)pname, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void SpriteParameter(Chela.Graphics.GL2.SgixSprite pname, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glSpriteParameterivSGIX((Chela.Graphics.GL2.SgixSprite)pname, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void StartInstruments()
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glStartInstrumentsSGIX();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void StopInstruments(Int32 marker)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glStopInstrumentsSGIX((Int32)marker);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TagSampleBuffer()
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTagSampleBufferSGIX();
                }
                #if DEBUG
                }
                #endif
            }

        }

        public static partial class Sun
        {
            public static 
            void Color3fVertex3(Single r, Single g, Single b, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glColor3fVertex3fSUN((Single)r, (Single)g, (Single)b, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Color3fVertex3(Single[] c, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* c_ptr = c)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glColor3fVertex3fvSUN((Single*)c_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Color3fVertex3(ref Single c, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* c_ptr = &c)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glColor3fVertex3fvSUN((Single*)c_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Color3fVertex3(Single* c, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glColor3fVertex3fvSUN((Single*)c, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Color4fNormal3fVertex3(Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glColor4fNormal3fVertex3fSUN((Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Color4fNormal3fVertex3(Single[] c, Single[] n, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* c_ptr = c)
                    fixed (Single* n_ptr = n)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Color4fNormal3fVertex3(ref Single c, ref Single n, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* c_ptr = &c)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Color4fNormal3fVertex3(Single* c, Single* n, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glColor4fNormal3fVertex3fvSUN((Single*)c, (Single*)n, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Color4ubVertex2(Byte r, Byte g, Byte b, Byte a, Single x, Single y)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glColor4ubVertex2fSUN((Byte)r, (Byte)g, (Byte)b, (Byte)a, (Single)x, (Single)y);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Color4ubVertex2(Byte[] c, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* c_ptr = c)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glColor4ubVertex2fvSUN((Byte*)c_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Color4ubVertex2(ref Byte c, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* c_ptr = &c)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glColor4ubVertex2fvSUN((Byte*)c_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Color4ubVertex2(Byte* c, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glColor4ubVertex2fvSUN((Byte*)c, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void Color4ubVertex3(Byte r, Byte g, Byte b, Byte a, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glColor4ubVertex3fSUN((Byte)r, (Byte)g, (Byte)b, (Byte)a, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Color4ubVertex3(Byte[] c, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* c_ptr = c)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glColor4ubVertex3fvSUN((Byte*)c_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Color4ubVertex3(ref Byte c, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* c_ptr = &c)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glColor4ubVertex3fvSUN((Byte*)c_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Color4ubVertex3(Byte* c, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glColor4ubVertex3fvSUN((Byte*)c, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DrawMeshArrays(Chela.Graphics.GL2.BeginMode mode, Int32 first, Int32 count, Int32 width)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glDrawMeshArraysSUN((Chela.Graphics.GL2.BeginMode)mode, (Int32)first, (Int32)count, (Int32)width);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GlobalAlphaFactor(SByte factor)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGlobalAlphaFactorbSUN((SByte)factor);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GlobalAlphaFactor(Double factor)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGlobalAlphaFactordSUN((Double)factor);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GlobalAlphaFactor(Single factor)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGlobalAlphaFactorfSUN((Single)factor);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GlobalAlphaFactor(Int32 factor)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGlobalAlphaFactoriSUN((Int32)factor);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GlobalAlphaFactors(Int16 factor)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGlobalAlphaFactorsSUN((Int16)factor);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GlobalAlphaFactor(Byte factor)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGlobalAlphaFactorubSUN((Byte)factor);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GlobalAlphaFactor(UInt32 factor)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGlobalAlphaFactoruiSUN((UInt32)factor);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GlobalAlphaFactor(Int16 factor)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGlobalAlphaFactorusSUN((UInt16)factor);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GlobalAlphaFactor(UInt16 factor)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGlobalAlphaFactorusSUN((UInt16)factor);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Normal3fVertex3(Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glNormal3fVertex3fSUN((Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Normal3fVertex3(Single[] n, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* n_ptr = n)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glNormal3fVertex3fvSUN((Single*)n_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void Normal3fVertex3(ref Single n, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glNormal3fVertex3fvSUN((Single*)n_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void Normal3fVertex3(Single* n, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glNormal3fVertex3fvSUN((Single*)n, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodePointer(Chela.Graphics.GL2.SunTriangleList type, Int32 stride, IntPtr pointer)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glReplacementCodePointerSUN((Chela.Graphics.GL2.SunTriangleList)type, (Int32)stride, (IntPtr)pointer);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodePointer<T2>(Chela.Graphics.GL2.SunTriangleList type, Int32 stride, T2[] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glReplacementCodePointerSUN((Chela.Graphics.GL2.SunTriangleList)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodePointer<T2>(Chela.Graphics.GL2.SunTriangleList type, Int32 stride, T2[,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glReplacementCodePointerSUN((Chela.Graphics.GL2.SunTriangleList)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodePointer<T2>(Chela.Graphics.GL2.SunTriangleList type, Int32 stride, T2[,,] pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glReplacementCodePointerSUN((Chela.Graphics.GL2.SunTriangleList)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodePointer<T2>(Chela.Graphics.GL2.SunTriangleList type, Int32 stride, ref T2 pointer)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glReplacementCodePointerSUN((Chela.Graphics.GL2.SunTriangleList)type, (Int32)stride, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                        pointer = (T2)pointer_ptr.Target;
                    }
                    finally
                    {
                        pointer_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCode(Byte code)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glReplacementCodeubSUN((Byte)code);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCode(Byte[] code)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Byte* code_ptr = code)
                    {
                        Delegates.glReplacementCodeubvSUN((Byte*)code_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCode(Byte* code)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glReplacementCodeubvSUN((Byte*)code);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiColor3fVertex3(Int32 rc, Single r, Single g, Single b, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glReplacementCodeuiColor3fVertex3fSUN((UInt32)rc, (Single)r, (Single)g, (Single)b, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiColor3fVertex3(UInt32 rc, Single r, Single g, Single b, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glReplacementCodeuiColor3fVertex3fSUN((UInt32)rc, (Single)r, (Single)g, (Single)b, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiColor3fVertex3(ref Int32 rc, ref Single c, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* rc_ptr = &rc)
                    fixed (Single* c_ptr = &c)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiColor3fVertex3(Int32* rc, Single[] c, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Single* c_ptr = c)
                fixed (Single* v_ptr = v)
                {
                    Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)v_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiColor3fVertex3(Int32* rc, Single* c, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc, (Single*)c, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiColor3fVertex3(ref UInt32 rc, ref Single c, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* rc_ptr = &rc)
                    fixed (Single* c_ptr = &c)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiColor3fVertex3(UInt32* rc, Single[] c, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Single* c_ptr = c)
                fixed (Single* v_ptr = v)
                {
                    Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)v_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiColor3fVertex3(UInt32* rc, Single* c, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN((UInt32*)rc, (Single*)c, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3(Int32 rc, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glReplacementCodeuiColor4fNormal3fVertex3fSUN((UInt32)rc, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3(UInt32 rc, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glReplacementCodeuiColor4fNormal3fVertex3fSUN((UInt32)rc, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3(ref Int32 rc, ref Single c, ref Single n, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* rc_ptr = &rc)
                    fixed (Single* c_ptr = &c)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3(Int32* rc, Single[] c, Single[] n, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Single* c_ptr = c)
                fixed (Single* n_ptr = n)
                fixed (Single* v_ptr = v)
                {
                    Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3(Int32* rc, Single* c, Single* n, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c, (Single*)n, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiColor4fNormal3fVertex3(ref UInt32 rc, ref Single c, ref Single n, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* rc_ptr = &rc)
                    fixed (Single* c_ptr = &c)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3(UInt32* rc, Single[] c, Single[] n, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Single* c_ptr = c)
                fixed (Single* n_ptr = n)
                fixed (Single* v_ptr = v)
                {
                    Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiColor4fNormal3fVertex3(UInt32* rc, Single* c, Single* n, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)c, (Single*)n, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiColor4ubVertex3(Int32 rc, Byte r, Byte g, Byte b, Byte a, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glReplacementCodeuiColor4ubVertex3fSUN((UInt32)rc, (Byte)r, (Byte)g, (Byte)b, (Byte)a, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiColor4ubVertex3(UInt32 rc, Byte r, Byte g, Byte b, Byte a, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glReplacementCodeuiColor4ubVertex3fSUN((UInt32)rc, (Byte)r, (Byte)g, (Byte)b, (Byte)a, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiColor4ubVertex3(ref Int32 rc, ref Byte c, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* rc_ptr = &rc)
                    fixed (Byte* c_ptr = &c)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3(Int32* rc, Byte[] c, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Byte* c_ptr = c)
                fixed (Single* v_ptr = v)
                {
                    Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc, (Byte*)c_ptr, (Single*)v_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3(Int32* rc, Byte* c, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc, (Byte*)c, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiColor4ubVertex3(ref UInt32 rc, ref Byte c, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* rc_ptr = &rc)
                    fixed (Byte* c_ptr = &c)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3(UInt32* rc, Byte[] c, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Byte* c_ptr = c)
                fixed (Single* v_ptr = v)
                {
                    Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc, (Byte*)c_ptr, (Single*)v_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiColor4ubVertex3(UInt32* rc, Byte* c, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN((UInt32*)rc, (Byte*)c, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiNormal3fVertex3(Int32 rc, Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glReplacementCodeuiNormal3fVertex3fSUN((UInt32)rc, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiNormal3fVertex3(UInt32 rc, Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glReplacementCodeuiNormal3fVertex3fSUN((UInt32)rc, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiNormal3fVertex3(ref Int32 rc, ref Single n, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* rc_ptr = &rc)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3(Int32* rc, Single[] n, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Single* n_ptr = n)
                fixed (Single* v_ptr = v)
                {
                    Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc, (Single*)n_ptr, (Single*)v_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3(Int32* rc, Single* n, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc, (Single*)n, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiNormal3fVertex3(ref UInt32 rc, ref Single n, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* rc_ptr = &rc)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3(UInt32* rc, Single[] n, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Single* n_ptr = n)
                fixed (Single* v_ptr = v)
                {
                    Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc, (Single*)n_ptr, (Single*)v_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiNormal3fVertex3(UInt32* rc, Single* n, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN((UInt32*)rc, (Single*)n, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCode(Int32 code)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glReplacementCodeuiSUN((UInt32)code);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCode(UInt32 code)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glReplacementCodeuiSUN((UInt32)code);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(Int32 rc, Single s, Single t, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(UInt32 rc, Single s, Single t, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(ref Int32 rc, ref Single tc, ref Single c, ref Single n, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* rc_ptr = &rc)
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* c_ptr = &c)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(Int32* rc, Single[] tc, Single[] c, Single[] n, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Single* tc_ptr = tc)
                fixed (Single* c_ptr = c)
                fixed (Single* n_ptr = n)
                fixed (Single* v_ptr = v)
                {
                    Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(Int32* rc, Single* tc, Single* c, Single* n, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c, (Single*)n, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(ref UInt32 rc, ref Single tc, ref Single c, ref Single n, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* rc_ptr = &rc)
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* c_ptr = &c)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(UInt32* rc, Single[] tc, Single[] c, Single[] n, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Single* tc_ptr = tc)
                fixed (Single* c_ptr = c)
                fixed (Single* n_ptr = n)
                fixed (Single* v_ptr = v)
                {
                    Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3(UInt32* rc, Single* tc, Single* c, Single* n, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)c, (Single*)n, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3(Int32 rc, Single s, Single t, Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3(UInt32 rc, Single s, Single t, Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3(ref Int32 rc, ref Single tc, ref Single n, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* rc_ptr = &rc)
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3(Int32* rc, Single[] tc, Single[] n, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Single* tc_ptr = tc)
                fixed (Single* n_ptr = n)
                fixed (Single* v_ptr = v)
                {
                    Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3(Int32* rc, Single* tc, Single* n, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)n, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiTexCoord2fNormal3fVertex3(ref UInt32 rc, ref Single tc, ref Single n, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* rc_ptr = &rc)
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3(UInt32* rc, Single[] tc, Single[] n, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Single* tc_ptr = tc)
                fixed (Single* n_ptr = n)
                fixed (Single* v_ptr = v)
                {
                    Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiTexCoord2fNormal3fVertex3(UInt32* rc, Single* tc, Single* n, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)n, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiTexCoord2fVertex3(Int32 rc, Single s, Single t, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glReplacementCodeuiTexCoord2fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiTexCoord2fVertex3(UInt32 rc, Single s, Single t, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glReplacementCodeuiTexCoord2fVertex3fSUN((UInt32)rc, (Single)s, (Single)t, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiTexCoord2fVertex3(ref Int32 rc, ref Single tc, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* rc_ptr = &rc)
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3(Int32* rc, Single[] tc, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Single* tc_ptr = tc)
                fixed (Single* v_ptr = v)
                {
                    Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)v_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3(Int32* rc, Single* tc, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiTexCoord2fVertex3(ref UInt32 rc, ref Single tc, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* rc_ptr = &rc)
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc_ptr, (Single*)tc_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3(UInt32* rc, Single[] tc, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Single* tc_ptr = tc)
                fixed (Single* v_ptr = v)
                {
                    Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc, (Single*)tc_ptr, (Single*)v_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiTexCoord2fVertex3(UInt32* rc, Single* tc, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN((UInt32*)rc, (Single*)tc, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiVertex3(Int32 rc, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glReplacementCodeuiVertex3fSUN((UInt32)rc, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiVertex3(UInt32 rc, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glReplacementCodeuiVertex3fSUN((UInt32)rc, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiVertex3(ref Int32 rc, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* rc_ptr = &rc)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiVertex3(Int32* rc, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Single* v_ptr = v)
                {
                    Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc, (Single*)v_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiVertex3(Int32* rc, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCodeuiVertex3(ref UInt32 rc, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* rc_ptr = &rc)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiVertex3(UInt32* rc, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                fixed (Single* v_ptr = v)
                {
                    Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc, (Single*)v_ptr);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCodeuiVertex3(UInt32* rc, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glReplacementCodeuiVertex3fvSUN((UInt32*)rc, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCode(Int32[] code)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* code_ptr = code)
                    {
                        Delegates.glReplacementCodeuivSUN((UInt32*)code_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCode(Int32* code)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glReplacementCodeuivSUN((UInt32*)code);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCode(UInt32[] code)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* code_ptr = code)
                    {
                        Delegates.glReplacementCodeuivSUN((UInt32*)code_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCode(UInt32* code)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glReplacementCodeuivSUN((UInt32*)code);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCode(Int16 code)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glReplacementCodeusSUN((UInt16)code);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCode(UInt16 code)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glReplacementCodeusSUN((UInt16)code);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCode(Int16[] code)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int16* code_ptr = code)
                    {
                        Delegates.glReplacementCodeusvSUN((UInt16*)code_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCode(Int16* code)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glReplacementCodeusvSUN((UInt16*)code);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ReplacementCode(UInt16[] code)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt16* code_ptr = code)
                    {
                        Delegates.glReplacementCodeusvSUN((UInt16*)code_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void ReplacementCode(UInt16* code)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glReplacementCodeusvSUN((UInt16*)code);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord2fColor3fVertex3(Single s, Single t, Single r, Single g, Single b, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexCoord2fColor3fVertex3fSUN((Single)s, (Single)t, (Single)r, (Single)g, (Single)b, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord2fColor3fVertex3(Single[] tc, Single[] c, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* tc_ptr = tc)
                    fixed (Single* c_ptr = c)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord2fColor3fVertex3(ref Single tc, ref Single c, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* c_ptr = &c)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TexCoord2fColor3fVertex3(Single* tc, Single* c, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTexCoord2fColor3fVertex3fvSUN((Single*)tc, (Single*)c, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord2fColor4fNormal3fVertex3(Single s, Single t, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexCoord2fColor4fNormal3fVertex3fSUN((Single)s, (Single)t, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord2fColor4fNormal3fVertex3(Single[] tc, Single[] c, Single[] n, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* tc_ptr = tc)
                    fixed (Single* c_ptr = c)
                    fixed (Single* n_ptr = n)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord2fColor4fNormal3fVertex3(ref Single tc, ref Single c, ref Single n, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* c_ptr = &c)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TexCoord2fColor4fNormal3fVertex3(Single* tc, Single* c, Single* n, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN((Single*)tc, (Single*)c, (Single*)n, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord2fColor4ubVertex3(Single s, Single t, Byte r, Byte g, Byte b, Byte a, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexCoord2fColor4ubVertex3fSUN((Single)s, (Single)t, (Byte)r, (Byte)g, (Byte)b, (Byte)a, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord2fColor4ubVertex3(Single[] tc, Byte[] c, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* tc_ptr = tc)
                    fixed (Byte* c_ptr = c)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord2fColor4ubVertex3(ref Single tc, ref Byte c, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* tc_ptr = &tc)
                    fixed (Byte* c_ptr = &c)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc_ptr, (Byte*)c_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TexCoord2fColor4ubVertex3(Single* tc, Byte* c, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTexCoord2fColor4ubVertex3fvSUN((Single*)tc, (Byte*)c, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord2fNormal3fVertex3(Single s, Single t, Single nx, Single ny, Single nz, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexCoord2fNormal3fVertex3fSUN((Single)s, (Single)t, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord2fNormal3fVertex3(Single[] tc, Single[] n, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* tc_ptr = tc)
                    fixed (Single* n_ptr = n)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord2fNormal3fVertex3(ref Single tc, ref Single n, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TexCoord2fNormal3fVertex3(Single* tc, Single* n, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTexCoord2fNormal3fVertex3fvSUN((Single*)tc, (Single*)n, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord2fVertex3(Single s, Single t, Single x, Single y, Single z)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexCoord2fVertex3fSUN((Single)s, (Single)t, (Single)x, (Single)y, (Single)z);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord2fVertex3(Single[] tc, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* tc_ptr = tc)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glTexCoord2fVertex3fvSUN((Single*)tc_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord2fVertex3(ref Single tc, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glTexCoord2fVertex3fvSUN((Single*)tc_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TexCoord2fVertex3(Single* tc, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTexCoord2fVertex3fvSUN((Single*)tc, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord4fColor4fNormal3fVertex4(Single s, Single t, Single p, Single q, Single r, Single g, Single b, Single a, Single nx, Single ny, Single nz, Single x, Single y, Single z, Single w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexCoord4fColor4fNormal3fVertex4fSUN((Single)s, (Single)t, (Single)p, (Single)q, (Single)r, (Single)g, (Single)b, (Single)a, (Single)nx, (Single)ny, (Single)nz, (Single)x, (Single)y, (Single)z, (Single)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord4fColor4fNormal3fVertex4(Single[] tc, Single[] c, Single[] n, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* tc_ptr = tc)
                    fixed (Single* c_ptr = c)
                    fixed (Single* n_ptr = n)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord4fColor4fNormal3fVertex4(ref Single tc, ref Single c, ref Single n, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* c_ptr = &c)
                    fixed (Single* n_ptr = &n)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc_ptr, (Single*)c_ptr, (Single*)n_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TexCoord4fColor4fNormal3fVertex4(Single* tc, Single* c, Single* n, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN((Single*)tc, (Single*)c, (Single*)n, (Single*)v);
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord4fVertex4(Single s, Single t, Single p, Single q, Single x, Single y, Single z, Single w)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexCoord4fVertex4fSUN((Single)s, (Single)t, (Single)p, (Single)q, (Single)x, (Single)y, (Single)z, (Single)w);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord4fVertex4(Single[] tc, Single[] v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* tc_ptr = tc)
                    fixed (Single* v_ptr = v)
                    {
                        Delegates.glTexCoord4fVertex4fvSUN((Single*)tc_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexCoord4fVertex4(ref Single tc, ref Single v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Single* tc_ptr = &tc)
                    fixed (Single* v_ptr = &v)
                    {
                        Delegates.glTexCoord4fVertex4fvSUN((Single*)tc_ptr, (Single*)v_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void TexCoord4fVertex4(Single* tc, Single* v)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glTexCoord4fVertex4fvSUN((Single*)tc, (Single*)v);
                #if DEBUG
                }
                #endif
            }

        }

        public static partial class Sunx
        {
            public static 
            void FinishTexture()
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFinishTextureSUNX();
                }
                #if DEBUG
                }
                #endif
            }

        }

    }
}

#region License
//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2009 the Open Toolkit library.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to 
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//
#endregion

namespace Chela.Graphics.ES20
{
    using Chela.Lang;
    using Chela.Text;
    #pragma warning disable 0649
    #pragma warning disable 3019
    #pragma warning disable 1591

    public partial class GL
    {
        public static unsafe partial class Delegates
        {
            public typedef void (*) __apicall (Chela.Graphics.ES20.TextureUnit texture) ActiveTexture;
            public unsafe static ActiveTexture glActiveTexture;
            public typedef void (*) __apicall (UInt32 program, UInt32 shader) AttachShader;
            public unsafe static AttachShader glAttachShader;
            public typedef void (*) __apicall (UInt32 monitor) BeginPerfMonitorAMD;
            public unsafe static BeginPerfMonitorAMD glBeginPerfMonitorAMD;
            public typedef void (*) __apicall (UInt32 program, UInt32 index, sbyte* name) BindAttribLocation;
            public unsafe static BindAttribLocation glBindAttribLocation;
            public typedef void (*) __apicall (Chela.Graphics.ES20.BufferTarget target, UInt32 buffer) BindBuffer;
            public unsafe static BindBuffer glBindBuffer;
            public typedef void (*) __apicall (Chela.Graphics.ES20.FramebufferTarget target, UInt32 framebuffer) BindFramebuffer;
            public unsafe static BindFramebuffer glBindFramebuffer;
            public typedef void (*) __apicall (Chela.Graphics.ES20.RenderbufferTarget target, UInt32 renderbuffer) BindRenderbuffer;
            public unsafe static BindRenderbuffer glBindRenderbuffer;
            public typedef void (*) __apicall (Chela.Graphics.ES20.TextureTarget target, UInt32 texture) BindTexture;
            public unsafe static BindTexture glBindTexture;
            public typedef void (*) __apicall (Single red, Single green, Single blue, Single alpha) BlendColor;
            public unsafe static BlendColor glBlendColor;
            public typedef void (*) __apicall (Chela.Graphics.ES20.BlendEquationMode mode) BlendEquation;
            public unsafe static BlendEquation glBlendEquation;
            public typedef void (*) __apicall (Chela.Graphics.ES20.BlendEquationMode modeRGB, Chela.Graphics.ES20.BlendEquationMode modeAlpha) BlendEquationSeparate;
            public unsafe static BlendEquationSeparate glBlendEquationSeparate;
            public typedef void (*) __apicall (Chela.Graphics.ES20.BlendingFactorSrc sfactor, Chela.Graphics.ES20.BlendingFactorDest dfactor) BlendFunc;
            public unsafe static BlendFunc glBlendFunc;
            public typedef void (*) __apicall (Chela.Graphics.ES20.BlendingFactorSrc srcRGB, Chela.Graphics.ES20.BlendingFactorDest dstRGB, Chela.Graphics.ES20.BlendingFactorSrc srcAlpha, Chela.Graphics.ES20.BlendingFactorDest dstAlpha) BlendFuncSeparate;
            public unsafe static BlendFuncSeparate glBlendFuncSeparate;
            public typedef void (*) __apicall (Chela.Graphics.ES20.BufferTarget target, IntPtr size, IntPtr data, Chela.Graphics.ES20.BufferUsage usage) BufferData;
            public unsafe static BufferData glBufferData;
            public typedef void (*) __apicall (Chela.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr size, IntPtr data) BufferSubData;
            public unsafe static BufferSubData glBufferSubData;
            public typedef Chela.Graphics.ES20.FramebufferErrorCode (*) __apicall (Chela.Graphics.ES20.FramebufferTarget target) CheckFramebufferStatus;
            public unsafe static CheckFramebufferStatus glCheckFramebufferStatus;
            public typedef void (*) __apicall (Chela.Graphics.ES20.ClearBufferMask mask) Clear;
            public unsafe static Clear glClear;
            public typedef void (*) __apicall (Single red, Single green, Single blue, Single alpha) ClearColor;
            public unsafe static ClearColor glClearColor;
            public typedef void (*) __apicall (Single depth) ClearDepthf;
            public unsafe static ClearDepthf glClearDepthf;
            public typedef void (*) __apicall (Int32 s) ClearStencil;
            public unsafe static ClearStencil glClearStencil;
            public typedef void (*) __apicall (bool red, bool green, bool blue, bool alpha) ColorMask;
            public unsafe static ColorMask glColorMask;
            public typedef void (*) __apicall (UInt32 shader) CompileShader;
            public unsafe static CompileShader glCompileShader;
            public typedef void (*) __apicall (Chela.Graphics.ES20.TextureTarget target, Int32 level, Chela.Graphics.ES20.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data) CompressedTexImage2D;
            public unsafe static CompressedTexImage2D glCompressedTexImage2D;
            public typedef void (*) __apicall (Chela.Graphics.ES20.All target, Int32 level, Chela.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data) CompressedTexImage3DOES;
            public unsafe static CompressedTexImage3DOES glCompressedTexImage3DOES;
            public typedef void (*) __apicall (Chela.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.ES20.PixelFormat format, Int32 imageSize, IntPtr data) CompressedTexSubImage2D;
            public unsafe static CompressedTexSubImage2D glCompressedTexSubImage2D;
            public typedef void (*) __apicall (Chela.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.ES20.All format, Int32 imageSize, IntPtr data) CompressedTexSubImage3DOES;
            public unsafe static CompressedTexSubImage3DOES glCompressedTexSubImage3DOES;
            public typedef void (*) __apicall (Chela.Graphics.ES20.TextureTarget target, Int32 level, Chela.Graphics.ES20.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border) CopyTexImage2D;
            public unsafe static CopyTexImage2D glCopyTexImage2D;
            public typedef void (*) __apicall (Chela.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height) CopyTexSubImage2D;
            public unsafe static CopyTexSubImage2D glCopyTexSubImage2D;
            public typedef void (*) __apicall (Chela.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height) CopyTexSubImage3DOES;
            public unsafe static CopyTexSubImage3DOES glCopyTexSubImage3DOES;
            public typedef Int32 (*) __apicall () CreateProgram;
            public unsafe static CreateProgram glCreateProgram;
            public typedef Int32 (*) __apicall (Chela.Graphics.ES20.ShaderType type) CreateShader;
            public unsafe static CreateShader glCreateShader;
            public typedef void (*) __apicall (Chela.Graphics.ES20.CullFaceMode mode) CullFace;
            public unsafe static CullFace glCullFace;
            public typedef void (*) __apicall (Int32 n, UInt32* buffers) DeleteBuffers;
            public unsafe static DeleteBuffers glDeleteBuffers;
            public typedef void (*) __apicall (Int32 n, UInt32* fences) DeleteFencesNV;
            public unsafe static DeleteFencesNV glDeleteFencesNV;
            public typedef void (*) __apicall (Int32 n, UInt32* framebuffers) DeleteFramebuffers;
            public unsafe static DeleteFramebuffers glDeleteFramebuffers;
            public typedef void (*) __apicall (Int32 n, UInt32* monitors) DeletePerfMonitorsAMD;
            public unsafe static DeletePerfMonitorsAMD glDeletePerfMonitorsAMD;
            public typedef void (*) __apicall (UInt32 program) DeleteProgram;
            public unsafe static DeleteProgram glDeleteProgram;
            public typedef void (*) __apicall (Int32 n, UInt32* renderbuffers) DeleteRenderbuffers;
            public unsafe static DeleteRenderbuffers glDeleteRenderbuffers;
            public typedef void (*) __apicall (UInt32 shader) DeleteShader;
            public unsafe static DeleteShader glDeleteShader;
            public typedef void (*) __apicall (Int32 n, UInt32* textures) DeleteTextures;
            public unsafe static DeleteTextures glDeleteTextures;
            public typedef void (*) __apicall (Chela.Graphics.ES20.DepthFunction func) DepthFunc;
            public unsafe static DepthFunc glDepthFunc;
            public typedef void (*) __apicall (bool flag) DepthMask;
            public unsafe static DepthMask glDepthMask;
            public typedef void (*) __apicall (Single zNear, Single zFar) DepthRangef;
            public unsafe static DepthRangef glDepthRangef;
            public typedef void (*) __apicall (UInt32 program, UInt32 shader) DetachShader;
            public unsafe static DetachShader glDetachShader;
            public typedef void (*) __apicall (Chela.Graphics.ES20.EnableCap cap) Disable;
            public unsafe static Disable glDisable;
            public typedef void (*) __apicall (UInt32 driverControl) DisableDriverControlQCOM;
            public unsafe static DisableDriverControlQCOM glDisableDriverControlQCOM;
            public typedef void (*) __apicall (UInt32 index) DisableVertexAttribArray;
            public unsafe static DisableVertexAttribArray glDisableVertexAttribArray;
            public typedef void (*) __apicall (Chela.Graphics.ES20.BeginMode mode, Int32 first, Int32 count) DrawArrays;
            public unsafe static DrawArrays glDrawArrays;
            public typedef void (*) __apicall (Chela.Graphics.ES20.BeginMode mode, Int32 count, Chela.Graphics.ES20.DrawElementsType type, IntPtr indices) DrawElements;
            public unsafe static DrawElements glDrawElements;
            public typedef void (*) __apicall (Chela.Graphics.ES20.All target, IntPtr image) EGLImageTargetRenderbufferStorageOES;
            public unsafe static EGLImageTargetRenderbufferStorageOES glEGLImageTargetRenderbufferStorageOES;
            public typedef void (*) __apicall (Chela.Graphics.ES20.All target, IntPtr image) EGLImageTargetTexture2DOES;
            public unsafe static EGLImageTargetTexture2DOES glEGLImageTargetTexture2DOES;
            public typedef void (*) __apicall (Chela.Graphics.ES20.EnableCap cap) Enable;
            public unsafe static Enable glEnable;
            public typedef void (*) __apicall (UInt32 driverControl) EnableDriverControlQCOM;
            public unsafe static EnableDriverControlQCOM glEnableDriverControlQCOM;
            public typedef void (*) __apicall (UInt32 index) EnableVertexAttribArray;
            public unsafe static EnableVertexAttribArray glEnableVertexAttribArray;
            public typedef void (*) __apicall (UInt32 monitor) EndPerfMonitorAMD;
            public unsafe static EndPerfMonitorAMD glEndPerfMonitorAMD;
            public typedef void (*) __apicall () Finish;
            public unsafe static Finish glFinish;
            public typedef void (*) __apicall (UInt32 fence) FinishFenceNV;
            public unsafe static FinishFenceNV glFinishFenceNV;
            public typedef void (*) __apicall () Flush;
            public unsafe static Flush glFlush;
            public typedef void (*) __apicall (Chela.Graphics.ES20.FramebufferTarget target, Chela.Graphics.ES20.FramebufferSlot attachment, Chela.Graphics.ES20.RenderbufferTarget renderbuffertarget, UInt32 renderbuffer) FramebufferRenderbuffer;
            public unsafe static FramebufferRenderbuffer glFramebufferRenderbuffer;
            public typedef void (*) __apicall (Chela.Graphics.ES20.FramebufferTarget target, Chela.Graphics.ES20.FramebufferSlot attachment, Chela.Graphics.ES20.TextureTarget textarget, UInt32 texture, Int32 level) FramebufferTexture2D;
            public unsafe static FramebufferTexture2D glFramebufferTexture2D;
            public typedef void (*) __apicall (Chela.Graphics.ES20.All target, Chela.Graphics.ES20.All attachment, Chela.Graphics.ES20.All textarget, UInt32 texture, Int32 level, Int32 zoffset) FramebufferTexture3DOES;
            public unsafe static FramebufferTexture3DOES glFramebufferTexture3DOES;
            public typedef void (*) __apicall (Chela.Graphics.ES20.FrontFaceDirection mode) FrontFace;
            public unsafe static FrontFace glFrontFace;
            public typedef void (*) __apicall (Int32 n, UInt32* buffers) GenBuffers;
            public unsafe static GenBuffers glGenBuffers;
            public typedef void (*) __apicall (Chela.Graphics.ES20.TextureTarget target) GenerateMipmap;
            public unsafe static GenerateMipmap glGenerateMipmap;
            public typedef void (*) __apicall (Int32 n, UInt32* fences) GenFencesNV;
            public unsafe static GenFencesNV glGenFencesNV;
            public typedef void (*) __apicall (Int32 n, UInt32* framebuffers) GenFramebuffers;
            public unsafe static GenFramebuffers glGenFramebuffers;
            public typedef void (*) __apicall (Int32 n, UInt32* monitors) GenPerfMonitorsAMD;
            public unsafe static GenPerfMonitorsAMD glGenPerfMonitorsAMD;
            public typedef void (*) __apicall (Int32 n, UInt32* renderbuffers) GenRenderbuffers;
            public unsafe static GenRenderbuffers glGenRenderbuffers;
            public typedef void (*) __apicall (Int32 n, UInt32* textures) GenTextures;
            public unsafe static GenTextures glGenTextures;
            public typedef void (*) __apicall (UInt32 program, UInt32 index, Int32 bufsize, Int32* length, Int32* size, Chela.Graphics.ES20.ActiveAttribType* type, sbyte* name) GetActiveAttrib;
            public unsafe static GetActiveAttrib glGetActiveAttrib;
            public typedef void (*) __apicall (UInt32 program, UInt32 index, Int32 bufsize, Int32* length, Int32* size, Chela.Graphics.ES20.ActiveUniformType* type, sbyte* name) GetActiveUniform;
            public unsafe static GetActiveUniform glGetActiveUniform;
            public typedef void (*) __apicall (UInt32 program, Int32 maxcount, Int32* count, UInt32* shaders) GetAttachedShaders;
            public unsafe static GetAttachedShaders glGetAttachedShaders;
            public typedef int (*) __apicall (UInt32 program, sbyte* name) GetAttribLocation;
            public unsafe static GetAttribLocation glGetAttribLocation;
            public typedef void (*) __apicall (Chela.Graphics.ES20.GetPName pname, bool* @params) GetBooleanv;
            public unsafe static GetBooleanv glGetBooleanv;
            public typedef void (*) __apicall (Chela.Graphics.ES20.BufferTarget target, Chela.Graphics.ES20.BufferParameterName pname, Int32* @params) GetBufferParameteriv;
            public unsafe static GetBufferParameteriv glGetBufferParameteriv;
            public typedef void (*) __apicall (Chela.Graphics.ES20.All target, Chela.Graphics.ES20.All pname, IntPtr @params) GetBufferPointervOES;
            public unsafe static GetBufferPointervOES glGetBufferPointervOES;
            public typedef void (*) __apicall (Int32* num, Int32 size, UInt32* driverControls) GetDriverControlsQCOM;
            public unsafe static GetDriverControlsQCOM glGetDriverControlsQCOM;
            public typedef void (*) __apicall (UInt32 driverControl, Int32 bufSize, Int32* length, sbyte* driverControlString) GetDriverControlStringQCOM;
            public unsafe static GetDriverControlStringQCOM glGetDriverControlStringQCOM;
            public typedef Chela.Graphics.ES20.ErrorCode (*) __apicall () GetError;
            public unsafe static GetError glGetError;
            public typedef void (*) __apicall (UInt32 fence, Int32* @params) GetFenceivNV;
            public unsafe static GetFenceivNV glGetFenceivNV;
            public typedef void (*) __apicall (Chela.Graphics.ES20.GetPName pname, Single* @params) GetFloatv;
            public unsafe static GetFloatv glGetFloatv;
            public typedef void (*) __apicall (Chela.Graphics.ES20.FramebufferTarget target, Chela.Graphics.ES20.FramebufferSlot attachment, Chela.Graphics.ES20.FramebufferParameterName pname, Int32* @params) GetFramebufferAttachmentParameteriv;
            public unsafe static GetFramebufferAttachmentParameteriv glGetFramebufferAttachmentParameteriv;
            public typedef void (*) __apicall (Chela.Graphics.ES20.GetPName pname, Int32* @params) GetIntegerv;
            public unsafe static GetIntegerv glGetIntegerv;
            public typedef void (*) __apicall (UInt32 monitor, Chela.Graphics.ES20.All pname, Int32 dataSize, UInt32* data, Int32* bytesWritten) GetPerfMonitorCounterDataAMD;
            public unsafe static GetPerfMonitorCounterDataAMD glGetPerfMonitorCounterDataAMD;
            public typedef void (*) __apicall (UInt32 group, UInt32 counter, Chela.Graphics.ES20.All pname, IntPtr data) GetPerfMonitorCounterInfoAMD;
            public unsafe static GetPerfMonitorCounterInfoAMD glGetPerfMonitorCounterInfoAMD;
            public typedef void (*) __apicall (UInt32 group, Int32* numCounters, Int32* maxActiveCounters, Int32 counterSize, UInt32* counters) GetPerfMonitorCountersAMD;
            public unsafe static GetPerfMonitorCountersAMD glGetPerfMonitorCountersAMD;
            public typedef void (*) __apicall (UInt32 group, UInt32 counter, Int32 bufSize, Int32* length, sbyte* counterString) GetPerfMonitorCounterStringAMD;
            public unsafe static GetPerfMonitorCounterStringAMD glGetPerfMonitorCounterStringAMD;
            public typedef void (*) __apicall (Int32* numGroups, Int32 groupsSize, UInt32* groups) GetPerfMonitorGroupsAMD;
            public unsafe static GetPerfMonitorGroupsAMD glGetPerfMonitorGroupsAMD;
            public typedef void (*) __apicall (UInt32 group, Int32 bufSize, Int32* length, sbyte* groupString) GetPerfMonitorGroupStringAMD;
            public unsafe static GetPerfMonitorGroupStringAMD glGetPerfMonitorGroupStringAMD;
            public typedef void (*) __apicall (UInt32 program, Int32 bufSize, Int32* length, Chela.Graphics.ES20.All* binaryFormat, IntPtr binary) GetProgramBinaryOES;
            public unsafe static GetProgramBinaryOES glGetProgramBinaryOES;
            public typedef void (*) __apicall (UInt32 program, Int32 bufsize, Int32* length, sbyte* infolog) GetProgramInfoLog;
            public unsafe static GetProgramInfoLog glGetProgramInfoLog;
            public typedef void (*) __apicall (UInt32 program, Chela.Graphics.ES20.ProgramParameter pname, Int32* @params) GetProgramiv;
            public unsafe static GetProgramiv glGetProgramiv;
            public typedef void (*) __apicall (Chela.Graphics.ES20.RenderbufferTarget target, Chela.Graphics.ES20.RenderbufferParameterName pname, Int32* @params) GetRenderbufferParameteriv;
            public unsafe static GetRenderbufferParameteriv glGetRenderbufferParameteriv;
            public typedef void (*) __apicall (UInt32 shader, Int32 bufsize, Int32* length, sbyte* infolog) GetShaderInfoLog;
            public unsafe static GetShaderInfoLog glGetShaderInfoLog;
            public typedef void (*) __apicall (UInt32 shader, Chela.Graphics.ES20.ShaderParameter pname, Int32* @params) GetShaderiv;
            public unsafe static GetShaderiv glGetShaderiv;
            public typedef void (*) __apicall (Chela.Graphics.ES20.ShaderType shadertype, Chela.Graphics.ES20.ShaderPrecision precisiontype, Int32* range, Int32* precision) GetShaderPrecisionFormat;
            public unsafe static GetShaderPrecisionFormat glGetShaderPrecisionFormat;
            public typedef void (*) __apicall (UInt32 shader, Int32 bufsize, Int32* length, sbyte* source) GetShaderSource;
            public unsafe static GetShaderSource glGetShaderSource;
            public typedef System.IntPtr (*) __apicall (Chela.Graphics.ES20.StringName name) GetString;
            public unsafe static GetString glGetString;
            public typedef void (*) __apicall (Chela.Graphics.ES20.TextureTarget target, Chela.Graphics.ES20.GetTextureParameter pname, Single* @params) GetTexParameterfv;
            public unsafe static GetTexParameterfv glGetTexParameterfv;
            public typedef void (*) __apicall (Chela.Graphics.ES20.TextureTarget target, Chela.Graphics.ES20.GetTextureParameter pname, Int32* @params) GetTexParameteriv;
            public unsafe static GetTexParameteriv glGetTexParameteriv;
            public typedef void (*) __apicall (UInt32 program, Int32 location, Single* @params) GetUniformfv;
            public unsafe static GetUniformfv glGetUniformfv;
            public typedef void (*) __apicall (UInt32 program, Int32 location, Int32* @params) GetUniformiv;
            public unsafe static GetUniformiv glGetUniformiv;
            public typedef int (*) __apicall (UInt32 program, sbyte* name) GetUniformLocation;
            public unsafe static GetUniformLocation glGetUniformLocation;
            public typedef void (*) __apicall (UInt32 index, Chela.Graphics.ES20.VertexAttribParameter pname, Single* @params) GetVertexAttribfv;
            public unsafe static GetVertexAttribfv glGetVertexAttribfv;
            public typedef void (*) __apicall (UInt32 index, Chela.Graphics.ES20.VertexAttribParameter pname, Int32* @params) GetVertexAttribiv;
            public unsafe static GetVertexAttribiv glGetVertexAttribiv;
            public typedef void (*) __apicall (UInt32 index, Chela.Graphics.ES20.VertexAttribPointerParameter pname, IntPtr pointer) GetVertexAttribPointerv;
            public unsafe static GetVertexAttribPointerv glGetVertexAttribPointerv;
            public typedef void (*) __apicall (Chela.Graphics.ES20.HintTarget target, Chela.Graphics.ES20.HintMode mode) Hint;
            public unsafe static Hint glHint;
            public typedef bool (*) __apicall (UInt32 buffer) IsBuffer;
            public unsafe static IsBuffer glIsBuffer;
            public typedef bool (*) __apicall (Chela.Graphics.ES20.EnableCap cap) IsEnabled;
            public unsafe static IsEnabled glIsEnabled;
            public typedef bool (*) __apicall (UInt32 fence) IsFenceNV;
            public unsafe static IsFenceNV glIsFenceNV;
            public typedef bool (*) __apicall (UInt32 framebuffer) IsFramebuffer;
            public unsafe static IsFramebuffer glIsFramebuffer;
            public typedef bool (*) __apicall (UInt32 program) IsProgram;
            public unsafe static IsProgram glIsProgram;
            public typedef bool (*) __apicall (UInt32 renderbuffer) IsRenderbuffer;
            public unsafe static IsRenderbuffer glIsRenderbuffer;
            public typedef bool (*) __apicall (UInt32 shader) IsShader;
            public unsafe static IsShader glIsShader;
            public typedef bool (*) __apicall (UInt32 texture) IsTexture;
            public unsafe static IsTexture glIsTexture;
            public typedef void (*) __apicall (Single width) LineWidth;
            public unsafe static LineWidth glLineWidth;
            public typedef void (*) __apicall (UInt32 program) LinkProgram;
            public unsafe static LinkProgram glLinkProgram;
            public typedef System.IntPtr (*) __apicall (Chela.Graphics.ES20.All target, Chela.Graphics.ES20.All access) MapBufferOES;
            public unsafe static MapBufferOES glMapBufferOES;
            public typedef void (*) __apicall (Chela.Graphics.ES20.PixelStoreParameter pname, Int32 param) PixelStorei;
            public unsafe static PixelStorei glPixelStorei;
            public typedef void (*) __apicall (Single factor, Single units) PolygonOffset;
            public unsafe static PolygonOffset glPolygonOffset;
            public typedef void (*) __apicall (UInt32 program, Chela.Graphics.ES20.All binaryFormat, IntPtr binary, Int32 length) ProgramBinaryOES;
            public unsafe static ProgramBinaryOES glProgramBinaryOES;
            public typedef void (*) __apicall (Int32 x, Int32 y, Int32 width, Int32 height, Chela.Graphics.ES20.PixelFormat format, Chela.Graphics.ES20.PixelType type, IntPtr pixels) ReadPixels;
            public unsafe static ReadPixels glReadPixels;
            public typedef void (*) __apicall () ReleaseShaderCompiler;
            public unsafe static ReleaseShaderCompiler glReleaseShaderCompiler;
            public typedef void (*) __apicall (Chela.Graphics.ES20.RenderbufferTarget target, Chela.Graphics.ES20.RenderbufferInternalFormat internalformat, Int32 width, Int32 height) RenderbufferStorage;
            public unsafe static RenderbufferStorage glRenderbufferStorage;
            public typedef void (*) __apicall (Single value, bool invert) SampleCoverage;
            public unsafe static SampleCoverage glSampleCoverage;
            public typedef void (*) __apicall (Int32 x, Int32 y, Int32 width, Int32 height) Scissor;
            public unsafe static Scissor glScissor;
            public typedef void (*) __apicall (UInt32 monitor, bool enable, UInt32 group, Int32 numCounters, UInt32* countersList) SelectPerfMonitorCountersAMD;
            public unsafe static SelectPerfMonitorCountersAMD glSelectPerfMonitorCountersAMD;
            public typedef void (*) __apicall (UInt32 fence, Chela.Graphics.ES20.All condition) SetFenceNV;
            public unsafe static SetFenceNV glSetFenceNV;
            public typedef void (*) __apicall (Int32 n, UInt32* shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length) ShaderBinary;
            public unsafe static ShaderBinary glShaderBinary;
            public typedef void (*) __apicall (UInt32 shader, Int32 count, sbyte** @string, Int32* length) ShaderSource;
            public unsafe static ShaderSource glShaderSource;
            public typedef void (*) __apicall (Chela.Graphics.ES20.StencilFunction func, Int32 @ref, UInt32 mask) StencilFunc;
            public unsafe static StencilFunc glStencilFunc;
            public typedef void (*) __apicall (Chela.Graphics.ES20.CullFaceMode face, Chela.Graphics.ES20.StencilFunction func, Int32 @ref, UInt32 mask) StencilFuncSeparate;
            public unsafe static StencilFuncSeparate glStencilFuncSeparate;
            public typedef void (*) __apicall (UInt32 mask) StencilMask;
            public unsafe static StencilMask glStencilMask;
            public typedef void (*) __apicall (Chela.Graphics.ES20.CullFaceMode face, UInt32 mask) StencilMaskSeparate;
            public unsafe static StencilMaskSeparate glStencilMaskSeparate;
            public typedef void (*) __apicall (Chela.Graphics.ES20.StencilOp fail, Chela.Graphics.ES20.StencilOp zfail, Chela.Graphics.ES20.StencilOp zpass) StencilOp;
            public unsafe static StencilOp glStencilOp;
            public typedef void (*) __apicall (Chela.Graphics.ES20.CullFaceMode face, Chela.Graphics.ES20.StencilOp fail, Chela.Graphics.ES20.StencilOp zfail, Chela.Graphics.ES20.StencilOp zpass) StencilOpSeparate;
            public unsafe static StencilOpSeparate glStencilOpSeparate;
            public typedef bool (*) __apicall (UInt32 fence) TestFenceNV;
            public unsafe static TestFenceNV glTestFenceNV;
            public typedef void (*) __apicall (Chela.Graphics.ES20.TextureTarget target, Int32 level, Chela.Graphics.ES20.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.ES20.PixelFormat format, Chela.Graphics.ES20.PixelType type, IntPtr pixels) TexImage2D;
            public unsafe static TexImage2D glTexImage2D;
            public typedef void (*) __apicall (Chela.Graphics.ES20.All target, Int32 level, Chela.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.ES20.All format, Chela.Graphics.ES20.All type, IntPtr pixels) TexImage3DOES;
            public unsafe static TexImage3DOES glTexImage3DOES;
            public typedef void (*) __apicall (Chela.Graphics.ES20.TextureTarget target, Chela.Graphics.ES20.TextureParameterName pname, Single param) TexParameterf;
            public unsafe static TexParameterf glTexParameterf;
            public typedef void (*) __apicall (Chela.Graphics.ES20.TextureTarget target, Chela.Graphics.ES20.TextureParameterName pname, Single* @params) TexParameterfv;
            public unsafe static TexParameterfv glTexParameterfv;
            public typedef void (*) __apicall (Chela.Graphics.ES20.TextureTarget target, Chela.Graphics.ES20.TextureParameterName pname, Int32 param) TexParameteri;
            public unsafe static TexParameteri glTexParameteri;
            public typedef void (*) __apicall (Chela.Graphics.ES20.TextureTarget target, Chela.Graphics.ES20.TextureParameterName pname, Int32* @params) TexParameteriv;
            public unsafe static TexParameteriv glTexParameteriv;
            public typedef void (*) __apicall (Chela.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.ES20.PixelFormat format, Chela.Graphics.ES20.PixelType type, IntPtr pixels) TexSubImage2D;
            public unsafe static TexSubImage2D glTexSubImage2D;
            public typedef void (*) __apicall (Chela.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.ES20.All format, Chela.Graphics.ES20.All type, IntPtr pixels) TexSubImage3DOES;
            public unsafe static TexSubImage3DOES glTexSubImage3DOES;
            public typedef void (*) __apicall (Int32 location, Single x) Uniform1f;
            public unsafe static Uniform1f glUniform1f;
            public typedef void (*) __apicall (Int32 location, Int32 count, Single* v) Uniform1fv;
            public unsafe static Uniform1fv glUniform1fv;
            public typedef void (*) __apicall (Int32 location, Int32 x) Uniform1i;
            public unsafe static Uniform1i glUniform1i;
            public typedef void (*) __apicall (Int32 location, Int32 count, Int32* v) Uniform1iv;
            public unsafe static Uniform1iv glUniform1iv;
            public typedef void (*) __apicall (Int32 location, Single x, Single y) Uniform2f;
            public unsafe static Uniform2f glUniform2f;
            public typedef void (*) __apicall (Int32 location, Int32 count, Single* v) Uniform2fv;
            public unsafe static Uniform2fv glUniform2fv;
            public typedef void (*) __apicall (Int32 location, Int32 x, Int32 y) Uniform2i;
            public unsafe static Uniform2i glUniform2i;
            public typedef void (*) __apicall (Int32 location, Int32 count, Int32* v) Uniform2iv;
            public unsafe static Uniform2iv glUniform2iv;
            public typedef void (*) __apicall (Int32 location, Single x, Single y, Single z) Uniform3f;
            public unsafe static Uniform3f glUniform3f;
            public typedef void (*) __apicall (Int32 location, Int32 count, Single* v) Uniform3fv;
            public unsafe static Uniform3fv glUniform3fv;
            public typedef void (*) __apicall (Int32 location, Int32 x, Int32 y, Int32 z) Uniform3i;
            public unsafe static Uniform3i glUniform3i;
            public typedef void (*) __apicall (Int32 location, Int32 count, Int32* v) Uniform3iv;
            public unsafe static Uniform3iv glUniform3iv;
            public typedef void (*) __apicall (Int32 location, Single x, Single y, Single z, Single w) Uniform4f;
            public unsafe static Uniform4f glUniform4f;
            public typedef void (*) __apicall (Int32 location, Int32 count, Single* v) Uniform4fv;
            public unsafe static Uniform4fv glUniform4fv;
            public typedef void (*) __apicall (Int32 location, Int32 x, Int32 y, Int32 z, Int32 w) Uniform4i;
            public unsafe static Uniform4i glUniform4i;
            public typedef void (*) __apicall (Int32 location, Int32 count, Int32* v) Uniform4iv;
            public unsafe static Uniform4iv glUniform4iv;
            public typedef void (*) __apicall (Int32 location, Int32 count, bool transpose, Single* value) UniformMatrix2fv;
            public unsafe static UniformMatrix2fv glUniformMatrix2fv;
            public typedef void (*) __apicall (Int32 location, Int32 count, bool transpose, Single* value) UniformMatrix3fv;
            public unsafe static UniformMatrix3fv glUniformMatrix3fv;
            public typedef void (*) __apicall (Int32 location, Int32 count, bool transpose, Single* value) UniformMatrix4fv;
            public unsafe static UniformMatrix4fv glUniformMatrix4fv;
            public typedef bool (*) __apicall (Chela.Graphics.ES20.All target) UnmapBufferOES;
            public unsafe static UnmapBufferOES glUnmapBufferOES;
            public typedef void (*) __apicall (UInt32 program) UseProgram;
            public unsafe static UseProgram glUseProgram;
            public typedef void (*) __apicall (UInt32 program) ValidateProgram;
            public unsafe static ValidateProgram glValidateProgram;
            public typedef void (*) __apicall (UInt32 indx, Single x) VertexAttrib1f;
            public unsafe static VertexAttrib1f glVertexAttrib1f;
            public typedef void (*) __apicall (UInt32 indx, Single* values) VertexAttrib1fv;
            public unsafe static VertexAttrib1fv glVertexAttrib1fv;
            public typedef void (*) __apicall (UInt32 indx, Single x, Single y) VertexAttrib2f;
            public unsafe static VertexAttrib2f glVertexAttrib2f;
            public typedef void (*) __apicall (UInt32 indx, Single* values) VertexAttrib2fv;
            public unsafe static VertexAttrib2fv glVertexAttrib2fv;
            public typedef void (*) __apicall (UInt32 indx, Single x, Single y, Single z) VertexAttrib3f;
            public unsafe static VertexAttrib3f glVertexAttrib3f;
            public typedef void (*) __apicall (UInt32 indx, Single* values) VertexAttrib3fv;
            public unsafe static VertexAttrib3fv glVertexAttrib3fv;
            public typedef void (*) __apicall (UInt32 indx, Single x, Single y, Single z, Single w) VertexAttrib4f;
            public unsafe static VertexAttrib4f glVertexAttrib4f;
            public typedef void (*) __apicall (UInt32 indx, Single* values) VertexAttrib4fv;
            public unsafe static VertexAttrib4fv glVertexAttrib4fv;
            public typedef void (*) __apicall (UInt32 indx, Int32 size, Chela.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, IntPtr ptr) VertexAttribPointer;
            public unsafe static VertexAttribPointer glVertexAttribPointer;
            public typedef void (*) __apicall (Int32 x, Int32 y, Int32 width, Int32 height) Viewport;
            public unsafe static Viewport glViewport;

            public unsafe static void LoadEntryPoints()
            {
                glActiveTexture = (ActiveTexture) GetEntryPoint(c"glActiveTexture");
                glAttachShader = (AttachShader) GetEntryPoint(c"glAttachShader");
                glBeginPerfMonitorAMD = (BeginPerfMonitorAMD) GetEntryPoint(c"glBeginPerfMonitorAMD");
                glBindAttribLocation = (BindAttribLocation) GetEntryPoint(c"glBindAttribLocation");
                glBindBuffer = (BindBuffer) GetEntryPoint(c"glBindBuffer");
                glBindFramebuffer = (BindFramebuffer) GetEntryPoint(c"glBindFramebuffer");
                glBindRenderbuffer = (BindRenderbuffer) GetEntryPoint(c"glBindRenderbuffer");
                glBindTexture = (BindTexture) GetEntryPoint(c"glBindTexture");
                glBlendColor = (BlendColor) GetEntryPoint(c"glBlendColor");
                glBlendEquation = (BlendEquation) GetEntryPoint(c"glBlendEquation");
                glBlendEquationSeparate = (BlendEquationSeparate) GetEntryPoint(c"glBlendEquationSeparate");
                glBlendFunc = (BlendFunc) GetEntryPoint(c"glBlendFunc");
                glBlendFuncSeparate = (BlendFuncSeparate) GetEntryPoint(c"glBlendFuncSeparate");
                glBufferData = (BufferData) GetEntryPoint(c"glBufferData");
                glBufferSubData = (BufferSubData) GetEntryPoint(c"glBufferSubData");
                glCheckFramebufferStatus = (CheckFramebufferStatus) GetEntryPoint(c"glCheckFramebufferStatus");
                glClear = (Clear) GetEntryPoint(c"glClear");
                glClearColor = (ClearColor) GetEntryPoint(c"glClearColor");
                glClearDepthf = (ClearDepthf) GetEntryPoint(c"glClearDepthf");
                glClearStencil = (ClearStencil) GetEntryPoint(c"glClearStencil");
                glColorMask = (ColorMask) GetEntryPoint(c"glColorMask");
                glCompileShader = (CompileShader) GetEntryPoint(c"glCompileShader");
                glCompressedTexImage2D = (CompressedTexImage2D) GetEntryPoint(c"glCompressedTexImage2D");
                glCompressedTexImage3DOES = (CompressedTexImage3DOES) GetEntryPoint(c"glCompressedTexImage3DOES");
                glCompressedTexSubImage2D = (CompressedTexSubImage2D) GetEntryPoint(c"glCompressedTexSubImage2D");
                glCompressedTexSubImage3DOES = (CompressedTexSubImage3DOES) GetEntryPoint(c"glCompressedTexSubImage3DOES");
                glCopyTexImage2D = (CopyTexImage2D) GetEntryPoint(c"glCopyTexImage2D");
                glCopyTexSubImage2D = (CopyTexSubImage2D) GetEntryPoint(c"glCopyTexSubImage2D");
                glCopyTexSubImage3DOES = (CopyTexSubImage3DOES) GetEntryPoint(c"glCopyTexSubImage3DOES");
                glCreateProgram = (CreateProgram) GetEntryPoint(c"glCreateProgram");
                glCreateShader = (CreateShader) GetEntryPoint(c"glCreateShader");
                glCullFace = (CullFace) GetEntryPoint(c"glCullFace");
                glDeleteBuffers = (DeleteBuffers) GetEntryPoint(c"glDeleteBuffers");
                glDeleteFencesNV = (DeleteFencesNV) GetEntryPoint(c"glDeleteFencesNV");
                glDeleteFramebuffers = (DeleteFramebuffers) GetEntryPoint(c"glDeleteFramebuffers");
                glDeletePerfMonitorsAMD = (DeletePerfMonitorsAMD) GetEntryPoint(c"glDeletePerfMonitorsAMD");
                glDeleteProgram = (DeleteProgram) GetEntryPoint(c"glDeleteProgram");
                glDeleteRenderbuffers = (DeleteRenderbuffers) GetEntryPoint(c"glDeleteRenderbuffers");
                glDeleteShader = (DeleteShader) GetEntryPoint(c"glDeleteShader");
                glDeleteTextures = (DeleteTextures) GetEntryPoint(c"glDeleteTextures");
                glDepthFunc = (DepthFunc) GetEntryPoint(c"glDepthFunc");
                glDepthMask = (DepthMask) GetEntryPoint(c"glDepthMask");
                glDepthRangef = (DepthRangef) GetEntryPoint(c"glDepthRangef");
                glDetachShader = (DetachShader) GetEntryPoint(c"glDetachShader");
                glDisable = (Disable) GetEntryPoint(c"glDisable");
                glDisableDriverControlQCOM = (DisableDriverControlQCOM) GetEntryPoint(c"glDisableDriverControlQCOM");
                glDisableVertexAttribArray = (DisableVertexAttribArray) GetEntryPoint(c"glDisableVertexAttribArray");
                glDrawArrays = (DrawArrays) GetEntryPoint(c"glDrawArrays");
                glDrawElements = (DrawElements) GetEntryPoint(c"glDrawElements");
                glEGLImageTargetRenderbufferStorageOES = (EGLImageTargetRenderbufferStorageOES) GetEntryPoint(c"glEGLImageTargetRenderbufferStorageOES");
                glEGLImageTargetTexture2DOES = (EGLImageTargetTexture2DOES) GetEntryPoint(c"glEGLImageTargetTexture2DOES");
                glEnable = (Enable) GetEntryPoint(c"glEnable");
                glEnableDriverControlQCOM = (EnableDriverControlQCOM) GetEntryPoint(c"glEnableDriverControlQCOM");
                glEnableVertexAttribArray = (EnableVertexAttribArray) GetEntryPoint(c"glEnableVertexAttribArray");
                glEndPerfMonitorAMD = (EndPerfMonitorAMD) GetEntryPoint(c"glEndPerfMonitorAMD");
                glFinish = (Finish) GetEntryPoint(c"glFinish");
                glFinishFenceNV = (FinishFenceNV) GetEntryPoint(c"glFinishFenceNV");
                glFlush = (Flush) GetEntryPoint(c"glFlush");
                glFramebufferRenderbuffer = (FramebufferRenderbuffer) GetEntryPoint(c"glFramebufferRenderbuffer");
                glFramebufferTexture2D = (FramebufferTexture2D) GetEntryPoint(c"glFramebufferTexture2D");
                glFramebufferTexture3DOES = (FramebufferTexture3DOES) GetEntryPoint(c"glFramebufferTexture3DOES");
                glFrontFace = (FrontFace) GetEntryPoint(c"glFrontFace");
                glGenBuffers = (GenBuffers) GetEntryPoint(c"glGenBuffers");
                glGenerateMipmap = (GenerateMipmap) GetEntryPoint(c"glGenerateMipmap");
                glGenFencesNV = (GenFencesNV) GetEntryPoint(c"glGenFencesNV");
                glGenFramebuffers = (GenFramebuffers) GetEntryPoint(c"glGenFramebuffers");
                glGenPerfMonitorsAMD = (GenPerfMonitorsAMD) GetEntryPoint(c"glGenPerfMonitorsAMD");
                glGenRenderbuffers = (GenRenderbuffers) GetEntryPoint(c"glGenRenderbuffers");
                glGenTextures = (GenTextures) GetEntryPoint(c"glGenTextures");
                glGetActiveAttrib = (GetActiveAttrib) GetEntryPoint(c"glGetActiveAttrib");
                glGetActiveUniform = (GetActiveUniform) GetEntryPoint(c"glGetActiveUniform");
                glGetAttachedShaders = (GetAttachedShaders) GetEntryPoint(c"glGetAttachedShaders");
                glGetAttribLocation = (GetAttribLocation) GetEntryPoint(c"glGetAttribLocation");
                glGetBooleanv = (GetBooleanv) GetEntryPoint(c"glGetBooleanv");
                glGetBufferParameteriv = (GetBufferParameteriv) GetEntryPoint(c"glGetBufferParameteriv");
                glGetBufferPointervOES = (GetBufferPointervOES) GetEntryPoint(c"glGetBufferPointervOES");
                glGetDriverControlsQCOM = (GetDriverControlsQCOM) GetEntryPoint(c"glGetDriverControlsQCOM");
                glGetDriverControlStringQCOM = (GetDriverControlStringQCOM) GetEntryPoint(c"glGetDriverControlStringQCOM");
                glGetError = (GetError) GetEntryPoint(c"glGetError");
                glGetFenceivNV = (GetFenceivNV) GetEntryPoint(c"glGetFenceivNV");
                glGetFloatv = (GetFloatv) GetEntryPoint(c"glGetFloatv");
                glGetFramebufferAttachmentParameteriv = (GetFramebufferAttachmentParameteriv) GetEntryPoint(c"glGetFramebufferAttachmentParameteriv");
                glGetIntegerv = (GetIntegerv) GetEntryPoint(c"glGetIntegerv");
                glGetPerfMonitorCounterDataAMD = (GetPerfMonitorCounterDataAMD) GetEntryPoint(c"glGetPerfMonitorCounterDataAMD");
                glGetPerfMonitorCounterInfoAMD = (GetPerfMonitorCounterInfoAMD) GetEntryPoint(c"glGetPerfMonitorCounterInfoAMD");
                glGetPerfMonitorCountersAMD = (GetPerfMonitorCountersAMD) GetEntryPoint(c"glGetPerfMonitorCountersAMD");
                glGetPerfMonitorCounterStringAMD = (GetPerfMonitorCounterStringAMD) GetEntryPoint(c"glGetPerfMonitorCounterStringAMD");
                glGetPerfMonitorGroupsAMD = (GetPerfMonitorGroupsAMD) GetEntryPoint(c"glGetPerfMonitorGroupsAMD");
                glGetPerfMonitorGroupStringAMD = (GetPerfMonitorGroupStringAMD) GetEntryPoint(c"glGetPerfMonitorGroupStringAMD");
                glGetProgramBinaryOES = (GetProgramBinaryOES) GetEntryPoint(c"glGetProgramBinaryOES");
                glGetProgramInfoLog = (GetProgramInfoLog) GetEntryPoint(c"glGetProgramInfoLog");
                glGetProgramiv = (GetProgramiv) GetEntryPoint(c"glGetProgramiv");
                glGetRenderbufferParameteriv = (GetRenderbufferParameteriv) GetEntryPoint(c"glGetRenderbufferParameteriv");
                glGetShaderInfoLog = (GetShaderInfoLog) GetEntryPoint(c"glGetShaderInfoLog");
                glGetShaderiv = (GetShaderiv) GetEntryPoint(c"glGetShaderiv");
                glGetShaderPrecisionFormat = (GetShaderPrecisionFormat) GetEntryPoint(c"glGetShaderPrecisionFormat");
                glGetShaderSource = (GetShaderSource) GetEntryPoint(c"glGetShaderSource");
                glGetString = (GetString) GetEntryPoint(c"glGetString");
                glGetTexParameterfv = (GetTexParameterfv) GetEntryPoint(c"glGetTexParameterfv");
                glGetTexParameteriv = (GetTexParameteriv) GetEntryPoint(c"glGetTexParameteriv");
                glGetUniformfv = (GetUniformfv) GetEntryPoint(c"glGetUniformfv");
                glGetUniformiv = (GetUniformiv) GetEntryPoint(c"glGetUniformiv");
                glGetUniformLocation = (GetUniformLocation) GetEntryPoint(c"glGetUniformLocation");
                glGetVertexAttribfv = (GetVertexAttribfv) GetEntryPoint(c"glGetVertexAttribfv");
                glGetVertexAttribiv = (GetVertexAttribiv) GetEntryPoint(c"glGetVertexAttribiv");
                glGetVertexAttribPointerv = (GetVertexAttribPointerv) GetEntryPoint(c"glGetVertexAttribPointerv");
                glHint = (Hint) GetEntryPoint(c"glHint");
                glIsBuffer = (IsBuffer) GetEntryPoint(c"glIsBuffer");
                glIsEnabled = (IsEnabled) GetEntryPoint(c"glIsEnabled");
                glIsFenceNV = (IsFenceNV) GetEntryPoint(c"glIsFenceNV");
                glIsFramebuffer = (IsFramebuffer) GetEntryPoint(c"glIsFramebuffer");
                glIsProgram = (IsProgram) GetEntryPoint(c"glIsProgram");
                glIsRenderbuffer = (IsRenderbuffer) GetEntryPoint(c"glIsRenderbuffer");
                glIsShader = (IsShader) GetEntryPoint(c"glIsShader");
                glIsTexture = (IsTexture) GetEntryPoint(c"glIsTexture");
                glLineWidth = (LineWidth) GetEntryPoint(c"glLineWidth");
                glLinkProgram = (LinkProgram) GetEntryPoint(c"glLinkProgram");
                glMapBufferOES = (MapBufferOES) GetEntryPoint(c"glMapBufferOES");
                glPixelStorei = (PixelStorei) GetEntryPoint(c"glPixelStorei");
                glPolygonOffset = (PolygonOffset) GetEntryPoint(c"glPolygonOffset");
                glProgramBinaryOES = (ProgramBinaryOES) GetEntryPoint(c"glProgramBinaryOES");
                glReadPixels = (ReadPixels) GetEntryPoint(c"glReadPixels");
                glReleaseShaderCompiler = (ReleaseShaderCompiler) GetEntryPoint(c"glReleaseShaderCompiler");
                glRenderbufferStorage = (RenderbufferStorage) GetEntryPoint(c"glRenderbufferStorage");
                glSampleCoverage = (SampleCoverage) GetEntryPoint(c"glSampleCoverage");
                glScissor = (Scissor) GetEntryPoint(c"glScissor");
                glSelectPerfMonitorCountersAMD = (SelectPerfMonitorCountersAMD) GetEntryPoint(c"glSelectPerfMonitorCountersAMD");
                glSetFenceNV = (SetFenceNV) GetEntryPoint(c"glSetFenceNV");
                glShaderBinary = (ShaderBinary) GetEntryPoint(c"glShaderBinary");
                glShaderSource = (ShaderSource) GetEntryPoint(c"glShaderSource");
                glStencilFunc = (StencilFunc) GetEntryPoint(c"glStencilFunc");
                glStencilFuncSeparate = (StencilFuncSeparate) GetEntryPoint(c"glStencilFuncSeparate");
                glStencilMask = (StencilMask) GetEntryPoint(c"glStencilMask");
                glStencilMaskSeparate = (StencilMaskSeparate) GetEntryPoint(c"glStencilMaskSeparate");
                glStencilOp = (StencilOp) GetEntryPoint(c"glStencilOp");
                glStencilOpSeparate = (StencilOpSeparate) GetEntryPoint(c"glStencilOpSeparate");
                glTestFenceNV = (TestFenceNV) GetEntryPoint(c"glTestFenceNV");
                glTexImage2D = (TexImage2D) GetEntryPoint(c"glTexImage2D");
                glTexImage3DOES = (TexImage3DOES) GetEntryPoint(c"glTexImage3DOES");
                glTexParameterf = (TexParameterf) GetEntryPoint(c"glTexParameterf");
                glTexParameterfv = (TexParameterfv) GetEntryPoint(c"glTexParameterfv");
                glTexParameteri = (TexParameteri) GetEntryPoint(c"glTexParameteri");
                glTexParameteriv = (TexParameteriv) GetEntryPoint(c"glTexParameteriv");
                glTexSubImage2D = (TexSubImage2D) GetEntryPoint(c"glTexSubImage2D");
                glTexSubImage3DOES = (TexSubImage3DOES) GetEntryPoint(c"glTexSubImage3DOES");
                glUniform1f = (Uniform1f) GetEntryPoint(c"glUniform1f");
                glUniform1fv = (Uniform1fv) GetEntryPoint(c"glUniform1fv");
                glUniform1i = (Uniform1i) GetEntryPoint(c"glUniform1i");
                glUniform1iv = (Uniform1iv) GetEntryPoint(c"glUniform1iv");
                glUniform2f = (Uniform2f) GetEntryPoint(c"glUniform2f");
                glUniform2fv = (Uniform2fv) GetEntryPoint(c"glUniform2fv");
                glUniform2i = (Uniform2i) GetEntryPoint(c"glUniform2i");
                glUniform2iv = (Uniform2iv) GetEntryPoint(c"glUniform2iv");
                glUniform3f = (Uniform3f) GetEntryPoint(c"glUniform3f");
                glUniform3fv = (Uniform3fv) GetEntryPoint(c"glUniform3fv");
                glUniform3i = (Uniform3i) GetEntryPoint(c"glUniform3i");
                glUniform3iv = (Uniform3iv) GetEntryPoint(c"glUniform3iv");
                glUniform4f = (Uniform4f) GetEntryPoint(c"glUniform4f");
                glUniform4fv = (Uniform4fv) GetEntryPoint(c"glUniform4fv");
                glUniform4i = (Uniform4i) GetEntryPoint(c"glUniform4i");
                glUniform4iv = (Uniform4iv) GetEntryPoint(c"glUniform4iv");
                glUniformMatrix2fv = (UniformMatrix2fv) GetEntryPoint(c"glUniformMatrix2fv");
                glUniformMatrix3fv = (UniformMatrix3fv) GetEntryPoint(c"glUniformMatrix3fv");
                glUniformMatrix4fv = (UniformMatrix4fv) GetEntryPoint(c"glUniformMatrix4fv");
                glUnmapBufferOES = (UnmapBufferOES) GetEntryPoint(c"glUnmapBufferOES");
                glUseProgram = (UseProgram) GetEntryPoint(c"glUseProgram");
                glValidateProgram = (ValidateProgram) GetEntryPoint(c"glValidateProgram");
                glVertexAttrib1f = (VertexAttrib1f) GetEntryPoint(c"glVertexAttrib1f");
                glVertexAttrib1fv = (VertexAttrib1fv) GetEntryPoint(c"glVertexAttrib1fv");
                glVertexAttrib2f = (VertexAttrib2f) GetEntryPoint(c"glVertexAttrib2f");
                glVertexAttrib2fv = (VertexAttrib2fv) GetEntryPoint(c"glVertexAttrib2fv");
                glVertexAttrib3f = (VertexAttrib3f) GetEntryPoint(c"glVertexAttrib3f");
                glVertexAttrib3fv = (VertexAttrib3fv) GetEntryPoint(c"glVertexAttrib3fv");
                glVertexAttrib4f = (VertexAttrib4f) GetEntryPoint(c"glVertexAttrib4f");
                glVertexAttrib4fv = (VertexAttrib4fv) GetEntryPoint(c"glVertexAttrib4fv");
                glVertexAttribPointer = (VertexAttribPointer) GetEntryPoint(c"glVertexAttribPointer");
                glViewport = (Viewport) GetEntryPoint(c"glViewport");
            }
        }
    }
}

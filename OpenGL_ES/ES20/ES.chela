#region License
//
// The Open Toolkit Library License
//
// Copyright (c) 2006 - 2009 the Open Toolkit library.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights to 
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
//
#endregion

namespace Chela.Graphics.ES20
{
    using Chela.Lang;
    using Chela.Text;
    using Chela.Runtime.InteropServices;
    #pragma warning disable 3019
    #pragma warning disable 1591
    #pragma warning disable 1572
    #pragma warning disable 1573

    public partial class GL
    {

        public static partial class Amd
        {
            public static 
            void BeginPerfMonitor(Int32 monitor)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBeginPerfMonitorAMD((UInt32)monitor);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void BeginPerfMonitor(UInt32 monitor)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glBeginPerfMonitorAMD((UInt32)monitor);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeletePerfMonitors(Int32 n, Int32[] monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* monitors_ptr = monitors)
                    {
                        Delegates.glDeletePerfMonitorsAMD((Int32)n, (UInt32*)monitors_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeletePerfMonitors(Int32 n, ref Int32 monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* monitors_ptr = &monitors)
                    {
                        Delegates.glDeletePerfMonitorsAMD((Int32)n, (UInt32*)monitors_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeletePerfMonitors(Int32 n, Int32* monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeletePerfMonitorsAMD((Int32)n, (UInt32*)monitors);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeletePerfMonitors(Int32 n, UInt32[] monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* monitors_ptr = monitors)
                    {
                        Delegates.glDeletePerfMonitorsAMD((Int32)n, (UInt32*)monitors_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeletePerfMonitors(Int32 n, ref UInt32 monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* monitors_ptr = &monitors)
                    {
                        Delegates.glDeletePerfMonitorsAMD((Int32)n, (UInt32*)monitors_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeletePerfMonitors(Int32 n, UInt32* monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeletePerfMonitorsAMD((Int32)n, (UInt32*)monitors);
                #if DEBUG
                }
                #endif
            }

            public static 
            void EndPerfMonitor(Int32 monitor)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEndPerfMonitorAMD((UInt32)monitor);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EndPerfMonitor(UInt32 monitor)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEndPerfMonitorAMD((UInt32)monitor);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenPerfMonitors(Int32 n, Int32[] monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* monitors_ptr = monitors)
                    {
                        Delegates.glGenPerfMonitorsAMD((Int32)n, (UInt32*)monitors_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenPerfMonitors(Int32 n, out Int32 monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* monitors_ptr = &monitors)
                    {
                        Delegates.glGenPerfMonitorsAMD((Int32)n, (UInt32*)monitors_ptr);
                        monitors = *monitors_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenPerfMonitors(Int32 n, Int32* monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenPerfMonitorsAMD((Int32)n, (UInt32*)monitors);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenPerfMonitors(Int32 n, UInt32[] monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* monitors_ptr = monitors)
                    {
                        Delegates.glGenPerfMonitorsAMD((Int32)n, (UInt32*)monitors_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenPerfMonitors(Int32 n, out UInt32 monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* monitors_ptr = &monitors)
                    {
                        Delegates.glGenPerfMonitorsAMD((Int32)n, (UInt32*)monitors_ptr);
                        monitors = *monitors_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenPerfMonitors(Int32 n, UInt32* monitors)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenPerfMonitorsAMD((Int32)n, (UInt32*)monitors);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterData(Int32 monitor, Chela.Graphics.ES20.All pname, Int32 dataSize, Int32[] data, Int32[] bytesWritten)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* data_ptr = data)
                    fixed (Int32* bytesWritten_ptr = bytesWritten)
                    {
                        Delegates.glGetPerfMonitorCounterDataAMD((UInt32)monitor, (Chela.Graphics.ES20.All)pname, (Int32)dataSize, (UInt32*)data_ptr, (Int32*)bytesWritten_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterData(Int32 monitor, Chela.Graphics.ES20.All pname, Int32 dataSize, out Int32 data, out Int32 bytesWritten)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* data_ptr = &data)
                    fixed (Int32* bytesWritten_ptr = &bytesWritten)
                    {
                        Delegates.glGetPerfMonitorCounterDataAMD((UInt32)monitor, (Chela.Graphics.ES20.All)pname, (Int32)dataSize, (UInt32*)data_ptr, (Int32*)bytesWritten_ptr);
                        data = *data_ptr;
                        bytesWritten = *bytesWritten_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorCounterData(Int32 monitor, Chela.Graphics.ES20.All pname, Int32 dataSize, Int32* data, Int32* bytesWritten)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetPerfMonitorCounterDataAMD((UInt32)monitor, (Chela.Graphics.ES20.All)pname, (Int32)dataSize, (UInt32*)data, (Int32*)bytesWritten);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterData(UInt32 monitor, Chela.Graphics.ES20.All pname, Int32 dataSize, UInt32[] data, Int32[] bytesWritten)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* data_ptr = data)
                    fixed (Int32* bytesWritten_ptr = bytesWritten)
                    {
                        Delegates.glGetPerfMonitorCounterDataAMD((UInt32)monitor, (Chela.Graphics.ES20.All)pname, (Int32)dataSize, (UInt32*)data_ptr, (Int32*)bytesWritten_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterData(UInt32 monitor, Chela.Graphics.ES20.All pname, Int32 dataSize, out UInt32 data, out Int32 bytesWritten)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* data_ptr = &data)
                    fixed (Int32* bytesWritten_ptr = &bytesWritten)
                    {
                        Delegates.glGetPerfMonitorCounterDataAMD((UInt32)monitor, (Chela.Graphics.ES20.All)pname, (Int32)dataSize, (UInt32*)data_ptr, (Int32*)bytesWritten_ptr);
                        data = *data_ptr;
                        bytesWritten = *bytesWritten_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorCounterData(UInt32 monitor, Chela.Graphics.ES20.All pname, Int32 dataSize, UInt32* data, Int32* bytesWritten)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetPerfMonitorCounterDataAMD((UInt32)monitor, (Chela.Graphics.ES20.All)pname, (Int32)dataSize, (UInt32*)data, (Int32*)bytesWritten);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterInfo(Int32 group, Int32 counter, Chela.Graphics.ES20.All pname, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetPerfMonitorCounterInfoAMD((UInt32)group, (UInt32)counter, (Chela.Graphics.ES20.All)pname, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterInfo<T3>(Int32 group, Int32 counter, Chela.Graphics.ES20.All pname, T3[] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPerfMonitorCounterInfoAMD((UInt32)group, (UInt32)counter, (Chela.Graphics.ES20.All)pname, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterInfo<T3>(Int32 group, Int32 counter, Chela.Graphics.ES20.All pname, T3[,] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPerfMonitorCounterInfoAMD((UInt32)group, (UInt32)counter, (Chela.Graphics.ES20.All)pname, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterInfo<T3>(Int32 group, Int32 counter, Chela.Graphics.ES20.All pname, T3[,,] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPerfMonitorCounterInfoAMD((UInt32)group, (UInt32)counter, (Chela.Graphics.ES20.All)pname, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterInfo<T3>(Int32 group, Int32 counter, Chela.Graphics.ES20.All pname, ref T3 data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPerfMonitorCounterInfoAMD((UInt32)group, (UInt32)counter, (Chela.Graphics.ES20.All)pname, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T3)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterInfo(UInt32 group, UInt32 counter, Chela.Graphics.ES20.All pname, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetPerfMonitorCounterInfoAMD((UInt32)group, (UInt32)counter, (Chela.Graphics.ES20.All)pname, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterInfo<T3>(UInt32 group, UInt32 counter, Chela.Graphics.ES20.All pname, T3[] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPerfMonitorCounterInfoAMD((UInt32)group, (UInt32)counter, (Chela.Graphics.ES20.All)pname, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterInfo<T3>(UInt32 group, UInt32 counter, Chela.Graphics.ES20.All pname, T3[,] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPerfMonitorCounterInfoAMD((UInt32)group, (UInt32)counter, (Chela.Graphics.ES20.All)pname, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterInfo<T3>(UInt32 group, UInt32 counter, Chela.Graphics.ES20.All pname, T3[,,] data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPerfMonitorCounterInfoAMD((UInt32)group, (UInt32)counter, (Chela.Graphics.ES20.All)pname, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterInfo<T3>(UInt32 group, UInt32 counter, Chela.Graphics.ES20.All pname, ref T3 data)
                where T3 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetPerfMonitorCounterInfoAMD((UInt32)group, (UInt32)counter, (Chela.Graphics.ES20.All)pname, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T3)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounters(Int32 group, Int32[] numCounters, Int32[] maxActiveCounters, Int32 counterSize, Int32[] counters)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* numCounters_ptr = numCounters)
                    fixed (Int32* maxActiveCounters_ptr = maxActiveCounters)
                    fixed (Int32* counters_ptr = counters)
                    {
                        Delegates.glGetPerfMonitorCountersAMD((UInt32)group, (Int32*)numCounters_ptr, (Int32*)maxActiveCounters_ptr, (Int32)counterSize, (UInt32*)counters_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounters(Int32 group, out Int32 numCounters, out Int32 maxActiveCounters, Int32 counterSize, out Int32 counters)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* numCounters_ptr = &numCounters)
                    fixed (Int32* maxActiveCounters_ptr = &maxActiveCounters)
                    fixed (Int32* counters_ptr = &counters)
                    {
                        Delegates.glGetPerfMonitorCountersAMD((UInt32)group, (Int32*)numCounters_ptr, (Int32*)maxActiveCounters_ptr, (Int32)counterSize, (UInt32*)counters_ptr);
                        numCounters = *numCounters_ptr;
                        maxActiveCounters = *maxActiveCounters_ptr;
                        counters = *counters_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorCounters(Int32 group, Int32* numCounters, Int32* maxActiveCounters, Int32 counterSize, Int32* counters)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetPerfMonitorCountersAMD((UInt32)group, (Int32*)numCounters, (Int32*)maxActiveCounters, (Int32)counterSize, (UInt32*)counters);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounters(UInt32 group, Int32[] numCounters, Int32[] maxActiveCounters, Int32 counterSize, UInt32[] counters)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* numCounters_ptr = numCounters)
                    fixed (Int32* maxActiveCounters_ptr = maxActiveCounters)
                    fixed (UInt32* counters_ptr = counters)
                    {
                        Delegates.glGetPerfMonitorCountersAMD((UInt32)group, (Int32*)numCounters_ptr, (Int32*)maxActiveCounters_ptr, (Int32)counterSize, (UInt32*)counters_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounters(UInt32 group, out Int32 numCounters, out Int32 maxActiveCounters, Int32 counterSize, out UInt32 counters)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* numCounters_ptr = &numCounters)
                    fixed (Int32* maxActiveCounters_ptr = &maxActiveCounters)
                    fixed (UInt32* counters_ptr = &counters)
                    {
                        Delegates.glGetPerfMonitorCountersAMD((UInt32)group, (Int32*)numCounters_ptr, (Int32*)maxActiveCounters_ptr, (Int32)counterSize, (UInt32*)counters_ptr);
                        numCounters = *numCounters_ptr;
                        maxActiveCounters = *maxActiveCounters_ptr;
                        counters = *counters_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorCounters(UInt32 group, Int32* numCounters, Int32* maxActiveCounters, Int32 counterSize, UInt32* counters)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetPerfMonitorCountersAMD((UInt32)group, (Int32*)numCounters, (Int32*)maxActiveCounters, (Int32)counterSize, (UInt32*)counters);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterString(Int32 group, Int32 counter, Int32 bufSize, Int32[] length, StringBuilder counterString)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    {
                        StringHandle counterString_ptr = StringHandle.Alloc(counterString);
                        try
                        {
                            Delegates.glGetPerfMonitorCounterStringAMD((UInt32)group, (UInt32)counter, (Int32)bufSize, (Int32*)length_ptr, counterString_ptr.Address);
                        }
                        finally
                        {
                            counterString_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterString(Int32 group, Int32 counter, Int32 bufSize, out Int32 length, StringBuilder counterString)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        StringHandle counterString_ptr = StringHandle.Alloc(counterString);
                        try
                        {
                            Delegates.glGetPerfMonitorCounterStringAMD((UInt32)group, (UInt32)counter, (Int32)bufSize, (Int32*)length_ptr, counterString_ptr.Address);
                            length = *length_ptr;
                        }
                        finally
                        {
                            counterString_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorCounterString(Int32 group, Int32 counter, Int32 bufSize, Int32* length, StringBuilder counterString)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                StringHandle counterString_ptr = StringHandle.Alloc(counterString);
                try
                {
                    Delegates.glGetPerfMonitorCounterStringAMD((UInt32)group, (UInt32)counter, (Int32)bufSize, (Int32*)length, counterString_ptr.Address);
                }
                finally
                {
                    counterString_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterString(UInt32 group, UInt32 counter, Int32 bufSize, Int32[] length, StringBuilder counterString)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    {
                        StringHandle counterString_ptr = StringHandle.Alloc(counterString);
                        try
                        {
                            Delegates.glGetPerfMonitorCounterStringAMD((UInt32)group, (UInt32)counter, (Int32)bufSize, (Int32*)length_ptr, counterString_ptr.Address);
                        }
                        finally
                        {
                            counterString_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorCounterString(UInt32 group, UInt32 counter, Int32 bufSize, out Int32 length, StringBuilder counterString)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        StringHandle counterString_ptr = StringHandle.Alloc(counterString);
                        try
                        {
                            Delegates.glGetPerfMonitorCounterStringAMD((UInt32)group, (UInt32)counter, (Int32)bufSize, (Int32*)length_ptr, counterString_ptr.Address);
                            length = *length_ptr;
                        }
                        finally
                        {
                            counterString_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorCounterString(UInt32 group, UInt32 counter, Int32 bufSize, Int32* length, StringBuilder counterString)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                StringHandle counterString_ptr = StringHandle.Alloc(counterString);
                try
                {
                    Delegates.glGetPerfMonitorCounterStringAMD((UInt32)group, (UInt32)counter, (Int32)bufSize, (Int32*)length, counterString_ptr.Address);
                }
                finally
                {
                    counterString_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorGroup(Int32[] numGroups, Int32 groupsSize, Int32[] groups)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* numGroups_ptr = numGroups)
                    fixed (Int32* groups_ptr = groups)
                    {
                        Delegates.glGetPerfMonitorGroupsAMD((Int32*)numGroups_ptr, (Int32)groupsSize, (UInt32*)groups_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorGroup(Int32[] numGroups, Int32 groupsSize, UInt32[] groups)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* numGroups_ptr = numGroups)
                    fixed (UInt32* groups_ptr = groups)
                    {
                        Delegates.glGetPerfMonitorGroupsAMD((Int32*)numGroups_ptr, (Int32)groupsSize, (UInt32*)groups_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorGroup(out Int32 numGroups, Int32 groupsSize, out Int32 groups)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* numGroups_ptr = &numGroups)
                    fixed (Int32* groups_ptr = &groups)
                    {
                        Delegates.glGetPerfMonitorGroupsAMD((Int32*)numGroups_ptr, (Int32)groupsSize, (UInt32*)groups_ptr);
                        numGroups = *numGroups_ptr;
                        groups = *groups_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorGroup(out Int32 numGroups, Int32 groupsSize, out UInt32 groups)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* numGroups_ptr = &numGroups)
                    fixed (UInt32* groups_ptr = &groups)
                    {
                        Delegates.glGetPerfMonitorGroupsAMD((Int32*)numGroups_ptr, (Int32)groupsSize, (UInt32*)groups_ptr);
                        numGroups = *numGroups_ptr;
                        groups = *groups_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorGroup(Int32* numGroups, Int32 groupsSize, Int32* groups)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetPerfMonitorGroupsAMD((Int32*)numGroups, (Int32)groupsSize, (UInt32*)groups);
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorGroup(Int32* numGroups, Int32 groupsSize, UInt32* groups)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetPerfMonitorGroupsAMD((Int32*)numGroups, (Int32)groupsSize, (UInt32*)groups);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorGroupString(Int32 group, Int32 bufSize, Int32[] length, StringBuilder groupString)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    {
                        StringHandle groupString_ptr = StringHandle.Alloc(groupString);
                        try
                        {
                            Delegates.glGetPerfMonitorGroupStringAMD((UInt32)group, (Int32)bufSize, (Int32*)length_ptr, groupString_ptr.Address);
                        }
                        finally
                        {
                            groupString_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorGroupString(Int32 group, Int32 bufSize, out Int32 length, StringBuilder groupString)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        StringHandle groupString_ptr = StringHandle.Alloc(groupString);
                        try
                        {
                            Delegates.glGetPerfMonitorGroupStringAMD((UInt32)group, (Int32)bufSize, (Int32*)length_ptr, groupString_ptr.Address);
                            length = *length_ptr;
                        }
                        finally
                        {
                            groupString_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorGroupString(Int32 group, Int32 bufSize, Int32* length, StringBuilder groupString)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                StringHandle groupString_ptr = StringHandle.Alloc(groupString);
                try
                {
                    Delegates.glGetPerfMonitorGroupStringAMD((UInt32)group, (Int32)bufSize, (Int32*)length, groupString_ptr.Address);
                }
                finally
                {
                    groupString_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorGroupString(UInt32 group, Int32 bufSize, Int32[] length, StringBuilder groupString)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    {
                        StringHandle groupString_ptr = StringHandle.Alloc(groupString);
                        try
                        {
                            Delegates.glGetPerfMonitorGroupStringAMD((UInt32)group, (Int32)bufSize, (Int32*)length_ptr, groupString_ptr.Address);
                        }
                        finally
                        {
                            groupString_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetPerfMonitorGroupString(UInt32 group, Int32 bufSize, out Int32 length, StringBuilder groupString)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    {
                        StringHandle groupString_ptr = StringHandle.Alloc(groupString);
                        try
                        {
                            Delegates.glGetPerfMonitorGroupStringAMD((UInt32)group, (Int32)bufSize, (Int32*)length_ptr, groupString_ptr.Address);
                            length = *length_ptr;
                        }
                        finally
                        {
                            groupString_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetPerfMonitorGroupString(UInt32 group, Int32 bufSize, Int32* length, StringBuilder groupString)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                StringHandle groupString_ptr = StringHandle.Alloc(groupString);
                try
                {
                    Delegates.glGetPerfMonitorGroupStringAMD((UInt32)group, (Int32)bufSize, (Int32*)length, groupString_ptr.Address);
                }
                finally
                {
                    groupString_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SelectPerfMonitorCounters(Int32 monitor, bool enable, Int32 group, Int32 numCounters, Int32[] countersList)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* countersList_ptr = countersList)
                    {
                        Delegates.glSelectPerfMonitorCountersAMD((UInt32)monitor, (bool)enable, (UInt32)group, (Int32)numCounters, (UInt32*)countersList_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SelectPerfMonitorCounters(Int32 monitor, bool enable, Int32 group, Int32 numCounters, ref Int32 countersList)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* countersList_ptr = &countersList)
                    {
                        Delegates.glSelectPerfMonitorCountersAMD((UInt32)monitor, (bool)enable, (UInt32)group, (Int32)numCounters, (UInt32*)countersList_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void SelectPerfMonitorCounters(Int32 monitor, bool enable, Int32 group, Int32 numCounters, Int32* countersList)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glSelectPerfMonitorCountersAMD((UInt32)monitor, (bool)enable, (UInt32)group, (Int32)numCounters, (UInt32*)countersList);
                #if DEBUG
                }
                #endif
            }

            public static 
            void SelectPerfMonitorCounters(UInt32 monitor, bool enable, UInt32 group, Int32 numCounters, UInt32[] countersList)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* countersList_ptr = countersList)
                    {
                        Delegates.glSelectPerfMonitorCountersAMD((UInt32)monitor, (bool)enable, (UInt32)group, (Int32)numCounters, (UInt32*)countersList_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SelectPerfMonitorCounters(UInt32 monitor, bool enable, UInt32 group, Int32 numCounters, ref UInt32 countersList)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* countersList_ptr = &countersList)
                    {
                        Delegates.glSelectPerfMonitorCountersAMD((UInt32)monitor, (bool)enable, (UInt32)group, (Int32)numCounters, (UInt32*)countersList_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void SelectPerfMonitorCounters(UInt32 monitor, bool enable, UInt32 group, Int32 numCounters, UInt32* countersList)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glSelectPerfMonitorCountersAMD((UInt32)monitor, (bool)enable, (UInt32)group, (Int32)numCounters, (UInt32*)countersList);
                #if DEBUG
                }
                #endif
            }

        }

        public static 
        void ActiveTexture(Chela.Graphics.ES20.TextureUnit texture)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glActiveTexture((Chela.Graphics.ES20.TextureUnit)texture);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void AttachShader(Int32 program, Int32 shader)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glAttachShader((UInt32)program, (UInt32)shader);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void AttachShader(UInt32 program, UInt32 shader)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glAttachShader((UInt32)program, (UInt32)shader);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindAttribLocation(Int32 program, Int32 index, String name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    Delegates.glBindAttribLocation((UInt32)program, (UInt32)index, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindAttribLocation(UInt32 program, UInt32 index, String name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    Delegates.glBindAttribLocation((UInt32)program, (UInt32)index, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindBuffer(Chela.Graphics.ES20.BufferTarget target, Int32 buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBindBuffer((Chela.Graphics.ES20.BufferTarget)target, (UInt32)buffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindBuffer(Chela.Graphics.ES20.BufferTarget target, UInt32 buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBindBuffer((Chela.Graphics.ES20.BufferTarget)target, (UInt32)buffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindFramebuffer(Chela.Graphics.ES20.FramebufferTarget target, Int32 framebuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBindFramebuffer((Chela.Graphics.ES20.FramebufferTarget)target, (UInt32)framebuffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindFramebuffer(Chela.Graphics.ES20.FramebufferTarget target, UInt32 framebuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBindFramebuffer((Chela.Graphics.ES20.FramebufferTarget)target, (UInt32)framebuffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindRenderbuffer(Chela.Graphics.ES20.RenderbufferTarget target, Int32 renderbuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBindRenderbuffer((Chela.Graphics.ES20.RenderbufferTarget)target, (UInt32)renderbuffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindRenderbuffer(Chela.Graphics.ES20.RenderbufferTarget target, UInt32 renderbuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBindRenderbuffer((Chela.Graphics.ES20.RenderbufferTarget)target, (UInt32)renderbuffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindTexture(Chela.Graphics.ES20.TextureTarget target, Int32 texture)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBindTexture((Chela.Graphics.ES20.TextureTarget)target, (UInt32)texture);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BindTexture(Chela.Graphics.ES20.TextureTarget target, UInt32 texture)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBindTexture((Chela.Graphics.ES20.TextureTarget)target, (UInt32)texture);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BlendColor(Single red, Single green, Single blue, Single alpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBlendColor((Single)red, (Single)green, (Single)blue, (Single)alpha);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BlendEquation(Chela.Graphics.ES20.BlendEquationMode mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBlendEquation((Chela.Graphics.ES20.BlendEquationMode)mode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BlendEquationSeparate(Chela.Graphics.ES20.BlendEquationMode modeRGB, Chela.Graphics.ES20.BlendEquationMode modeAlpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBlendEquationSeparate((Chela.Graphics.ES20.BlendEquationMode)modeRGB, (Chela.Graphics.ES20.BlendEquationMode)modeAlpha);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BlendFunc(Chela.Graphics.ES20.BlendingFactorSrc sfactor, Chela.Graphics.ES20.BlendingFactorDest dfactor)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBlendFunc((Chela.Graphics.ES20.BlendingFactorSrc)sfactor, (Chela.Graphics.ES20.BlendingFactorDest)dfactor);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BlendFuncSeparate(Chela.Graphics.ES20.BlendingFactorSrc srcRGB, Chela.Graphics.ES20.BlendingFactorDest dstRGB, Chela.Graphics.ES20.BlendingFactorSrc srcAlpha, Chela.Graphics.ES20.BlendingFactorDest dstAlpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBlendFuncSeparate((Chela.Graphics.ES20.BlendingFactorSrc)srcRGB, (Chela.Graphics.ES20.BlendingFactorDest)dstRGB, (Chela.Graphics.ES20.BlendingFactorSrc)srcAlpha, (Chela.Graphics.ES20.BlendingFactorDest)dstAlpha);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BufferData(Chela.Graphics.ES20.BufferTarget target, IntPtr size, IntPtr data, Chela.Graphics.ES20.BufferUsage usage)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBufferData((Chela.Graphics.ES20.BufferTarget)target, (IntPtr)size, (IntPtr)data, (Chela.Graphics.ES20.BufferUsage)usage);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BufferData<T2>(Chela.Graphics.ES20.BufferTarget target, IntPtr size, T2[] data, Chela.Graphics.ES20.BufferUsage usage)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferData((Chela.Graphics.ES20.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Chela.Graphics.ES20.BufferUsage)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BufferData<T2>(Chela.Graphics.ES20.BufferTarget target, IntPtr size, T2[,] data, Chela.Graphics.ES20.BufferUsage usage)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferData((Chela.Graphics.ES20.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Chela.Graphics.ES20.BufferUsage)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BufferData<T2>(Chela.Graphics.ES20.BufferTarget target, IntPtr size, T2[,,] data, Chela.Graphics.ES20.BufferUsage usage)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferData((Chela.Graphics.ES20.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Chela.Graphics.ES20.BufferUsage)usage);
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BufferData<T2>(Chela.Graphics.ES20.BufferTarget target, IntPtr size, ref T2 data, Chela.Graphics.ES20.BufferUsage usage)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferData((Chela.Graphics.ES20.BufferTarget)target, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject(), (Chela.Graphics.ES20.BufferUsage)usage);
                    data = (T2)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BufferSubData(Chela.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr size, IntPtr data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glBufferSubData((Chela.Graphics.ES20.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BufferSubData<T3>(Chela.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr size, T3[] data)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferSubData((Chela.Graphics.ES20.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BufferSubData<T3>(Chela.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr size, T3[,] data)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferSubData((Chela.Graphics.ES20.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BufferSubData<T3>(Chela.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr size, T3[,,] data)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferSubData((Chela.Graphics.ES20.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void BufferSubData<T3>(Chela.Graphics.ES20.BufferTarget target, IntPtr offset, IntPtr size, ref T3 data)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glBufferSubData((Chela.Graphics.ES20.BufferTarget)target, (IntPtr)offset, (IntPtr)size, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T3)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        Chela.Graphics.ES20.FramebufferErrorCode CheckFramebufferStatus(Chela.Graphics.ES20.FramebufferTarget target)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glCheckFramebufferStatus((Chela.Graphics.ES20.FramebufferTarget)target);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Clear(Chela.Graphics.ES20.ClearBufferMask mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glClear((Chela.Graphics.ES20.ClearBufferMask)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ClearColor(Single red, Single green, Single blue, Single alpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glClearColor((Single)red, (Single)green, (Single)blue, (Single)alpha);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ClearDepth(Single depth)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glClearDepthf((Single)depth);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ClearStencil(Int32 s)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glClearStencil((Int32)s);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ColorMask(bool red, bool green, bool blue, bool alpha)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glColorMask((bool)red, (bool)green, (bool)blue, (bool)alpha);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompileShader(Int32 shader)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCompileShader((UInt32)shader);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompileShader(UInt32 shader)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCompileShader((UInt32)shader);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexImage2D(Chela.Graphics.ES20.TextureTarget target, Int32 level, Chela.Graphics.ES20.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, IntPtr data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCompressedTexImage2D((Chela.Graphics.ES20.TextureTarget)target, (Int32)level, (Chela.Graphics.ES20.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexImage2D<T7>(Chela.Graphics.ES20.TextureTarget target, Int32 level, Chela.Graphics.ES20.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, T7[] data)
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage2D((Chela.Graphics.ES20.TextureTarget)target, (Int32)level, (Chela.Graphics.ES20.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexImage2D<T7>(Chela.Graphics.ES20.TextureTarget target, Int32 level, Chela.Graphics.ES20.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, T7[,] data)
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage2D((Chela.Graphics.ES20.TextureTarget)target, (Int32)level, (Chela.Graphics.ES20.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexImage2D<T7>(Chela.Graphics.ES20.TextureTarget target, Int32 level, Chela.Graphics.ES20.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, T7[,,] data)
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage2D((Chela.Graphics.ES20.TextureTarget)target, (Int32)level, (Chela.Graphics.ES20.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexImage2D<T7>(Chela.Graphics.ES20.TextureTarget target, Int32 level, Chela.Graphics.ES20.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Int32 imageSize, ref T7 data)
            where T7 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexImage2D((Chela.Graphics.ES20.TextureTarget)target, (Int32)level, (Chela.Graphics.ES20.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T7)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexSubImage2D(Chela.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.ES20.PixelFormat format, Int32 imageSize, IntPtr data)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCompressedTexSubImage2D((Chela.Graphics.ES20.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.ES20.PixelFormat)format, (Int32)imageSize, (IntPtr)data);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexSubImage2D<T8>(Chela.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.ES20.PixelFormat format, Int32 imageSize, T8[] data)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage2D((Chela.Graphics.ES20.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.ES20.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexSubImage2D<T8>(Chela.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.ES20.PixelFormat format, Int32 imageSize, T8[,] data)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage2D((Chela.Graphics.ES20.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.ES20.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexSubImage2D<T8>(Chela.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.ES20.PixelFormat format, Int32 imageSize, T8[,,] data)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage2D((Chela.Graphics.ES20.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.ES20.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CompressedTexSubImage2D<T8>(Chela.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.ES20.PixelFormat format, Int32 imageSize, ref T8 data)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                try
                {
                    Delegates.glCompressedTexSubImage2D((Chela.Graphics.ES20.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.ES20.PixelFormat)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    data = (T8)data_ptr.Target;
                }
                finally
                {
                    data_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CopyTexImage2D(Chela.Graphics.ES20.TextureTarget target, Int32 level, Chela.Graphics.ES20.PixelInternalFormat internalformat, Int32 x, Int32 y, Int32 width, Int32 height, Int32 border)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCopyTexImage2D((Chela.Graphics.ES20.TextureTarget)target, (Int32)level, (Chela.Graphics.ES20.PixelInternalFormat)internalformat, (Int32)x, (Int32)y, (Int32)width, (Int32)height, (Int32)border);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CopyTexSubImage2D(Chela.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 x, Int32 y, Int32 width, Int32 height)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCopyTexSubImage2D((Chela.Graphics.ES20.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        Int32 CreateProgram()
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glCreateProgram();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        Int32 CreateShader(Chela.Graphics.ES20.ShaderType type)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glCreateShader((Chela.Graphics.ES20.ShaderType)type);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void CullFace(Chela.Graphics.ES20.CullFaceMode mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glCullFace((Chela.Graphics.ES20.CullFaceMode)mode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteBuffers(Int32 n, Int32[] buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* buffers_ptr = buffers)
                {
                    Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteBuffers(Int32 n, ref Int32 buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* buffers_ptr = &buffers)
                {
                    Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void DeleteBuffers(Int32 n, Int32* buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteBuffers(Int32 n, UInt32[] buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* buffers_ptr = buffers)
                {
                    Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteBuffers(Int32 n, ref UInt32 buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* buffers_ptr = &buffers)
                {
                    Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void DeleteBuffers(Int32 n, UInt32* buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glDeleteBuffers((Int32)n, (UInt32*)buffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteFramebuffers(Int32 n, Int32[] framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* framebuffers_ptr = framebuffers)
                {
                    Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteFramebuffers(Int32 n, ref Int32 framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* framebuffers_ptr = &framebuffers)
                {
                    Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void DeleteFramebuffers(Int32 n, Int32* framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteFramebuffers(Int32 n, UInt32[] framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* framebuffers_ptr = framebuffers)
                {
                    Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteFramebuffers(Int32 n, ref UInt32 framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* framebuffers_ptr = &framebuffers)
                {
                    Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void DeleteFramebuffers(Int32 n, UInt32* framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glDeleteFramebuffers((Int32)n, (UInt32*)framebuffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteProgram(Int32 program)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDeleteProgram((UInt32)program);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteProgram(UInt32 program)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDeleteProgram((UInt32)program);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteRenderbuffers(Int32 n, Int32[] renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* renderbuffers_ptr = renderbuffers)
                {
                    Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteRenderbuffers(Int32 n, ref Int32 renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* renderbuffers_ptr = &renderbuffers)
                {
                    Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void DeleteRenderbuffers(Int32 n, Int32* renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteRenderbuffers(Int32 n, UInt32[] renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* renderbuffers_ptr = renderbuffers)
                {
                    Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteRenderbuffers(Int32 n, ref UInt32 renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* renderbuffers_ptr = &renderbuffers)
                {
                    Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void DeleteRenderbuffers(Int32 n, UInt32* renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glDeleteRenderbuffers((Int32)n, (UInt32*)renderbuffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteShader(Int32 shader)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDeleteShader((UInt32)shader);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteShader(UInt32 shader)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDeleteShader((UInt32)shader);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteTextures(Int32 n, Int32[] textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* textures_ptr = textures)
                {
                    Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteTextures(Int32 n, ref Int32 textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* textures_ptr = &textures)
                {
                    Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void DeleteTextures(Int32 n, Int32* textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glDeleteTextures((Int32)n, (UInt32*)textures);
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteTextures(Int32 n, UInt32[] textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* textures_ptr = textures)
                {
                    Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DeleteTextures(Int32 n, ref UInt32 textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* textures_ptr = &textures)
                {
                    Delegates.glDeleteTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void DeleteTextures(Int32 n, UInt32* textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glDeleteTextures((Int32)n, (UInt32*)textures);
            #if DEBUG
            }
            #endif
        }

        public static 
        void DepthFunc(Chela.Graphics.ES20.DepthFunction func)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDepthFunc((Chela.Graphics.ES20.DepthFunction)func);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DepthMask(bool flag)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDepthMask((bool)flag);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DepthRange(Single zNear, Single zFar)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDepthRangef((Single)zNear, (Single)zFar);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DetachShader(Int32 program, Int32 shader)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDetachShader((UInt32)program, (UInt32)shader);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DetachShader(UInt32 program, UInt32 shader)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDetachShader((UInt32)program, (UInt32)shader);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Disable(Chela.Graphics.ES20.EnableCap cap)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDisable((Chela.Graphics.ES20.EnableCap)cap);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DisableDriverControlQCOM(Int32 driverControl)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDisableDriverControlQCOM((UInt32)driverControl);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DisableDriverControlQCOM(UInt32 driverControl)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDisableDriverControlQCOM((UInt32)driverControl);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DisableVertexAttribArray(Int32 index)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDisableVertexAttribArray((UInt32)index);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DisableVertexAttribArray(UInt32 index)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDisableVertexAttribArray((UInt32)index);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawArrays(Chela.Graphics.ES20.BeginMode mode, Int32 first, Int32 count)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDrawArrays((Chela.Graphics.ES20.BeginMode)mode, (Int32)first, (Int32)count);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElements(Chela.Graphics.ES20.BeginMode mode, Int32 count, Chela.Graphics.ES20.DrawElementsType type, IntPtr indices)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glDrawElements((Chela.Graphics.ES20.BeginMode)mode, (Int32)count, (Chela.Graphics.ES20.DrawElementsType)type, (IntPtr)indices);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElements<T3>(Chela.Graphics.ES20.BeginMode mode, Int32 count, Chela.Graphics.ES20.DrawElementsType type, T3[] indices)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElements((Chela.Graphics.ES20.BeginMode)mode, (Int32)count, (Chela.Graphics.ES20.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElements<T3>(Chela.Graphics.ES20.BeginMode mode, Int32 count, Chela.Graphics.ES20.DrawElementsType type, T3[,] indices)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElements((Chela.Graphics.ES20.BeginMode)mode, (Int32)count, (Chela.Graphics.ES20.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElements<T3>(Chela.Graphics.ES20.BeginMode mode, Int32 count, Chela.Graphics.ES20.DrawElementsType type, T3[,,] indices)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElements((Chela.Graphics.ES20.BeginMode)mode, (Int32)count, (Chela.Graphics.ES20.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void DrawElements<T3>(Chela.Graphics.ES20.BeginMode mode, Int32 count, Chela.Graphics.ES20.DrawElementsType type, ref T3 indices)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle indices_ptr = GCHandle.Alloc(indices, GCHandleType.Pinned);
                try
                {
                    Delegates.glDrawElements((Chela.Graphics.ES20.BeginMode)mode, (Int32)count, (Chela.Graphics.ES20.DrawElementsType)type, (IntPtr)indices_ptr.AddrOfPinnedObject());
                    indices = (T3)indices_ptr.Target;
                }
                finally
                {
                    indices_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Enable(Chela.Graphics.ES20.EnableCap cap)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEnable((Chela.Graphics.ES20.EnableCap)cap);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EnableDriverControlQCOM(Int32 driverControl)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEnableDriverControlQCOM((UInt32)driverControl);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EnableDriverControlQCOM(UInt32 driverControl)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEnableDriverControlQCOM((UInt32)driverControl);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EnableVertexAttribArray(Int32 index)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEnableVertexAttribArray((UInt32)index);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void EnableVertexAttribArray(UInt32 index)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glEnableVertexAttribArray((UInt32)index);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Finish()
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFinish();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Flush()
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFlush();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FramebufferRenderbuffer(Chela.Graphics.ES20.FramebufferTarget target, Chela.Graphics.ES20.FramebufferSlot attachment, Chela.Graphics.ES20.RenderbufferTarget renderbuffertarget, Int32 renderbuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFramebufferRenderbuffer((Chela.Graphics.ES20.FramebufferTarget)target, (Chela.Graphics.ES20.FramebufferSlot)attachment, (Chela.Graphics.ES20.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FramebufferRenderbuffer(Chela.Graphics.ES20.FramebufferTarget target, Chela.Graphics.ES20.FramebufferSlot attachment, Chela.Graphics.ES20.RenderbufferTarget renderbuffertarget, UInt32 renderbuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFramebufferRenderbuffer((Chela.Graphics.ES20.FramebufferTarget)target, (Chela.Graphics.ES20.FramebufferSlot)attachment, (Chela.Graphics.ES20.RenderbufferTarget)renderbuffertarget, (UInt32)renderbuffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FramebufferTexture2D(Chela.Graphics.ES20.FramebufferTarget target, Chela.Graphics.ES20.FramebufferSlot attachment, Chela.Graphics.ES20.TextureTarget textarget, Int32 texture, Int32 level)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFramebufferTexture2D((Chela.Graphics.ES20.FramebufferTarget)target, (Chela.Graphics.ES20.FramebufferSlot)attachment, (Chela.Graphics.ES20.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FramebufferTexture2D(Chela.Graphics.ES20.FramebufferTarget target, Chela.Graphics.ES20.FramebufferSlot attachment, Chela.Graphics.ES20.TextureTarget textarget, UInt32 texture, Int32 level)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFramebufferTexture2D((Chela.Graphics.ES20.FramebufferTarget)target, (Chela.Graphics.ES20.FramebufferSlot)attachment, (Chela.Graphics.ES20.TextureTarget)textarget, (UInt32)texture, (Int32)level);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void FrontFace(Chela.Graphics.ES20.FrontFaceDirection mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glFrontFace((Chela.Graphics.ES20.FrontFaceDirection)mode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenBuffers(Int32 n, Int32[] buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* buffers_ptr = buffers)
                {
                    Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenBuffers(Int32 n, out Int32 buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* buffers_ptr = &buffers)
                {
                    Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                    buffers = *buffers_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GenBuffers(Int32 n, Int32* buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGenBuffers((Int32)n, (UInt32*)buffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenBuffers(Int32 n, UInt32[] buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* buffers_ptr = buffers)
                {
                    Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenBuffers(Int32 n, out UInt32 buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* buffers_ptr = &buffers)
                {
                    Delegates.glGenBuffers((Int32)n, (UInt32*)buffers_ptr);
                    buffers = *buffers_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GenBuffers(Int32 n, UInt32* buffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGenBuffers((Int32)n, (UInt32*)buffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenerateMipmap(Chela.Graphics.ES20.TextureTarget target)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glGenerateMipmap((Chela.Graphics.ES20.TextureTarget)target);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenFramebuffers(Int32 n, Int32[] framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* framebuffers_ptr = framebuffers)
                {
                    Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenFramebuffers(Int32 n, out Int32 framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* framebuffers_ptr = &framebuffers)
                {
                    Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                    framebuffers = *framebuffers_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GenFramebuffers(Int32 n, Int32* framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenFramebuffers(Int32 n, UInt32[] framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* framebuffers_ptr = framebuffers)
                {
                    Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenFramebuffers(Int32 n, out UInt32 framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* framebuffers_ptr = &framebuffers)
                {
                    Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers_ptr);
                    framebuffers = *framebuffers_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GenFramebuffers(Int32 n, UInt32* framebuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGenFramebuffers((Int32)n, (UInt32*)framebuffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenRenderbuffers(Int32 n, Int32[] renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* renderbuffers_ptr = renderbuffers)
                {
                    Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenRenderbuffers(Int32 n, out Int32 renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* renderbuffers_ptr = &renderbuffers)
                {
                    Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                    renderbuffers = *renderbuffers_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GenRenderbuffers(Int32 n, Int32* renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenRenderbuffers(Int32 n, UInt32[] renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* renderbuffers_ptr = renderbuffers)
                {
                    Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenRenderbuffers(Int32 n, out UInt32 renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* renderbuffers_ptr = &renderbuffers)
                {
                    Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers_ptr);
                    renderbuffers = *renderbuffers_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GenRenderbuffers(Int32 n, UInt32* renderbuffers)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGenRenderbuffers((Int32)n, (UInt32*)renderbuffers);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenTextures(Int32 n, Int32[] textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* textures_ptr = textures)
                {
                    Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenTextures(Int32 n, out Int32 textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* textures_ptr = &textures)
                {
                    Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                    textures = *textures_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GenTextures(Int32 n, Int32* textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGenTextures((Int32)n, (UInt32*)textures);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenTextures(Int32 n, UInt32[] textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* textures_ptr = textures)
                {
                    Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GenTextures(Int32 n, out UInt32 textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* textures_ptr = &textures)
                {
                    Delegates.glGenTextures((Int32)n, (UInt32*)textures_ptr);
                    textures = *textures_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GenTextures(Int32 n, UInt32* textures)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGenTextures((Int32)n, (UInt32*)textures);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveAttrib(Int32 program, Int32 index, Int32 bufsize, Int32[] length, Int32[] size, Chela.Graphics.ES20.ActiveAttribType[] type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (Chela.Graphics.ES20.ActiveAttribType* type_ptr = type)
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (Chela.Graphics.ES20.ActiveAttribType*)type_ptr, name_ptr.Address);
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveAttrib(Int32 program, Int32 index, Int32 bufsize, out Int32 length, out Int32 size, out Chela.Graphics.ES20.ActiveAttribType type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (Chela.Graphics.ES20.ActiveAttribType* type_ptr = &type)
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (Chela.Graphics.ES20.ActiveAttribType*)type_ptr, name_ptr.Address);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetActiveAttrib(Int32 program, Int32 index, Int32 bufsize, Int32* length, Int32* size, Chela.Graphics.ES20.ActiveAttribType* type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle name_ptr = StringHandle.Alloc(name);
            try
            {
                Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length, (Int32*)size, (Chela.Graphics.ES20.ActiveAttribType*)type, name_ptr.Address);
            }
            finally
            {
                name_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufsize, Int32[] length, Int32[] size, Chela.Graphics.ES20.ActiveAttribType[] type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (Chela.Graphics.ES20.ActiveAttribType* type_ptr = type)
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (Chela.Graphics.ES20.ActiveAttribType*)type_ptr, name_ptr.Address);
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufsize, out Int32 length, out Int32 size, out Chela.Graphics.ES20.ActiveAttribType type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (Chela.Graphics.ES20.ActiveAttribType* type_ptr = &type)
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (Chela.Graphics.ES20.ActiveAttribType*)type_ptr, name_ptr.Address);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetActiveAttrib(UInt32 program, UInt32 index, Int32 bufsize, Int32* length, Int32* size, Chela.Graphics.ES20.ActiveAttribType* type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle name_ptr = StringHandle.Alloc(name);
            try
            {
                Delegates.glGetActiveAttrib((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length, (Int32*)size, (Chela.Graphics.ES20.ActiveAttribType*)type, name_ptr.Address);
            }
            finally
            {
                name_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveUniform(Int32 program, Int32 index, Int32 bufsize, Int32[] length, Int32[] size, Chela.Graphics.ES20.ActiveUniformType[] type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (Chela.Graphics.ES20.ActiveUniformType* type_ptr = type)
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (Chela.Graphics.ES20.ActiveUniformType*)type_ptr, name_ptr.Address);
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveUniform(Int32 program, Int32 index, Int32 bufsize, out Int32 length, out Int32 size, out Chela.Graphics.ES20.ActiveUniformType type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (Chela.Graphics.ES20.ActiveUniformType* type_ptr = &type)
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (Chela.Graphics.ES20.ActiveUniformType*)type_ptr, name_ptr.Address);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetActiveUniform(Int32 program, Int32 index, Int32 bufsize, Int32* length, Int32* size, Chela.Graphics.ES20.ActiveUniformType* type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle name_ptr = StringHandle.Alloc(name);
            try
            {
                Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length, (Int32*)size, (Chela.Graphics.ES20.ActiveUniformType*)type, name_ptr.Address);
            }
            finally
            {
                name_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufsize, Int32[] length, Int32[] size, Chela.Graphics.ES20.ActiveUniformType[] type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = length)
                fixed (Int32* size_ptr = size)
                fixed (Chela.Graphics.ES20.ActiveUniformType* type_ptr = type)
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (Chela.Graphics.ES20.ActiveUniformType*)type_ptr, name_ptr.Address);
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufsize, out Int32 length, out Int32 size, out Chela.Graphics.ES20.ActiveUniformType type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                fixed (Int32* size_ptr = &size)
                fixed (Chela.Graphics.ES20.ActiveUniformType* type_ptr = &type)
                {
                    StringHandle name_ptr = StringHandle.Alloc(name);
                    try
                    {
                        Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length_ptr, (Int32*)size_ptr, (Chela.Graphics.ES20.ActiveUniformType*)type_ptr, name_ptr.Address);
                        length = *length_ptr;
                        size = *size_ptr;
                        type = *type_ptr;
                    }
                    finally
                    {
                        name_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetActiveUniform(UInt32 program, UInt32 index, Int32 bufsize, Int32* length, Int32* size, Chela.Graphics.ES20.ActiveUniformType* type, StringBuilder name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle name_ptr = StringHandle.Alloc(name);
            try
            {
                Delegates.glGetActiveUniform((UInt32)program, (UInt32)index, (Int32)bufsize, (Int32*)length, (Int32*)size, (Chela.Graphics.ES20.ActiveUniformType*)type, name_ptr.Address);
            }
            finally
            {
                name_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetAttachedShaders(Int32 program, Int32 maxcount, Int32[] count, Int32[] shaders)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = count)
                fixed (Int32* shaders_ptr = shaders)
                {
                    Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxcount, (Int32*)count_ptr, (UInt32*)shaders_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetAttachedShaders(Int32 program, Int32 maxcount, out Int32 count, out Int32 shaders)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (Int32* shaders_ptr = &shaders)
                {
                    Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxcount, (Int32*)count_ptr, (UInt32*)shaders_ptr);
                    count = *count_ptr;
                    shaders = *shaders_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetAttachedShaders(Int32 program, Int32 maxcount, Int32* count, Int32* shaders)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxcount, (Int32*)count, (UInt32*)shaders);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetAttachedShaders(UInt32 program, Int32 maxcount, Int32[] count, UInt32[] shaders)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = count)
                fixed (UInt32* shaders_ptr = shaders)
                {
                    Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxcount, (Int32*)count_ptr, (UInt32*)shaders_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetAttachedShaders(UInt32 program, Int32 maxcount, out Int32 count, out UInt32 shaders)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* count_ptr = &count)
                fixed (UInt32* shaders_ptr = &shaders)
                {
                    Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxcount, (Int32*)count_ptr, (UInt32*)shaders_ptr);
                    count = *count_ptr;
                    shaders = *shaders_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetAttachedShaders(UInt32 program, Int32 maxcount, Int32* count, UInt32* shaders)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetAttachedShaders((UInt32)program, (Int32)maxcount, (Int32*)count, (UInt32*)shaders);
            #if DEBUG
            }
            #endif
        }

        public static 
        int GetAttribLocation(Int32 program, String name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    return Delegates.glGetAttribLocation((UInt32)program, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        int GetAttribLocation(UInt32 program, String name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    return Delegates.glGetAttribLocation((UInt32)program, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBoolean(Chela.Graphics.ES20.GetPName pname, bool[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (bool* @params_ptr = @params)
                {
                    Delegates.glGetBooleanv((Chela.Graphics.ES20.GetPName)pname, (bool*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBoolean(Chela.Graphics.ES20.GetPName pname, out bool @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (bool* @params_ptr = &@params)
                {
                    Delegates.glGetBooleanv((Chela.Graphics.ES20.GetPName)pname, (bool*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetBoolean(Chela.Graphics.ES20.GetPName pname, bool* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetBooleanv((Chela.Graphics.ES20.GetPName)pname, (bool*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBufferParameter(Chela.Graphics.ES20.BufferTarget target, Chela.Graphics.ES20.BufferParameterName pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetBufferParameteriv((Chela.Graphics.ES20.BufferTarget)target, (Chela.Graphics.ES20.BufferParameterName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetBufferParameter(Chela.Graphics.ES20.BufferTarget target, Chela.Graphics.ES20.BufferParameterName pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetBufferParameteriv((Chela.Graphics.ES20.BufferTarget)target, (Chela.Graphics.ES20.BufferParameterName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetBufferParameter(Chela.Graphics.ES20.BufferTarget target, Chela.Graphics.ES20.BufferParameterName pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetBufferParameteriv((Chela.Graphics.ES20.BufferTarget)target, (Chela.Graphics.ES20.BufferParameterName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetDriverControlsQCOM(Int32[] num, Int32 size, Int32[] driverControls)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* num_ptr = num)
                fixed (Int32* driverControls_ptr = driverControls)
                {
                    Delegates.glGetDriverControlsQCOM((Int32*)num_ptr, (Int32)size, (UInt32*)driverControls_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetDriverControlsQCOM(Int32[] num, Int32 size, UInt32[] driverControls)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* num_ptr = num)
                fixed (UInt32* driverControls_ptr = driverControls)
                {
                    Delegates.glGetDriverControlsQCOM((Int32*)num_ptr, (Int32)size, (UInt32*)driverControls_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetDriverControlsQCOM(out Int32 num, Int32 size, out Int32 driverControls)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* num_ptr = &num)
                fixed (Int32* driverControls_ptr = &driverControls)
                {
                    Delegates.glGetDriverControlsQCOM((Int32*)num_ptr, (Int32)size, (UInt32*)driverControls_ptr);
                    num = *num_ptr;
                    driverControls = *driverControls_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetDriverControlsQCOM(out Int32 num, Int32 size, out UInt32 driverControls)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* num_ptr = &num)
                fixed (UInt32* driverControls_ptr = &driverControls)
                {
                    Delegates.glGetDriverControlsQCOM((Int32*)num_ptr, (Int32)size, (UInt32*)driverControls_ptr);
                    num = *num_ptr;
                    driverControls = *driverControls_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetDriverControlsQCOM(Int32* num, Int32 size, Int32* driverControls)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetDriverControlsQCOM((Int32*)num, (Int32)size, (UInt32*)driverControls);
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetDriverControlsQCOM(Int32* num, Int32 size, UInt32* driverControls)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetDriverControlsQCOM((Int32*)num, (Int32)size, (UInt32*)driverControls);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetDriverControlStringQCOM(Int32 driverControl, Int32 bufSize, Int32[] length, StringBuilder driverControlString)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    StringHandle driverControlString_ptr = StringHandle.Alloc(driverControlString);
                    try
                    {
                        Delegates.glGetDriverControlStringQCOM((UInt32)driverControl, (Int32)bufSize, (Int32*)length_ptr, driverControlString_ptr.Address);
                    }
                    finally
                    {
                        driverControlString_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetDriverControlStringQCOM(Int32 driverControl, Int32 bufSize, out Int32 length, StringBuilder driverControlString)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    StringHandle driverControlString_ptr = StringHandle.Alloc(driverControlString);
                    try
                    {
                        Delegates.glGetDriverControlStringQCOM((UInt32)driverControl, (Int32)bufSize, (Int32*)length_ptr, driverControlString_ptr.Address);
                        length = *length_ptr;
                    }
                    finally
                    {
                        driverControlString_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetDriverControlStringQCOM(Int32 driverControl, Int32 bufSize, Int32* length, StringBuilder driverControlString)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle driverControlString_ptr = StringHandle.Alloc(driverControlString);
            try
            {
                Delegates.glGetDriverControlStringQCOM((UInt32)driverControl, (Int32)bufSize, (Int32*)length, driverControlString_ptr.Address);
            }
            finally
            {
                driverControlString_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetDriverControlStringQCOM(UInt32 driverControl, Int32 bufSize, Int32[] length, StringBuilder driverControlString)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    StringHandle driverControlString_ptr = StringHandle.Alloc(driverControlString);
                    try
                    {
                        Delegates.glGetDriverControlStringQCOM((UInt32)driverControl, (Int32)bufSize, (Int32*)length_ptr, driverControlString_ptr.Address);
                    }
                    finally
                    {
                        driverControlString_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetDriverControlStringQCOM(UInt32 driverControl, Int32 bufSize, out Int32 length, StringBuilder driverControlString)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    StringHandle driverControlString_ptr = StringHandle.Alloc(driverControlString);
                    try
                    {
                        Delegates.glGetDriverControlStringQCOM((UInt32)driverControl, (Int32)bufSize, (Int32*)length_ptr, driverControlString_ptr.Address);
                        length = *length_ptr;
                    }
                    finally
                    {
                        driverControlString_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetDriverControlStringQCOM(UInt32 driverControl, Int32 bufSize, Int32* length, StringBuilder driverControlString)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle driverControlString_ptr = StringHandle.Alloc(driverControlString);
            try
            {
                Delegates.glGetDriverControlStringQCOM((UInt32)driverControl, (Int32)bufSize, (Int32*)length, driverControlString_ptr.Address);
            }
            finally
            {
                driverControlString_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        Chela.Graphics.ES20.ErrorCode GetError()
        {
            unsafe
            {
                return Delegates.glGetError();
            }
        }

        public static 
        void GetFloat(Chela.Graphics.ES20.GetPName pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetFloatv((Chela.Graphics.ES20.GetPName)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetFloat(Chela.Graphics.ES20.GetPName pname, out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetFloatv((Chela.Graphics.ES20.GetPName)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetFloat(Chela.Graphics.ES20.GetPName pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetFloatv((Chela.Graphics.ES20.GetPName)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetFramebufferAttachmentParameter(Chela.Graphics.ES20.FramebufferTarget target, Chela.Graphics.ES20.FramebufferSlot attachment, Chela.Graphics.ES20.FramebufferParameterName pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetFramebufferAttachmentParameteriv((Chela.Graphics.ES20.FramebufferTarget)target, (Chela.Graphics.ES20.FramebufferSlot)attachment, (Chela.Graphics.ES20.FramebufferParameterName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetFramebufferAttachmentParameter(Chela.Graphics.ES20.FramebufferTarget target, Chela.Graphics.ES20.FramebufferSlot attachment, Chela.Graphics.ES20.FramebufferParameterName pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetFramebufferAttachmentParameteriv((Chela.Graphics.ES20.FramebufferTarget)target, (Chela.Graphics.ES20.FramebufferSlot)attachment, (Chela.Graphics.ES20.FramebufferParameterName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetFramebufferAttachmentParameter(Chela.Graphics.ES20.FramebufferTarget target, Chela.Graphics.ES20.FramebufferSlot attachment, Chela.Graphics.ES20.FramebufferParameterName pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetFramebufferAttachmentParameteriv((Chela.Graphics.ES20.FramebufferTarget)target, (Chela.Graphics.ES20.FramebufferSlot)attachment, (Chela.Graphics.ES20.FramebufferParameterName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetInteger(Chela.Graphics.ES20.GetPName pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetIntegerv((Chela.Graphics.ES20.GetPName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetInteger(Chela.Graphics.ES20.GetPName pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetIntegerv((Chela.Graphics.ES20.GetPName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetInteger(Chela.Graphics.ES20.GetPName pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetIntegerv((Chela.Graphics.ES20.GetPName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetProgramInfoLog(Int32 program, Int32 bufsize, Int32[] length, StringBuilder infolog)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    StringHandle infolog_ptr = StringHandle.Alloc(infolog);
                    try
                    {
                        Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufsize, (Int32*)length_ptr, infolog_ptr.Address);
                    }
                    finally
                    {
                        infolog_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetProgramInfoLog(Int32 program, Int32 bufsize, out Int32 length, StringBuilder infolog)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    StringHandle infolog_ptr = StringHandle.Alloc(infolog);
                    try
                    {
                        Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufsize, (Int32*)length_ptr, infolog_ptr.Address);
                        length = *length_ptr;
                    }
                    finally
                    {
                        infolog_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetProgramInfoLog(Int32 program, Int32 bufsize, Int32* length, StringBuilder infolog)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle infolog_ptr = StringHandle.Alloc(infolog);
            try
            {
                Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufsize, (Int32*)length, infolog_ptr.Address);
            }
            finally
            {
                infolog_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetProgramInfoLog(UInt32 program, Int32 bufsize, Int32[] length, StringBuilder infolog)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    StringHandle infolog_ptr = StringHandle.Alloc(infolog);
                    try
                    {
                        Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufsize, (Int32*)length_ptr, infolog_ptr.Address);
                    }
                    finally
                    {
                        infolog_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetProgramInfoLog(UInt32 program, Int32 bufsize, out Int32 length, StringBuilder infolog)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    StringHandle infolog_ptr = StringHandle.Alloc(infolog);
                    try
                    {
                        Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufsize, (Int32*)length_ptr, infolog_ptr.Address);
                        length = *length_ptr;
                    }
                    finally
                    {
                        infolog_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetProgramInfoLog(UInt32 program, Int32 bufsize, Int32* length, StringBuilder infolog)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle infolog_ptr = StringHandle.Alloc(infolog);
            try
            {
                Delegates.glGetProgramInfoLog((UInt32)program, (Int32)bufsize, (Int32*)length, infolog_ptr.Address);
            }
            finally
            {
                infolog_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetProgram(Int32 program, Chela.Graphics.ES20.ProgramParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetProgramiv((UInt32)program, (Chela.Graphics.ES20.ProgramParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetProgram(Int32 program, Chela.Graphics.ES20.ProgramParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetProgramiv((UInt32)program, (Chela.Graphics.ES20.ProgramParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetProgram(Int32 program, Chela.Graphics.ES20.ProgramParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetProgramiv((UInt32)program, (Chela.Graphics.ES20.ProgramParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetProgram(UInt32 program, Chela.Graphics.ES20.ProgramParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetProgramiv((UInt32)program, (Chela.Graphics.ES20.ProgramParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetProgram(UInt32 program, Chela.Graphics.ES20.ProgramParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetProgramiv((UInt32)program, (Chela.Graphics.ES20.ProgramParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetProgram(UInt32 program, Chela.Graphics.ES20.ProgramParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetProgramiv((UInt32)program, (Chela.Graphics.ES20.ProgramParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetRenderbufferParameter(Chela.Graphics.ES20.RenderbufferTarget target, Chela.Graphics.ES20.RenderbufferParameterName pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetRenderbufferParameteriv((Chela.Graphics.ES20.RenderbufferTarget)target, (Chela.Graphics.ES20.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetRenderbufferParameter(Chela.Graphics.ES20.RenderbufferTarget target, Chela.Graphics.ES20.RenderbufferParameterName pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetRenderbufferParameteriv((Chela.Graphics.ES20.RenderbufferTarget)target, (Chela.Graphics.ES20.RenderbufferParameterName)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetRenderbufferParameter(Chela.Graphics.ES20.RenderbufferTarget target, Chela.Graphics.ES20.RenderbufferParameterName pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetRenderbufferParameteriv((Chela.Graphics.ES20.RenderbufferTarget)target, (Chela.Graphics.ES20.RenderbufferParameterName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetShaderInfoLog(Int32 shader, Int32 bufsize, Int32[] length, StringBuilder infolog)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    StringHandle infolog_ptr = StringHandle.Alloc(infolog);
                    try
                    {
                        Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufsize, (Int32*)length_ptr, infolog_ptr.Address);
                    }
                    finally
                    {
                        infolog_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetShaderInfoLog(Int32 shader, Int32 bufsize, out Int32 length, StringBuilder infolog)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    StringHandle infolog_ptr = StringHandle.Alloc(infolog);
                    try
                    {
                        Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufsize, (Int32*)length_ptr, infolog_ptr.Address);
                        length = *length_ptr;
                    }
                    finally
                    {
                        infolog_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetShaderInfoLog(Int32 shader, Int32 bufsize, Int32* length, StringBuilder infolog)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle infolog_ptr = StringHandle.Alloc(infolog);
            try
            {
                Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufsize, (Int32*)length, infolog_ptr.Address);
            }
            finally
            {
                infolog_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetShaderInfoLog(UInt32 shader, Int32 bufsize, Int32[] length, StringBuilder infolog)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    StringHandle infolog_ptr = StringHandle.Alloc(infolog);
                    try
                    {
                        Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufsize, (Int32*)length_ptr, infolog_ptr.Address);
                    }
                    finally
                    {
                        infolog_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetShaderInfoLog(UInt32 shader, Int32 bufsize, out Int32 length, StringBuilder infolog)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    StringHandle infolog_ptr = StringHandle.Alloc(infolog);
                    try
                    {
                        Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufsize, (Int32*)length_ptr, infolog_ptr.Address);
                        length = *length_ptr;
                    }
                    finally
                    {
                        infolog_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetShaderInfoLog(UInt32 shader, Int32 bufsize, Int32* length, StringBuilder infolog)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle infolog_ptr = StringHandle.Alloc(infolog);
            try
            {
                Delegates.glGetShaderInfoLog((UInt32)shader, (Int32)bufsize, (Int32*)length, infolog_ptr.Address);
            }
            finally
            {
                infolog_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetShader(Int32 shader, Chela.Graphics.ES20.ShaderParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetShaderiv((UInt32)shader, (Chela.Graphics.ES20.ShaderParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetShader(Int32 shader, Chela.Graphics.ES20.ShaderParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetShaderiv((UInt32)shader, (Chela.Graphics.ES20.ShaderParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetShader(Int32 shader, Chela.Graphics.ES20.ShaderParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetShaderiv((UInt32)shader, (Chela.Graphics.ES20.ShaderParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetShader(UInt32 shader, Chela.Graphics.ES20.ShaderParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetShaderiv((UInt32)shader, (Chela.Graphics.ES20.ShaderParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetShader(UInt32 shader, Chela.Graphics.ES20.ShaderParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetShaderiv((UInt32)shader, (Chela.Graphics.ES20.ShaderParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetShader(UInt32 shader, Chela.Graphics.ES20.ShaderParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetShaderiv((UInt32)shader, (Chela.Graphics.ES20.ShaderParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetShaderPrecisionFormat(Chela.Graphics.ES20.ShaderType shadertype, Chela.Graphics.ES20.ShaderPrecision precisiontype, Int32[] range, Int32[] precision)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* range_ptr = range)
                fixed (Int32* precision_ptr = precision)
                {
                    Delegates.glGetShaderPrecisionFormat((Chela.Graphics.ES20.ShaderType)shadertype, (Chela.Graphics.ES20.ShaderPrecision)precisiontype, (Int32*)range_ptr, (Int32*)precision_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetShaderPrecisionFormat(Chela.Graphics.ES20.ShaderType shadertype, Chela.Graphics.ES20.ShaderPrecision precisiontype, out Int32 range, out Int32 precision)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* range_ptr = &range)
                fixed (Int32* precision_ptr = &precision)
                {
                    Delegates.glGetShaderPrecisionFormat((Chela.Graphics.ES20.ShaderType)shadertype, (Chela.Graphics.ES20.ShaderPrecision)precisiontype, (Int32*)range_ptr, (Int32*)precision_ptr);
                    range = *range_ptr;
                    precision = *precision_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetShaderPrecisionFormat(Chela.Graphics.ES20.ShaderType shadertype, Chela.Graphics.ES20.ShaderPrecision precisiontype, Int32* range, Int32* precision)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetShaderPrecisionFormat((Chela.Graphics.ES20.ShaderType)shadertype, (Chela.Graphics.ES20.ShaderPrecision)precisiontype, (Int32*)range, (Int32*)precision);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetShaderSource(Int32 shader, Int32 bufsize, Int32[] length, StringBuilder source)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    StringHandle source_ptr = StringHandle.Alloc(source);
                    try
                    {
                        Delegates.glGetShaderSource((UInt32)shader, (Int32)bufsize, (Int32*)length_ptr, source_ptr.Address);
                    }
                    finally
                    {
                        source_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetShaderSource(Int32 shader, Int32 bufsize, out Int32 length, StringBuilder source)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    StringHandle source_ptr = StringHandle.Alloc(source);
                    try
                    {
                        Delegates.glGetShaderSource((UInt32)shader, (Int32)bufsize, (Int32*)length_ptr, source_ptr.Address);
                        length = *length_ptr;
                    }
                    finally
                    {
                        source_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetShaderSource(Int32 shader, Int32 bufsize, Int32* length, StringBuilder source)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle source_ptr = StringHandle.Alloc(source);
            try
            {
                Delegates.glGetShaderSource((UInt32)shader, (Int32)bufsize, (Int32*)length, source_ptr.Address);
            }
            finally
            {
                source_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetShaderSource(UInt32 shader, Int32 bufsize, Int32[] length, StringBuilder source)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    StringHandle source_ptr = StringHandle.Alloc(source);
                    try
                    {
                        Delegates.glGetShaderSource((UInt32)shader, (Int32)bufsize, (Int32*)length_ptr, source_ptr.Address);
                    }
                    finally
                    {
                        source_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetShaderSource(UInt32 shader, Int32 bufsize, out Int32 length, StringBuilder source)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    StringHandle source_ptr = StringHandle.Alloc(source);
                    try
                    {
                        Delegates.glGetShaderSource((UInt32)shader, (Int32)bufsize, (Int32*)length_ptr, source_ptr.Address);
                        length = *length_ptr;
                    }
                    finally
                    {
                        source_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetShaderSource(UInt32 shader, Int32 bufsize, Int32* length, StringBuilder source)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle source_ptr = StringHandle.Alloc(source);
            try
            {
                Delegates.glGetShaderSource((UInt32)shader, (Int32)bufsize, (Int32*)length, source_ptr.Address);
            }
            finally
            {
                source_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe System.String GetString(Chela.Graphics.ES20.StringName name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe { return new string((sbyte*)Delegates.glGetString(name)); }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexParameter(Chela.Graphics.ES20.TextureTarget target, Chela.Graphics.ES20.GetTextureParameter pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetTexParameterfv((Chela.Graphics.ES20.TextureTarget)target, (Chela.Graphics.ES20.GetTextureParameter)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexParameter(Chela.Graphics.ES20.TextureTarget target, Chela.Graphics.ES20.GetTextureParameter pname, out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetTexParameterfv((Chela.Graphics.ES20.TextureTarget)target, (Chela.Graphics.ES20.GetTextureParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetTexParameter(Chela.Graphics.ES20.TextureTarget target, Chela.Graphics.ES20.GetTextureParameter pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetTexParameterfv((Chela.Graphics.ES20.TextureTarget)target, (Chela.Graphics.ES20.GetTextureParameter)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexParameter(Chela.Graphics.ES20.TextureTarget target, Chela.Graphics.ES20.GetTextureParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetTexParameteriv((Chela.Graphics.ES20.TextureTarget)target, (Chela.Graphics.ES20.GetTextureParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetTexParameter(Chela.Graphics.ES20.TextureTarget target, Chela.Graphics.ES20.GetTextureParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetTexParameteriv((Chela.Graphics.ES20.TextureTarget)target, (Chela.Graphics.ES20.GetTextureParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetTexParameter(Chela.Graphics.ES20.TextureTarget target, Chela.Graphics.ES20.GetTextureParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetTexParameteriv((Chela.Graphics.ES20.TextureTarget)target, (Chela.Graphics.ES20.GetTextureParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetUniform(Int32 program, Int32 location, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetUniform(Int32 program, Int32 location, out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetUniform(Int32 program, Int32 location, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetUniform(UInt32 program, Int32 location, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetUniform(UInt32 program, Int32 location, out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetUniform(UInt32 program, Int32 location, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetUniformfv((UInt32)program, (Int32)location, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetUniform(Int32 program, Int32 location, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetUniform(Int32 program, Int32 location, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetUniform(Int32 program, Int32 location, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetUniform(UInt32 program, Int32 location, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetUniform(UInt32 program, Int32 location, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetUniform(UInt32 program, Int32 location, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetUniformiv((UInt32)program, (Int32)location, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        int GetUniformLocation(Int32 program, String name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    return Delegates.glGetUniformLocation((UInt32)program, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        int GetUniformLocation(UInt32 program, String name)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                StringHandle name_ptr = StringHandle.Alloc(name);
                try
                {
                    return Delegates.glGetUniformLocation((UInt32)program, name_ptr.Address);
                }
                finally
                {
                    name_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttrib(Int32 index, Chela.Graphics.ES20.VertexAttribParameter pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribfv((UInt32)index, (Chela.Graphics.ES20.VertexAttribParameter)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttrib(Int32 index, Chela.Graphics.ES20.VertexAttribParameter pname, out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribfv((UInt32)index, (Chela.Graphics.ES20.VertexAttribParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetVertexAttrib(Int32 index, Chela.Graphics.ES20.VertexAttribParameter pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetVertexAttribfv((UInt32)index, (Chela.Graphics.ES20.VertexAttribParameter)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttrib(UInt32 index, Chela.Graphics.ES20.VertexAttribParameter pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribfv((UInt32)index, (Chela.Graphics.ES20.VertexAttribParameter)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttrib(UInt32 index, Chela.Graphics.ES20.VertexAttribParameter pname, out Single @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribfv((UInt32)index, (Chela.Graphics.ES20.VertexAttribParameter)pname, (Single*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetVertexAttrib(UInt32 index, Chela.Graphics.ES20.VertexAttribParameter pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetVertexAttribfv((UInt32)index, (Chela.Graphics.ES20.VertexAttribParameter)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttrib(Int32 index, Chela.Graphics.ES20.VertexAttribParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribiv((UInt32)index, (Chela.Graphics.ES20.VertexAttribParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttrib(Int32 index, Chela.Graphics.ES20.VertexAttribParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribiv((UInt32)index, (Chela.Graphics.ES20.VertexAttribParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetVertexAttrib(Int32 index, Chela.Graphics.ES20.VertexAttribParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetVertexAttribiv((UInt32)index, (Chela.Graphics.ES20.VertexAttribParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttrib(UInt32 index, Chela.Graphics.ES20.VertexAttribParameter pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glGetVertexAttribiv((UInt32)index, (Chela.Graphics.ES20.VertexAttribParameter)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttrib(UInt32 index, Chela.Graphics.ES20.VertexAttribParameter pname, out Int32 @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = &@params)
                {
                    Delegates.glGetVertexAttribiv((UInt32)index, (Chela.Graphics.ES20.VertexAttribParameter)pname, (Int32*)@params_ptr);
                    @params = *@params_ptr;
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void GetVertexAttrib(UInt32 index, Chela.Graphics.ES20.VertexAttribParameter pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glGetVertexAttribiv((UInt32)index, (Chela.Graphics.ES20.VertexAttribParameter)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttribPointer(Int32 index, Chela.Graphics.ES20.VertexAttribPointerParameter pname, IntPtr pointer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glGetVertexAttribPointerv((UInt32)index, (Chela.Graphics.ES20.VertexAttribPointerParameter)pname, (IntPtr)pointer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttribPointer<T2>(Int32 index, Chela.Graphics.ES20.VertexAttribPointerParameter pname, T2[] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (Chela.Graphics.ES20.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttribPointer<T2>(Int32 index, Chela.Graphics.ES20.VertexAttribPointerParameter pname, T2[,] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (Chela.Graphics.ES20.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttribPointer<T2>(Int32 index, Chela.Graphics.ES20.VertexAttribPointerParameter pname, T2[,,] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (Chela.Graphics.ES20.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttribPointer<T2>(Int32 index, Chela.Graphics.ES20.VertexAttribPointerParameter pname, ref T2 pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (Chela.Graphics.ES20.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T2)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttribPointer(UInt32 index, Chela.Graphics.ES20.VertexAttribPointerParameter pname, IntPtr pointer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glGetVertexAttribPointerv((UInt32)index, (Chela.Graphics.ES20.VertexAttribPointerParameter)pname, (IntPtr)pointer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttribPointer<T2>(UInt32 index, Chela.Graphics.ES20.VertexAttribPointerParameter pname, T2[] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (Chela.Graphics.ES20.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttribPointer<T2>(UInt32 index, Chela.Graphics.ES20.VertexAttribPointerParameter pname, T2[,] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (Chela.Graphics.ES20.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttribPointer<T2>(UInt32 index, Chela.Graphics.ES20.VertexAttribPointerParameter pname, T2[,,] pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (Chela.Graphics.ES20.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void GetVertexAttribPointer<T2>(UInt32 index, Chela.Graphics.ES20.VertexAttribPointerParameter pname, ref T2 pointer)
            where T2 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pointer_ptr = GCHandle.Alloc(pointer, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetVertexAttribPointerv((UInt32)index, (Chela.Graphics.ES20.VertexAttribPointerParameter)pname, (IntPtr)pointer_ptr.AddrOfPinnedObject());
                    pointer = (T2)pointer_ptr.Target;
                }
                finally
                {
                    pointer_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Hint(Chela.Graphics.ES20.HintTarget target, Chela.Graphics.ES20.HintMode mode)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glHint((Chela.Graphics.ES20.HintTarget)target, (Chela.Graphics.ES20.HintMode)mode);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsBuffer(Int32 buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsBuffer((UInt32)buffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsBuffer(UInt32 buffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsBuffer((UInt32)buffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsEnabled(Chela.Graphics.ES20.EnableCap cap)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsEnabled((Chela.Graphics.ES20.EnableCap)cap);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsFramebuffer(Int32 framebuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsFramebuffer((UInt32)framebuffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsFramebuffer(UInt32 framebuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsFramebuffer((UInt32)framebuffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsProgram(Int32 program)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsProgram((UInt32)program);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsProgram(UInt32 program)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsProgram((UInt32)program);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsRenderbuffer(Int32 renderbuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsRenderbuffer((UInt32)renderbuffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsRenderbuffer(UInt32 renderbuffer)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsRenderbuffer((UInt32)renderbuffer);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsShader(Int32 shader)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsShader((UInt32)shader);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsShader(UInt32 shader)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsShader((UInt32)shader);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsTexture(Int32 texture)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsTexture((UInt32)texture);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        bool IsTexture(UInt32 texture)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                return Delegates.glIsTexture((UInt32)texture);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void LineWidth(Single width)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glLineWidth((Single)width);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void LinkProgram(Int32 program)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glLinkProgram((UInt32)program);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void LinkProgram(UInt32 program)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glLinkProgram((UInt32)program);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PixelStore(Chela.Graphics.ES20.PixelStoreParameter pname, Int32 param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPixelStorei((Chela.Graphics.ES20.PixelStoreParameter)pname, (Int32)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void PolygonOffset(Single factor, Single units)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glPolygonOffset((Single)factor, (Single)units);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ReadPixels(Int32 x, Int32 y, Int32 width, Int32 height, Chela.Graphics.ES20.PixelFormat format, Chela.Graphics.ES20.PixelType type, IntPtr pixels)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (Chela.Graphics.ES20.PixelFormat)format, (Chela.Graphics.ES20.PixelType)type, (IntPtr)pixels);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, Chela.Graphics.ES20.PixelFormat format, Chela.Graphics.ES20.PixelType type, T6[] pixels)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (Chela.Graphics.ES20.PixelFormat)format, (Chela.Graphics.ES20.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, Chela.Graphics.ES20.PixelFormat format, Chela.Graphics.ES20.PixelType type, T6[,] pixels)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (Chela.Graphics.ES20.PixelFormat)format, (Chela.Graphics.ES20.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, Chela.Graphics.ES20.PixelFormat format, Chela.Graphics.ES20.PixelType type, T6[,,] pixels)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (Chela.Graphics.ES20.PixelFormat)format, (Chela.Graphics.ES20.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ReadPixels<T6>(Int32 x, Int32 y, Int32 width, Int32 height, Chela.Graphics.ES20.PixelFormat format, Chela.Graphics.ES20.PixelType type, ref T6 pixels)
            where T6 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glReadPixels((Int32)x, (Int32)y, (Int32)width, (Int32)height, (Chela.Graphics.ES20.PixelFormat)format, (Chela.Graphics.ES20.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T6)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ReleaseShaderCompiler()
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glReleaseShaderCompiler();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void RenderbufferStorage(Chela.Graphics.ES20.RenderbufferTarget target, Chela.Graphics.ES20.RenderbufferInternalFormat internalformat, Int32 width, Int32 height)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glRenderbufferStorage((Chela.Graphics.ES20.RenderbufferTarget)target, (Chela.Graphics.ES20.RenderbufferInternalFormat)internalformat, (Int32)width, (Int32)height);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void SampleCoverage(Single value, bool invert)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glSampleCoverage((Single)value, (bool)invert);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Scissor(Int32 x, Int32 y, Int32 width, Int32 height)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glScissor((Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderBinary(Int32 n, Int32[] shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* shaders_ptr = shaders)
                {
                    Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary, (Int32)length);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderBinary<T3>(Int32 n, Int32[] shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, T3[] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* shaders_ptr = shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderBinary<T3>(Int32 n, Int32[] shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, T3[,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* shaders_ptr = shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderBinary<T3>(Int32 n, Int32[] shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, T3[,,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* shaders_ptr = shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderBinary<T3>(Int32 n, Int32[] shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, ref T3 binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* shaders_ptr = shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                        binary = (T3)binary_ptr.Target;
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderBinary(Int32 n, ref Int32 shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* shaders_ptr = &shaders)
                {
                    Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary, (Int32)length);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderBinary<T3>(Int32 n, ref Int32 shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, T3[] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* shaders_ptr = &shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderBinary<T3>(Int32 n, ref Int32 shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, T3[,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* shaders_ptr = &shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderBinary<T3>(Int32 n, ref Int32 shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, T3[,,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* shaders_ptr = &shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderBinary<T3>(Int32 n, ref Int32 shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, ref T3 binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* shaders_ptr = &shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                        binary = (T3)binary_ptr.Target;
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void ShaderBinary(Int32 n, Int32* shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glShaderBinary((Int32)n, (UInt32*)shaders, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary, (Int32)length);
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void ShaderBinary<T3>(Int32 n, Int32* shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, T3[] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
            try
            {
                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
            }
            finally
            {
                binary_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void ShaderBinary<T3>(Int32 n, Int32* shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, T3[,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
            try
            {
                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
            }
            finally
            {
                binary_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void ShaderBinary<T3>(Int32 n, Int32* shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, T3[,,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
            try
            {
                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
            }
            finally
            {
                binary_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void ShaderBinary<T3>(Int32 n, Int32* shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, ref T3 binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
            try
            {
                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                binary = (T3)binary_ptr.Target;
            }
            finally
            {
                binary_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderBinary(Int32 n, UInt32[] shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* shaders_ptr = shaders)
                {
                    Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary, (Int32)length);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderBinary<T3>(Int32 n, UInt32[] shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, T3[] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* shaders_ptr = shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderBinary<T3>(Int32 n, UInt32[] shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, T3[,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* shaders_ptr = shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderBinary<T3>(Int32 n, UInt32[] shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, T3[,,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* shaders_ptr = shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderBinary<T3>(Int32 n, UInt32[] shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, ref T3 binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* shaders_ptr = shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                        binary = (T3)binary_ptr.Target;
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderBinary(Int32 n, ref UInt32 shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* shaders_ptr = &shaders)
                {
                    Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary, (Int32)length);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderBinary<T3>(Int32 n, ref UInt32 shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, T3[] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* shaders_ptr = &shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderBinary<T3>(Int32 n, ref UInt32 shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, T3[,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* shaders_ptr = &shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderBinary<T3>(Int32 n, ref UInt32 shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, T3[,,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* shaders_ptr = &shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderBinary<T3>(Int32 n, ref UInt32 shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, ref T3 binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (UInt32* shaders_ptr = &shaders)
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glShaderBinary((Int32)n, (UInt32*)shaders_ptr, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                        binary = (T3)binary_ptr.Target;
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void ShaderBinary(Int32 n, UInt32* shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, IntPtr binary, Int32 length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glShaderBinary((Int32)n, (UInt32*)shaders, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary, (Int32)length);
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void ShaderBinary<T3>(Int32 n, UInt32* shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, T3[] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
            try
            {
                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
            }
            finally
            {
                binary_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void ShaderBinary<T3>(Int32 n, UInt32* shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, T3[,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
            try
            {
                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
            }
            finally
            {
                binary_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void ShaderBinary<T3>(Int32 n, UInt32* shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, T3[,,] binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
            try
            {
                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
            }
            finally
            {
                binary_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void ShaderBinary<T3>(Int32 n, UInt32* shaders, Chela.Graphics.ES20.ShaderBinaryFormat binaryformat, ref T3 binary, Int32 length)
            where T3 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
            try
            {
                Delegates.glShaderBinary((Int32)n, (UInt32*)shaders, (Chela.Graphics.ES20.ShaderBinaryFormat)binaryformat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                binary = (T3)binary_ptr.Target;
            }
            finally
            {
                binary_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderSource(Int32 shader, Int32 count, String[] @string, Int32[] length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    StringHandle @string_ptr = StringHandle.Alloc(@string);
                    try
                    {
                        Delegates.glShaderSource((UInt32)shader, (Int32)count, string_ptr.ArrayAddress, (Int32*)length_ptr);
                    }
                    finally
                    {
                        string_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderSource(Int32 shader, Int32 count, String[] @string, ref Int32 length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    StringHandle @string_ptr = StringHandle.Alloc(@string);
                    try
                    {
                        Delegates.glShaderSource((UInt32)shader, (Int32)count, string_ptr.ArrayAddress, (Int32*)length_ptr);
                    }
                    finally
                    {
                        string_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void ShaderSource(Int32 shader, Int32 count, String[] @string, Int32* length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle @string_ptr = StringHandle.Alloc(@string);
            try
            {
                Delegates.glShaderSource((UInt32)shader, (Int32)count, string_ptr.ArrayAddress, (Int32*)length);
            }
            finally
            {
                string_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderSource(UInt32 shader, Int32 count, String[] @string, Int32[] length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = length)
                {
                    StringHandle @string_ptr = StringHandle.Alloc(@string);
                    try
                    {
                        Delegates.glShaderSource((UInt32)shader, (Int32)count, string_ptr.ArrayAddress, (Int32*)length_ptr);
                    }
                    finally
                    {
                        string_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ShaderSource(UInt32 shader, Int32 count, String[] @string, ref Int32 length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* length_ptr = &length)
                {
                    StringHandle @string_ptr = StringHandle.Alloc(@string);
                    try
                    {
                        Delegates.glShaderSource((UInt32)shader, (Int32)count, string_ptr.ArrayAddress, (Int32*)length_ptr);
                    }
                    finally
                    {
                        string_ptr.Free();
                    }
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void ShaderSource(UInt32 shader, Int32 count, String[] @string, Int32* length)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            StringHandle @string_ptr = StringHandle.Alloc(@string);
            try
            {
                Delegates.glShaderSource((UInt32)shader, (Int32)count, string_ptr.ArrayAddress, (Int32*)length);
            }
            finally
            {
                string_ptr.Free();
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void StencilFunc(Chela.Graphics.ES20.StencilFunction func, Int32 @ref, Int32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glStencilFunc((Chela.Graphics.ES20.StencilFunction)func, (Int32)@ref, (UInt32)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void StencilFunc(Chela.Graphics.ES20.StencilFunction func, Int32 @ref, UInt32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glStencilFunc((Chela.Graphics.ES20.StencilFunction)func, (Int32)@ref, (UInt32)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void StencilFuncSeparate(Chela.Graphics.ES20.CullFaceMode face, Chela.Graphics.ES20.StencilFunction func, Int32 @ref, Int32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glStencilFuncSeparate((Chela.Graphics.ES20.CullFaceMode)face, (Chela.Graphics.ES20.StencilFunction)func, (Int32)@ref, (UInt32)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void StencilFuncSeparate(Chela.Graphics.ES20.CullFaceMode face, Chela.Graphics.ES20.StencilFunction func, Int32 @ref, UInt32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glStencilFuncSeparate((Chela.Graphics.ES20.CullFaceMode)face, (Chela.Graphics.ES20.StencilFunction)func, (Int32)@ref, (UInt32)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void StencilMask(Int32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glStencilMask((UInt32)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void StencilMask(UInt32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glStencilMask((UInt32)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void StencilMaskSeparate(Chela.Graphics.ES20.CullFaceMode face, Int32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glStencilMaskSeparate((Chela.Graphics.ES20.CullFaceMode)face, (UInt32)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void StencilMaskSeparate(Chela.Graphics.ES20.CullFaceMode face, UInt32 mask)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glStencilMaskSeparate((Chela.Graphics.ES20.CullFaceMode)face, (UInt32)mask);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void StencilOp(Chela.Graphics.ES20.StencilOp fail, Chela.Graphics.ES20.StencilOp zfail, Chela.Graphics.ES20.StencilOp zpass)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glStencilOp((Chela.Graphics.ES20.StencilOp)fail, (Chela.Graphics.ES20.StencilOp)zfail, (Chela.Graphics.ES20.StencilOp)zpass);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void StencilOpSeparate(Chela.Graphics.ES20.CullFaceMode face, Chela.Graphics.ES20.StencilOp fail, Chela.Graphics.ES20.StencilOp zfail, Chela.Graphics.ES20.StencilOp zpass)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glStencilOpSeparate((Chela.Graphics.ES20.CullFaceMode)face, (Chela.Graphics.ES20.StencilOp)fail, (Chela.Graphics.ES20.StencilOp)zfail, (Chela.Graphics.ES20.StencilOp)zpass);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexImage2D(Chela.Graphics.ES20.TextureTarget target, Int32 level, Chela.Graphics.ES20.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.ES20.PixelFormat format, Chela.Graphics.ES20.PixelType type, IntPtr pixels)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexImage2D((Chela.Graphics.ES20.TextureTarget)target, (Int32)level, (Chela.Graphics.ES20.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.ES20.PixelFormat)format, (Chela.Graphics.ES20.PixelType)type, (IntPtr)pixels);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexImage2D<T8>(Chela.Graphics.ES20.TextureTarget target, Int32 level, Chela.Graphics.ES20.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.ES20.PixelFormat format, Chela.Graphics.ES20.PixelType type, T8[] pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage2D((Chela.Graphics.ES20.TextureTarget)target, (Int32)level, (Chela.Graphics.ES20.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.ES20.PixelFormat)format, (Chela.Graphics.ES20.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexImage2D<T8>(Chela.Graphics.ES20.TextureTarget target, Int32 level, Chela.Graphics.ES20.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.ES20.PixelFormat format, Chela.Graphics.ES20.PixelType type, T8[,] pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage2D((Chela.Graphics.ES20.TextureTarget)target, (Int32)level, (Chela.Graphics.ES20.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.ES20.PixelFormat)format, (Chela.Graphics.ES20.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexImage2D<T8>(Chela.Graphics.ES20.TextureTarget target, Int32 level, Chela.Graphics.ES20.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.ES20.PixelFormat format, Chela.Graphics.ES20.PixelType type, T8[,,] pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage2D((Chela.Graphics.ES20.TextureTarget)target, (Int32)level, (Chela.Graphics.ES20.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.ES20.PixelFormat)format, (Chela.Graphics.ES20.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexImage2D<T8>(Chela.Graphics.ES20.TextureTarget target, Int32 level, Chela.Graphics.ES20.PixelInternalFormat internalformat, Int32 width, Int32 height, Int32 border, Chela.Graphics.ES20.PixelFormat format, Chela.Graphics.ES20.PixelType type, ref T8 pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexImage2D((Chela.Graphics.ES20.TextureTarget)target, (Int32)level, (Chela.Graphics.ES20.PixelInternalFormat)internalformat, (Int32)width, (Int32)height, (Int32)border, (Chela.Graphics.ES20.PixelFormat)format, (Chela.Graphics.ES20.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T8)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexParameter(Chela.Graphics.ES20.TextureTarget target, Chela.Graphics.ES20.TextureParameterName pname, Single param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexParameterf((Chela.Graphics.ES20.TextureTarget)target, (Chela.Graphics.ES20.TextureParameterName)pname, (Single)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexParameter(Chela.Graphics.ES20.TextureTarget target, Chela.Graphics.ES20.TextureParameterName pname, Single[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* @params_ptr = @params)
                {
                    Delegates.glTexParameterfv((Chela.Graphics.ES20.TextureTarget)target, (Chela.Graphics.ES20.TextureParameterName)pname, (Single*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexParameter(Chela.Graphics.ES20.TextureTarget target, Chela.Graphics.ES20.TextureParameterName pname, Single* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexParameterfv((Chela.Graphics.ES20.TextureTarget)target, (Chela.Graphics.ES20.TextureParameterName)pname, (Single*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexParameter(Chela.Graphics.ES20.TextureTarget target, Chela.Graphics.ES20.TextureParameterName pname, Int32 param)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexParameteri((Chela.Graphics.ES20.TextureTarget)target, (Chela.Graphics.ES20.TextureParameterName)pname, (Int32)param);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexParameter(Chela.Graphics.ES20.TextureTarget target, Chela.Graphics.ES20.TextureParameterName pname, Int32[] @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* @params_ptr = @params)
                {
                    Delegates.glTexParameteriv((Chela.Graphics.ES20.TextureTarget)target, (Chela.Graphics.ES20.TextureParameterName)pname, (Int32*)@params_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void TexParameter(Chela.Graphics.ES20.TextureTarget target, Chela.Graphics.ES20.TextureParameterName pname, Int32* @params)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glTexParameteriv((Chela.Graphics.ES20.TextureTarget)target, (Chela.Graphics.ES20.TextureParameterName)pname, (Int32*)@params);
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexSubImage2D(Chela.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.ES20.PixelFormat format, Chela.Graphics.ES20.PixelType type, IntPtr pixels)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glTexSubImage2D((Chela.Graphics.ES20.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.ES20.PixelFormat)format, (Chela.Graphics.ES20.PixelType)type, (IntPtr)pixels);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexSubImage2D<T8>(Chela.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.ES20.PixelFormat format, Chela.Graphics.ES20.PixelType type, T8[] pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage2D((Chela.Graphics.ES20.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.ES20.PixelFormat)format, (Chela.Graphics.ES20.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexSubImage2D<T8>(Chela.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.ES20.PixelFormat format, Chela.Graphics.ES20.PixelType type, T8[,] pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage2D((Chela.Graphics.ES20.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.ES20.PixelFormat)format, (Chela.Graphics.ES20.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexSubImage2D<T8>(Chela.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.ES20.PixelFormat format, Chela.Graphics.ES20.PixelType type, T8[,,] pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage2D((Chela.Graphics.ES20.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.ES20.PixelFormat)format, (Chela.Graphics.ES20.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void TexSubImage2D<T8>(Chela.Graphics.ES20.TextureTarget target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 width, Int32 height, Chela.Graphics.ES20.PixelFormat format, Chela.Graphics.ES20.PixelType type, ref T8 pixels)
            where T8 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                try
                {
                    Delegates.glTexSubImage2D((Chela.Graphics.ES20.TextureTarget)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)width, (Int32)height, (Chela.Graphics.ES20.PixelFormat)format, (Chela.Graphics.ES20.PixelType)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    pixels = (T8)pixels_ptr.Target;
                }
                finally
                {
                    pixels_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform1(Int32 location, Single x)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUniform1f((Int32)location, (Single)x);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform1(Int32 location, Int32 count, Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform1(Int32 location, Int32 count, ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Uniform1(Int32 location, Int32 count, Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniform1fv((Int32)location, (Int32)count, (Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform1(Int32 location, Int32 x)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUniform1i((Int32)location, (Int32)x);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform1(Int32 location, Int32 count, Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform1(Int32 location, Int32 count, ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Uniform1(Int32 location, Int32 count, Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniform1iv((Int32)location, (Int32)count, (Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform2(Int32 location, Single x, Single y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUniform2f((Int32)location, (Single)x, (Single)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform2(Int32 location, Int32 count, Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform2(Int32 location, Int32 count, ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Uniform2(Int32 location, Int32 count, Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniform2fv((Int32)location, (Int32)count, (Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform2(Int32 location, Int32 x, Int32 y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUniform2i((Int32)location, (Int32)x, (Int32)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform2(Int32 location, Int32 count, Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glUniform2iv((Int32)location, (Int32)count, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Uniform2(Int32 location, Int32 count, Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniform2iv((Int32)location, (Int32)count, (Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform3(Int32 location, Single x, Single y, Single z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUniform3f((Int32)location, (Single)x, (Single)y, (Single)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform3(Int32 location, Int32 count, Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform3(Int32 location, Int32 count, ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Uniform3(Int32 location, Int32 count, Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniform3fv((Int32)location, (Int32)count, (Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform3(Int32 location, Int32 x, Int32 y, Int32 z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUniform3i((Int32)location, (Int32)x, (Int32)y, (Int32)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform3(Int32 location, Int32 count, Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform3(Int32 location, Int32 count, ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Uniform3(Int32 location, Int32 count, Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniform3iv((Int32)location, (Int32)count, (Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform4(Int32 location, Single x, Single y, Single z, Single w)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUniform4f((Int32)location, (Single)x, (Single)y, (Single)z, (Single)w);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform4(Int32 location, Int32 count, Single[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = v)
                {
                    Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform4(Int32 location, Int32 count, ref Single v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* v_ptr = &v)
                {
                    Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Uniform4(Int32 location, Int32 count, Single* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniform4fv((Int32)location, (Int32)count, (Single*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform4(Int32 location, Int32 x, Int32 y, Int32 z, Int32 w)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUniform4i((Int32)location, (Int32)x, (Int32)y, (Int32)z, (Int32)w);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform4(Int32 location, Int32 count, Int32[] v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = v)
                {
                    Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Uniform4(Int32 location, Int32 count, ref Int32 v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Int32* v_ptr = &v)
                {
                    Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)v_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void Uniform4(Int32 location, Int32 count, Int32* v)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniform4iv((Int32)location, (Int32)count, (Int32*)v);
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix2(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void UniformMatrix2(Int32 location, Int32 count, bool transpose, Single* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniformMatrix2fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix3(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void UniformMatrix3(Int32 location, Int32 count, bool transpose, Single* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniformMatrix3fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single[] value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = value)
                {
                    Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void UniformMatrix4(Int32 location, Int32 count, bool transpose, ref Single value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* value_ptr = &value)
                {
                    Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void UniformMatrix4(Int32 location, Int32 count, bool transpose, Single* value)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glUniformMatrix4fv((Int32)location, (Int32)count, (bool)transpose, (Single*)value);
            #if DEBUG
            }
            #endif
        }

        public static 
        void UseProgram(Int32 program)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUseProgram((UInt32)program);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void UseProgram(UInt32 program)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glUseProgram((UInt32)program);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ValidateProgram(Int32 program)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glValidateProgram((UInt32)program);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void ValidateProgram(UInt32 program)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glValidateProgram((UInt32)program);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib1(Int32 indx, Single x)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib1f((UInt32)indx, (Single)x);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib1(UInt32 indx, Single x)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib1f((UInt32)indx, (Single)x);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib1(Int32 indx, Single[] values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* values_ptr = values)
                {
                    Delegates.glVertexAttrib1fv((UInt32)indx, (Single*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib1(Int32 indx, Single* values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib1fv((UInt32)indx, (Single*)values);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib1(UInt32 indx, Single[] values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* values_ptr = values)
                {
                    Delegates.glVertexAttrib1fv((UInt32)indx, (Single*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib1(UInt32 indx, Single* values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib1fv((UInt32)indx, (Single*)values);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(Int32 indx, Single x, Single y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib2f((UInt32)indx, (Single)x, (Single)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(UInt32 indx, Single x, Single y)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib2f((UInt32)indx, (Single)x, (Single)y);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(Int32 indx, Single[] values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* values_ptr = values)
                {
                    Delegates.glVertexAttrib2fv((UInt32)indx, (Single*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(Int32 indx, ref Single values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* values_ptr = &values)
                {
                    Delegates.glVertexAttrib2fv((UInt32)indx, (Single*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib2(Int32 indx, Single* values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib2fv((UInt32)indx, (Single*)values);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(UInt32 indx, Single[] values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* values_ptr = values)
                {
                    Delegates.glVertexAttrib2fv((UInt32)indx, (Single*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib2(UInt32 indx, ref Single values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* values_ptr = &values)
                {
                    Delegates.glVertexAttrib2fv((UInt32)indx, (Single*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib2(UInt32 indx, Single* values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib2fv((UInt32)indx, (Single*)values);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(Int32 indx, Single x, Single y, Single z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib3f((UInt32)indx, (Single)x, (Single)y, (Single)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(UInt32 indx, Single x, Single y, Single z)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib3f((UInt32)indx, (Single)x, (Single)y, (Single)z);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(Int32 indx, Single[] values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* values_ptr = values)
                {
                    Delegates.glVertexAttrib3fv((UInt32)indx, (Single*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(Int32 indx, ref Single values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* values_ptr = &values)
                {
                    Delegates.glVertexAttrib3fv((UInt32)indx, (Single*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib3(Int32 indx, Single* values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib3fv((UInt32)indx, (Single*)values);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(UInt32 indx, Single[] values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* values_ptr = values)
                {
                    Delegates.glVertexAttrib3fv((UInt32)indx, (Single*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib3(UInt32 indx, ref Single values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* values_ptr = &values)
                {
                    Delegates.glVertexAttrib3fv((UInt32)indx, (Single*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib3(UInt32 indx, Single* values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib3fv((UInt32)indx, (Single*)values);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(Int32 indx, Single x, Single y, Single z, Single w)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib4f((UInt32)indx, (Single)x, (Single)y, (Single)z, (Single)w);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(UInt32 indx, Single x, Single y, Single z, Single w)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttrib4f((UInt32)indx, (Single)x, (Single)y, (Single)z, (Single)w);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(Int32 indx, Single[] values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* values_ptr = values)
                {
                    Delegates.glVertexAttrib4fv((UInt32)indx, (Single*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(Int32 indx, ref Single values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* values_ptr = &values)
                {
                    Delegates.glVertexAttrib4fv((UInt32)indx, (Single*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4(Int32 indx, Single* values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4fv((UInt32)indx, (Single*)values);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(UInt32 indx, Single[] values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* values_ptr = values)
                {
                    Delegates.glVertexAttrib4fv((UInt32)indx, (Single*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttrib4(UInt32 indx, ref Single values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                fixed (Single* values_ptr = &values)
                {
                    Delegates.glVertexAttrib4fv((UInt32)indx, (Single*)values_ptr);
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        unsafe void VertexAttrib4(UInt32 indx, Single* values)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            Delegates.glVertexAttrib4fv((UInt32)indx, (Single*)values);
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribPointer(Int32 indx, Int32 size, Chela.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, IntPtr ptr)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttribPointer((UInt32)indx, (Int32)size, (Chela.Graphics.ES20.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)ptr);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribPointer<T5>(Int32 indx, Int32 size, Chela.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, T5[] ptr)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)indx, (Int32)size, (Chela.Graphics.ES20.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    ptr_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribPointer<T5>(Int32 indx, Int32 size, Chela.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, T5[,] ptr)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)indx, (Int32)size, (Chela.Graphics.ES20.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    ptr_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribPointer<T5>(Int32 indx, Int32 size, Chela.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, T5[,,] ptr)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)indx, (Int32)size, (Chela.Graphics.ES20.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    ptr_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribPointer<T5>(Int32 indx, Int32 size, Chela.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, ref T5 ptr)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)indx, (Int32)size, (Chela.Graphics.ES20.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
                    ptr = (T5)ptr_ptr.Target;
                }
                finally
                {
                    ptr_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribPointer(UInt32 indx, Int32 size, Chela.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, IntPtr ptr)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glVertexAttribPointer((UInt32)indx, (Int32)size, (Chela.Graphics.ES20.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)ptr);
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribPointer<T5>(UInt32 indx, Int32 size, Chela.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, T5[] ptr)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)indx, (Int32)size, (Chela.Graphics.ES20.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    ptr_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribPointer<T5>(UInt32 indx, Int32 size, Chela.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, T5[,] ptr)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)indx, (Int32)size, (Chela.Graphics.ES20.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    ptr_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribPointer<T5>(UInt32 indx, Int32 size, Chela.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, T5[,,] ptr)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)indx, (Int32)size, (Chela.Graphics.ES20.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    ptr_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void VertexAttribPointer<T5>(UInt32 indx, Int32 size, Chela.Graphics.ES20.VertexAttribPointerType type, bool normalized, Int32 stride, ref T5 ptr)
            where T5 : struct
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                GCHandle ptr_ptr = GCHandle.Alloc(ptr, GCHandleType.Pinned);
                try
                {
                    Delegates.glVertexAttribPointer((UInt32)indx, (Int32)size, (Chela.Graphics.ES20.VertexAttribPointerType)type, (bool)normalized, (Int32)stride, (IntPtr)ptr_ptr.AddrOfPinnedObject());
                    ptr = (T5)ptr_ptr.Target;
                }
                finally
                {
                    ptr_ptr.Free();
                }
            }
            #if DEBUG
            }
            #endif
        }

        public static 
        void Viewport(Int32 x, Int32 y, Int32 width, Int32 height)
        {
            #if DEBUG
            using (new ErrorHelper(GraphicsContext.CurrentContext))
            {
            #endif
            unsafe
            {
                Delegates.glViewport((Int32)x, (Int32)y, (Int32)width, (Int32)height);
            }
            #if DEBUG
            }
            #endif
        }

        public static partial class NV
        {
            public static 
            void DeleteFences(Int32 n, Int32[] fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* fences_ptr = fences)
                    {
                        Delegates.glDeleteFencesNV((Int32)n, (UInt32*)fences_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteFences(Int32 n, ref Int32 fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* fences_ptr = &fences)
                    {
                        Delegates.glDeleteFencesNV((Int32)n, (UInt32*)fences_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteFences(Int32 n, Int32* fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteFencesNV((Int32)n, (UInt32*)fences);
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteFences(Int32 n, UInt32[] fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* fences_ptr = fences)
                    {
                        Delegates.glDeleteFencesNV((Int32)n, (UInt32*)fences_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void DeleteFences(Int32 n, ref UInt32 fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* fences_ptr = &fences)
                    {
                        Delegates.glDeleteFencesNV((Int32)n, (UInt32*)fences_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void DeleteFences(Int32 n, UInt32* fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glDeleteFencesNV((Int32)n, (UInt32*)fences);
                #if DEBUG
                }
                #endif
            }

            public static 
            void FinishFence(Int32 fence)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFinishFenceNV((UInt32)fence);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FinishFence(UInt32 fence)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFinishFenceNV((UInt32)fence);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenFences(Int32 n, Int32[] fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* fences_ptr = fences)
                    {
                        Delegates.glGenFencesNV((Int32)n, (UInt32*)fences_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenFences(Int32 n, out Int32 fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* fences_ptr = &fences)
                    {
                        Delegates.glGenFencesNV((Int32)n, (UInt32*)fences_ptr);
                        fences = *fences_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenFences(Int32 n, Int32* fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenFencesNV((Int32)n, (UInt32*)fences);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenFences(Int32 n, UInt32[] fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* fences_ptr = fences)
                    {
                        Delegates.glGenFencesNV((Int32)n, (UInt32*)fences_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GenFences(Int32 n, out UInt32 fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (UInt32* fences_ptr = &fences)
                    {
                        Delegates.glGenFencesNV((Int32)n, (UInt32*)fences_ptr);
                        fences = *fences_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GenFences(Int32 n, UInt32* fences)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGenFencesNV((Int32)n, (UInt32*)fences);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFence(Int32 fence, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFenceivNV((UInt32)fence, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFence(Int32 fence, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFenceivNV((UInt32)fence, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetFence(Int32 fence, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetFenceivNV((UInt32)fence, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFence(UInt32 fence, Int32[] @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = @params)
                    {
                        Delegates.glGetFenceivNV((UInt32)fence, (Int32*)@params_ptr);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetFence(UInt32 fence, out Int32 @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* @params_ptr = &@params)
                    {
                        Delegates.glGetFenceivNV((UInt32)fence, (Int32*)@params_ptr);
                        @params = *@params_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetFence(UInt32 fence, Int32* @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetFenceivNV((UInt32)fence, (Int32*)@params);
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsFence(Int32 fence)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsFenceNV((UInt32)fence);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool IsFence(UInt32 fence)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glIsFenceNV((UInt32)fence);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetFence(Int32 fence, Chela.Graphics.ES20.All condition)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSetFenceNV((UInt32)fence, (Chela.Graphics.ES20.All)condition);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void SetFence(UInt32 fence, Chela.Graphics.ES20.All condition)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glSetFenceNV((UInt32)fence, (Chela.Graphics.ES20.All)condition);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool TestFence(Int32 fence)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glTestFenceNV((UInt32)fence);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool TestFence(UInt32 fence)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glTestFenceNV((UInt32)fence);
                }
                #if DEBUG
                }
                #endif
            }

        }

        public static partial class Oes
        {
            public static 
            void CompressedTexImage3D(Chela.Graphics.ES20.All target, Int32 level, Chela.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedTexImage3DOES((Chela.Graphics.ES20.All)target, (Int32)level, (Chela.Graphics.ES20.All)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexImage3D<T8>(Chela.Graphics.ES20.All target, Int32 level, Chela.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, T8[] data)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexImage3DOES((Chela.Graphics.ES20.All)target, (Int32)level, (Chela.Graphics.ES20.All)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexImage3D<T8>(Chela.Graphics.ES20.All target, Int32 level, Chela.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, T8[,] data)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexImage3DOES((Chela.Graphics.ES20.All)target, (Int32)level, (Chela.Graphics.ES20.All)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexImage3D<T8>(Chela.Graphics.ES20.All target, Int32 level, Chela.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, T8[,,] data)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexImage3DOES((Chela.Graphics.ES20.All)target, (Int32)level, (Chela.Graphics.ES20.All)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexImage3D<T8>(Chela.Graphics.ES20.All target, Int32 level, Chela.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Int32 imageSize, ref T8 data)
                where T8 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexImage3DOES((Chela.Graphics.ES20.All)target, (Int32)level, (Chela.Graphics.ES20.All)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T8)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexSubImage3D(Chela.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.ES20.All format, Int32 imageSize, IntPtr data)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCompressedTexSubImage3DOES((Chela.Graphics.ES20.All)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.ES20.All)format, (Int32)imageSize, (IntPtr)data);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexSubImage3D<T10>(Chela.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.ES20.All format, Int32 imageSize, T10[] data)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexSubImage3DOES((Chela.Graphics.ES20.All)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.ES20.All)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexSubImage3D<T10>(Chela.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.ES20.All format, Int32 imageSize, T10[,] data)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexSubImage3DOES((Chela.Graphics.ES20.All)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.ES20.All)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexSubImage3D<T10>(Chela.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.ES20.All format, Int32 imageSize, T10[,,] data)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexSubImage3DOES((Chela.Graphics.ES20.All)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.ES20.All)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CompressedTexSubImage3D<T10>(Chela.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.ES20.All format, Int32 imageSize, ref T10 data)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle data_ptr = GCHandle.Alloc(data, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glCompressedTexSubImage3DOES((Chela.Graphics.ES20.All)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.ES20.All)format, (Int32)imageSize, (IntPtr)data_ptr.AddrOfPinnedObject());
                        data = (T10)data_ptr.Target;
                    }
                    finally
                    {
                        data_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void CopyTexSubImage3D(Chela.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 x, Int32 y, Int32 width, Int32 height)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glCopyTexSubImage3DOES((Chela.Graphics.ES20.All)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)x, (Int32)y, (Int32)width, (Int32)height);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EGLImageTargetRenderbufferStorage(Chela.Graphics.ES20.All target, IntPtr image)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEGLImageTargetRenderbufferStorageOES((Chela.Graphics.ES20.All)target, (IntPtr)image);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void EGLImageTargetTexture2D(Chela.Graphics.ES20.All target, IntPtr image)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glEGLImageTargetTexture2DOES((Chela.Graphics.ES20.All)target, (IntPtr)image);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferTexture3D(Chela.Graphics.ES20.All target, Chela.Graphics.ES20.All attachment, Chela.Graphics.ES20.All textarget, Int32 texture, Int32 level, Int32 zoffset)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferTexture3DOES((Chela.Graphics.ES20.All)target, (Chela.Graphics.ES20.All)attachment, (Chela.Graphics.ES20.All)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void FramebufferTexture3D(Chela.Graphics.ES20.All target, Chela.Graphics.ES20.All attachment, Chela.Graphics.ES20.All textarget, UInt32 texture, Int32 level, Int32 zoffset)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glFramebufferTexture3DOES((Chela.Graphics.ES20.All)target, (Chela.Graphics.ES20.All)attachment, (Chela.Graphics.ES20.All)textarget, (UInt32)texture, (Int32)level, (Int32)zoffset);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetBufferPointer(Chela.Graphics.ES20.All target, Chela.Graphics.ES20.All pname, IntPtr @params)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glGetBufferPointervOES((Chela.Graphics.ES20.All)target, (Chela.Graphics.ES20.All)pname, (IntPtr)@params);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetBufferPointer<T2>(Chela.Graphics.ES20.All target, Chela.Graphics.ES20.All pname, T2[] @params)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetBufferPointervOES((Chela.Graphics.ES20.All)target, (Chela.Graphics.ES20.All)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetBufferPointer<T2>(Chela.Graphics.ES20.All target, Chela.Graphics.ES20.All pname, T2[,] @params)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetBufferPointervOES((Chela.Graphics.ES20.All)target, (Chela.Graphics.ES20.All)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetBufferPointer<T2>(Chela.Graphics.ES20.All target, Chela.Graphics.ES20.All pname, T2[,,] @params)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetBufferPointervOES((Chela.Graphics.ES20.All)target, (Chela.Graphics.ES20.All)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetBufferPointer<T2>(Chela.Graphics.ES20.All target, Chela.Graphics.ES20.All pname, ref T2 @params)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle @params_ptr = GCHandle.Alloc(@params, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glGetBufferPointervOES((Chela.Graphics.ES20.All)target, (Chela.Graphics.ES20.All)pname, (IntPtr)@params_ptr.AddrOfPinnedObject());
                        @params = (T2)@params_ptr.Target;
                    }
                    finally
                    {
                        @params_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramBinary(Int32 program, Int32 bufSize, Int32[] length, Chela.Graphics.ES20.All[] binaryFormat, IntPtr binary)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    fixed (Chela.Graphics.ES20.All* binaryFormat_ptr = binaryFormat)
                    {
                        Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Chela.Graphics.ES20.All*)binaryFormat_ptr, (IntPtr)binary);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramBinary<T4>(Int32 program, Int32 bufSize, Int32[] length, Chela.Graphics.ES20.All[] binaryFormat, T4[] binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    fixed (Chela.Graphics.ES20.All* binaryFormat_ptr = binaryFormat)
                    {
                        GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Chela.Graphics.ES20.All*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
                        }
                        finally
                        {
                            binary_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramBinary<T4>(Int32 program, Int32 bufSize, Int32[] length, Chela.Graphics.ES20.All[] binaryFormat, T4[,] binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    fixed (Chela.Graphics.ES20.All* binaryFormat_ptr = binaryFormat)
                    {
                        GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Chela.Graphics.ES20.All*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
                        }
                        finally
                        {
                            binary_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramBinary<T4>(Int32 program, Int32 bufSize, Int32[] length, Chela.Graphics.ES20.All[] binaryFormat, T4[,,] binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    fixed (Chela.Graphics.ES20.All* binaryFormat_ptr = binaryFormat)
                    {
                        GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Chela.Graphics.ES20.All*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
                        }
                        finally
                        {
                            binary_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramBinary<T4>(Int32 program, Int32 bufSize, Int32[] length, Chela.Graphics.ES20.All[] binaryFormat, ref T4 binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    fixed (Chela.Graphics.ES20.All* binaryFormat_ptr = binaryFormat)
                    {
                        GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Chela.Graphics.ES20.All*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
                            binary = (T4)binary_ptr.Target;
                        }
                        finally
                        {
                            binary_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramBinary(Int32 program, Int32 bufSize, out Int32 length, out Chela.Graphics.ES20.All binaryFormat, IntPtr binary)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Chela.Graphics.ES20.All* binaryFormat_ptr = &binaryFormat)
                    {
                        Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Chela.Graphics.ES20.All*)binaryFormat_ptr, (IntPtr)binary);
                        length = *length_ptr;
                        binaryFormat = *binaryFormat_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramBinary<T4>(Int32 program, Int32 bufSize, out Int32 length, out Chela.Graphics.ES20.All binaryFormat, T4[] binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Chela.Graphics.ES20.All* binaryFormat_ptr = &binaryFormat)
                    {
                        GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Chela.Graphics.ES20.All*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
                            length = *length_ptr;
                            binaryFormat = *binaryFormat_ptr;
                        }
                        finally
                        {
                            binary_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramBinary<T4>(Int32 program, Int32 bufSize, out Int32 length, out Chela.Graphics.ES20.All binaryFormat, T4[,] binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Chela.Graphics.ES20.All* binaryFormat_ptr = &binaryFormat)
                    {
                        GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Chela.Graphics.ES20.All*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
                            length = *length_ptr;
                            binaryFormat = *binaryFormat_ptr;
                        }
                        finally
                        {
                            binary_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramBinary<T4>(Int32 program, Int32 bufSize, out Int32 length, out Chela.Graphics.ES20.All binaryFormat, T4[,,] binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Chela.Graphics.ES20.All* binaryFormat_ptr = &binaryFormat)
                    {
                        GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Chela.Graphics.ES20.All*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
                            length = *length_ptr;
                            binaryFormat = *binaryFormat_ptr;
                        }
                        finally
                        {
                            binary_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramBinary<T4>(Int32 program, Int32 bufSize, out Int32 length, out Chela.Graphics.ES20.All binaryFormat, ref T4 binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Chela.Graphics.ES20.All* binaryFormat_ptr = &binaryFormat)
                    {
                        GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Chela.Graphics.ES20.All*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
                            length = *length_ptr;
                            binaryFormat = *binaryFormat_ptr;
                            binary = (T4)binary_ptr.Target;
                        }
                        finally
                        {
                            binary_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramBinary(Int32 program, Int32 bufSize, Int32* length, Chela.Graphics.ES20.All* binaryFormat, IntPtr binary)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length, (Chela.Graphics.ES20.All*)binaryFormat, (IntPtr)binary);
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, Int32* length, Chela.Graphics.ES20.All* binaryFormat, T4[] binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length, (Chela.Graphics.ES20.All*)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    binary_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, Int32* length, Chela.Graphics.ES20.All* binaryFormat, T4[,] binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length, (Chela.Graphics.ES20.All*)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    binary_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, Int32* length, Chela.Graphics.ES20.All* binaryFormat, T4[,,] binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length, (Chela.Graphics.ES20.All*)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    binary_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramBinary<T4>(Int32 program, Int32 bufSize, Int32* length, Chela.Graphics.ES20.All* binaryFormat, ref T4 binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length, (Chela.Graphics.ES20.All*)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject());
                    binary = (T4)binary_ptr.Target;
                }
                finally
                {
                    binary_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramBinary(UInt32 program, Int32 bufSize, Int32[] length, Chela.Graphics.ES20.All[] binaryFormat, IntPtr binary)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    fixed (Chela.Graphics.ES20.All* binaryFormat_ptr = binaryFormat)
                    {
                        Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Chela.Graphics.ES20.All*)binaryFormat_ptr, (IntPtr)binary);
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, Int32[] length, Chela.Graphics.ES20.All[] binaryFormat, T4[] binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    fixed (Chela.Graphics.ES20.All* binaryFormat_ptr = binaryFormat)
                    {
                        GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Chela.Graphics.ES20.All*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
                        }
                        finally
                        {
                            binary_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, Int32[] length, Chela.Graphics.ES20.All[] binaryFormat, T4[,] binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    fixed (Chela.Graphics.ES20.All* binaryFormat_ptr = binaryFormat)
                    {
                        GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Chela.Graphics.ES20.All*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
                        }
                        finally
                        {
                            binary_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, Int32[] length, Chela.Graphics.ES20.All[] binaryFormat, T4[,,] binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    fixed (Chela.Graphics.ES20.All* binaryFormat_ptr = binaryFormat)
                    {
                        GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Chela.Graphics.ES20.All*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
                        }
                        finally
                        {
                            binary_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, Int32[] length, Chela.Graphics.ES20.All[] binaryFormat, ref T4 binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = length)
                    fixed (Chela.Graphics.ES20.All* binaryFormat_ptr = binaryFormat)
                    {
                        GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Chela.Graphics.ES20.All*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
                            binary = (T4)binary_ptr.Target;
                        }
                        finally
                        {
                            binary_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramBinary(UInt32 program, Int32 bufSize, out Int32 length, out Chela.Graphics.ES20.All binaryFormat, IntPtr binary)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Chela.Graphics.ES20.All* binaryFormat_ptr = &binaryFormat)
                    {
                        Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Chela.Graphics.ES20.All*)binaryFormat_ptr, (IntPtr)binary);
                        length = *length_ptr;
                        binaryFormat = *binaryFormat_ptr;
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, out Int32 length, out Chela.Graphics.ES20.All binaryFormat, T4[] binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Chela.Graphics.ES20.All* binaryFormat_ptr = &binaryFormat)
                    {
                        GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Chela.Graphics.ES20.All*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
                            length = *length_ptr;
                            binaryFormat = *binaryFormat_ptr;
                        }
                        finally
                        {
                            binary_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, out Int32 length, out Chela.Graphics.ES20.All binaryFormat, T4[,] binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Chela.Graphics.ES20.All* binaryFormat_ptr = &binaryFormat)
                    {
                        GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Chela.Graphics.ES20.All*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
                            length = *length_ptr;
                            binaryFormat = *binaryFormat_ptr;
                        }
                        finally
                        {
                            binary_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, out Int32 length, out Chela.Graphics.ES20.All binaryFormat, T4[,,] binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Chela.Graphics.ES20.All* binaryFormat_ptr = &binaryFormat)
                    {
                        GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Chela.Graphics.ES20.All*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
                            length = *length_ptr;
                            binaryFormat = *binaryFormat_ptr;
                        }
                        finally
                        {
                            binary_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, out Int32 length, out Chela.Graphics.ES20.All binaryFormat, ref T4 binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    fixed (Int32* length_ptr = &length)
                    fixed (Chela.Graphics.ES20.All* binaryFormat_ptr = &binaryFormat)
                    {
                        GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                        try
                        {
                            Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length_ptr, (Chela.Graphics.ES20.All*)binaryFormat_ptr, (IntPtr)binary_ptr.AddrOfPinnedObject());
                            length = *length_ptr;
                            binaryFormat = *binaryFormat_ptr;
                            binary = (T4)binary_ptr.Target;
                        }
                        finally
                        {
                            binary_ptr.Free();
                        }
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramBinary(UInt32 program, Int32 bufSize, Int32* length, Chela.Graphics.ES20.All* binaryFormat, IntPtr binary)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length, (Chela.Graphics.ES20.All*)binaryFormat, (IntPtr)binary);
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, Int32* length, Chela.Graphics.ES20.All* binaryFormat, T4[] binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length, (Chela.Graphics.ES20.All*)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    binary_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, Int32* length, Chela.Graphics.ES20.All* binaryFormat, T4[,] binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length, (Chela.Graphics.ES20.All*)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    binary_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, Int32* length, Chela.Graphics.ES20.All* binaryFormat, T4[,,] binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length, (Chela.Graphics.ES20.All*)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject());
                }
                finally
                {
                    binary_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe void GetProgramBinary<T4>(UInt32 program, Int32 bufSize, Int32* length, Chela.Graphics.ES20.All* binaryFormat, ref T4 binary)
                where T4 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                try
                {
                    Delegates.glGetProgramBinaryOES((UInt32)program, (Int32)bufSize, (Int32*)length, (Chela.Graphics.ES20.All*)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject());
                    binary = (T4)binary_ptr.Target;
                }
                finally
                {
                    binary_ptr.Free();
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            unsafe System.IntPtr MapBuffer(Chela.Graphics.ES20.All target, Chela.Graphics.ES20.All access)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                return Delegates.glMapBufferOES((Chela.Graphics.ES20.All)target, (Chela.Graphics.ES20.All)access);
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramBinary(Int32 program, Chela.Graphics.ES20.All binaryFormat, IntPtr binary, Int32 length)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramBinaryOES((UInt32)program, (Chela.Graphics.ES20.All)binaryFormat, (IntPtr)binary, (Int32)length);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramBinary<T2>(Int32 program, Chela.Graphics.ES20.All binaryFormat, T2[] binary, Int32 length)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glProgramBinaryOES((UInt32)program, (Chela.Graphics.ES20.All)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramBinary<T2>(Int32 program, Chela.Graphics.ES20.All binaryFormat, T2[,] binary, Int32 length)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glProgramBinaryOES((UInt32)program, (Chela.Graphics.ES20.All)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramBinary<T2>(Int32 program, Chela.Graphics.ES20.All binaryFormat, T2[,,] binary, Int32 length)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glProgramBinaryOES((UInt32)program, (Chela.Graphics.ES20.All)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramBinary<T2>(Int32 program, Chela.Graphics.ES20.All binaryFormat, ref T2 binary, Int32 length)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glProgramBinaryOES((UInt32)program, (Chela.Graphics.ES20.All)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                        binary = (T2)binary_ptr.Target;
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramBinary(UInt32 program, Chela.Graphics.ES20.All binaryFormat, IntPtr binary, Int32 length)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glProgramBinaryOES((UInt32)program, (Chela.Graphics.ES20.All)binaryFormat, (IntPtr)binary, (Int32)length);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramBinary<T2>(UInt32 program, Chela.Graphics.ES20.All binaryFormat, T2[] binary, Int32 length)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glProgramBinaryOES((UInt32)program, (Chela.Graphics.ES20.All)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramBinary<T2>(UInt32 program, Chela.Graphics.ES20.All binaryFormat, T2[,] binary, Int32 length)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glProgramBinaryOES((UInt32)program, (Chela.Graphics.ES20.All)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramBinary<T2>(UInt32 program, Chela.Graphics.ES20.All binaryFormat, T2[,,] binary, Int32 length)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glProgramBinaryOES((UInt32)program, (Chela.Graphics.ES20.All)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void ProgramBinary<T2>(UInt32 program, Chela.Graphics.ES20.All binaryFormat, ref T2 binary, Int32 length)
                where T2 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle binary_ptr = GCHandle.Alloc(binary, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glProgramBinaryOES((UInt32)program, (Chela.Graphics.ES20.All)binaryFormat, (IntPtr)binary_ptr.AddrOfPinnedObject(), (Int32)length);
                        binary = (T2)binary_ptr.Target;
                    }
                    finally
                    {
                        binary_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexImage3D(Chela.Graphics.ES20.All target, Int32 level, Chela.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.ES20.All format, Chela.Graphics.ES20.All type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexImage3DOES((Chela.Graphics.ES20.All)target, (Int32)level, (Chela.Graphics.ES20.All)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.ES20.All)format, (Chela.Graphics.ES20.All)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexImage3D<T9>(Chela.Graphics.ES20.All target, Int32 level, Chela.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.ES20.All format, Chela.Graphics.ES20.All type, T9[] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexImage3DOES((Chela.Graphics.ES20.All)target, (Int32)level, (Chela.Graphics.ES20.All)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.ES20.All)format, (Chela.Graphics.ES20.All)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexImage3D<T9>(Chela.Graphics.ES20.All target, Int32 level, Chela.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.ES20.All format, Chela.Graphics.ES20.All type, T9[,] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexImage3DOES((Chela.Graphics.ES20.All)target, (Int32)level, (Chela.Graphics.ES20.All)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.ES20.All)format, (Chela.Graphics.ES20.All)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexImage3D<T9>(Chela.Graphics.ES20.All target, Int32 level, Chela.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.ES20.All format, Chela.Graphics.ES20.All type, T9[,,] pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexImage3DOES((Chela.Graphics.ES20.All)target, (Int32)level, (Chela.Graphics.ES20.All)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.ES20.All)format, (Chela.Graphics.ES20.All)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexImage3D<T9>(Chela.Graphics.ES20.All target, Int32 level, Chela.Graphics.ES20.All internalformat, Int32 width, Int32 height, Int32 depth, Int32 border, Chela.Graphics.ES20.All format, Chela.Graphics.ES20.All type, ref T9 pixels)
                where T9 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexImage3DOES((Chela.Graphics.ES20.All)target, (Int32)level, (Chela.Graphics.ES20.All)internalformat, (Int32)width, (Int32)height, (Int32)depth, (Int32)border, (Chela.Graphics.ES20.All)format, (Chela.Graphics.ES20.All)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T9)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage3D(Chela.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.ES20.All format, Chela.Graphics.ES20.All type, IntPtr pixels)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    Delegates.glTexSubImage3DOES((Chela.Graphics.ES20.All)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.ES20.All)format, (Chela.Graphics.ES20.All)type, (IntPtr)pixels);
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage3D<T10>(Chela.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.ES20.All format, Chela.Graphics.ES20.All type, T10[] pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage3DOES((Chela.Graphics.ES20.All)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.ES20.All)format, (Chela.Graphics.ES20.All)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage3D<T10>(Chela.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.ES20.All format, Chela.Graphics.ES20.All type, T10[,] pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage3DOES((Chela.Graphics.ES20.All)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.ES20.All)format, (Chela.Graphics.ES20.All)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage3D<T10>(Chela.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.ES20.All format, Chela.Graphics.ES20.All type, T10[,,] pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage3DOES((Chela.Graphics.ES20.All)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.ES20.All)format, (Chela.Graphics.ES20.All)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            void TexSubImage3D<T10>(Chela.Graphics.ES20.All target, Int32 level, Int32 xoffset, Int32 yoffset, Int32 zoffset, Int32 width, Int32 height, Int32 depth, Chela.Graphics.ES20.All format, Chela.Graphics.ES20.All type, ref T10 pixels)
                where T10 : struct
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    GCHandle pixels_ptr = GCHandle.Alloc(pixels, GCHandleType.Pinned);
                    try
                    {
                        Delegates.glTexSubImage3DOES((Chela.Graphics.ES20.All)target, (Int32)level, (Int32)xoffset, (Int32)yoffset, (Int32)zoffset, (Int32)width, (Int32)height, (Int32)depth, (Chela.Graphics.ES20.All)format, (Chela.Graphics.ES20.All)type, (IntPtr)pixels_ptr.AddrOfPinnedObject());
                        pixels = (T10)pixels_ptr.Target;
                    }
                    finally
                    {
                        pixels_ptr.Free();
                    }
                }
                #if DEBUG
                }
                #endif
            }

            public static 
            bool UnmapBuffer(Chela.Graphics.ES20.All target)
            {
                #if DEBUG
                using (new ErrorHelper(GraphicsContext.CurrentContext))
                {
                #endif
                unsafe
                {
                    return Delegates.glUnmapBufferOES((Chela.Graphics.ES20.All)target);
                }
                #if DEBUG
                }
                #endif
            }

        }

    }
}
